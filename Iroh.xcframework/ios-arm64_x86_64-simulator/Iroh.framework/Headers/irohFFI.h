// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that Swift executes
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable, int8_t);

// Callback to execute Rust tasks using a Swift Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Continuation callback for UniFFI Futures
typedef void (*UniFfiRustFutureContinuation)(void * _Nonnull, int8_t);

// Scaffolding functions
void uniffi_iroh_fn_free_addprogress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_as_abort(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_as_all_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_as_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_as_found(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_as_progress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_addprogress_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_authorid(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_authorid_from_string(RustBuffer str, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_authorid_equal(void*_Nonnull ptr, void*_Nonnull other, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_authorid_to_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_blobdownloadrequest(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_blobdownloadrequest_new(void*_Nonnull hash, RustBuffer format, void*_Nonnull node, void*_Nonnull tag, void*_Nonnull out, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_collection(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_iroh_fn_method_collection_len(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_collection_links(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_connectiontype(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_connectiontype_as_direct(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_connectiontype_as_mixed(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_connectiontype_as_relay(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_connectiontype_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_directaddrinfo(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_directaddrinfo_addr(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_directaddrinfo_last_control(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_directaddrinfo_last_payload(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_directaddrinfo_latency(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_doc(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_close(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_iroh_fn_method_doc_del(void*_Nonnull ptr, void*_Nonnull author_id, RustBuffer prefix, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_export_file(void*_Nonnull ptr, void*_Nonnull entry, RustBuffer path, RustBuffer cb, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_doc_get_download_policy(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_get_exact(void*_Nonnull ptr, void*_Nonnull author, RustBuffer key, int8_t include_empty, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_get_many(void*_Nonnull ptr, void*_Nonnull query, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_get_one(void*_Nonnull ptr, void*_Nonnull query, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_id(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_import_file(void*_Nonnull ptr, void*_Nonnull author, RustBuffer key, RustBuffer path, int8_t in_place, RustBuffer cb, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_leave(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_doc_set_bytes(void*_Nonnull ptr, void*_Nonnull author, RustBuffer key, RustBuffer value, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_set_download_policy(void*_Nonnull ptr, void*_Nonnull policy, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_set_hash(void*_Nonnull ptr, void*_Nonnull author, RustBuffer key, void*_Nonnull hash, uint64_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_share(void*_Nonnull ptr, RustBuffer mode, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_start_sync(void*_Nonnull ptr, RustBuffer peers, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_doc_status(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_doc_subscribe(void*_Nonnull ptr, uint64_t cb, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_docexportprogress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docexportprogress_as_abort(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docexportprogress_as_found(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docexportprogress_as_progress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docexportprogress_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_docimportprogress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_as_abort(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_as_all_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_as_found(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_as_ingest_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_as_progress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_docimportprogress_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_downloadlocation(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadlocation_external(RustBuffer path, int8_t in_place, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadlocation_internal(RustCallStatus *_Nonnull out_status
    
);
void uniffi_iroh_fn_free_downloadpolicy(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadpolicy_everything(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadpolicy_everything_except(RustBuffer filters, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadpolicy_nothing(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_iroh_fn_constructor_downloadpolicy_nothing_except(RustBuffer filters, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_downloadprogress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_abort(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_export(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_export_progress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_found(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_found_hash_seq(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_network_done(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_as_progress(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_downloadprogress_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_entry(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_entry_author(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_entry_content_bytes(void*_Nonnull ptr, void*_Nonnull doc, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_entry_content_hash(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_iroh_fn_method_entry_content_len(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_entry_key(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_entry_namespace(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_filterkind(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_filterkind_exact(RustBuffer key, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_filterkind_prefix(RustBuffer prefix, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_filterkind_matches(void*_Nonnull ptr, RustBuffer key, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_hash(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_hash_from_bytes(RustBuffer bytes, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_hash_from_string(RustBuffer s, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_hash_new(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_hash_equal(void*_Nonnull ptr, void*_Nonnull other, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_hash_to_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_hash_to_hex(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_hash_to_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_irohnode(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_irohnode_new(RustBuffer path, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_irohnode_author_create(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_author_list(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_add_bytes(void*_Nonnull ptr, RustBuffer bytes, void*_Nonnull tag, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_blobs_add_from_path(void*_Nonnull ptr, RustBuffer path, int8_t in_place, void*_Nonnull tag, void*_Nonnull wrap, uint64_t cb, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_blobs_delete_blob(void*_Nonnull ptr, void*_Nonnull hash, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_blobs_download(void*_Nonnull ptr, void*_Nonnull req, uint64_t cb, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_list(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_list_collections(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_list_incomplete(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_read_at_to_bytes(void*_Nonnull ptr, void*_Nonnull hash, uint64_t offset, RustBuffer len, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_blobs_read_to_bytes(void*_Nonnull ptr, void*_Nonnull hash, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_iroh_fn_method_irohnode_blobs_size(void*_Nonnull ptr, void*_Nonnull hash, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_blobs_write_to_path(void*_Nonnull ptr, void*_Nonnull hash, RustBuffer path, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_connection_info(void*_Nonnull ptr, void*_Nonnull node_id, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_connections(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_irohnode_doc_create(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_doc_drop(void*_Nonnull ptr, RustBuffer doc_id, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_irohnode_doc_join(void*_Nonnull ptr, RustBuffer ticket, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_doc_list(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_doc_open(void*_Nonnull ptr, RustBuffer id, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_node_id(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_stats(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_irohnode_status(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_method_irohnode_tags_delete(void*_Nonnull ptr, RustBuffer name, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_irohnode_tags_list(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_liveevent(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_liveevent_as_content_ready(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_liveevent_as_insert_local(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_liveevent_as_insert_remote(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_liveevent_as_neighbor_down(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_liveevent_as_neighbor_up(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_liveevent_as_sync_finished(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_liveevent_type(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_nodeaddr(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_nodeaddr_new(void*_Nonnull node_id, RustBuffer derp_url, RustBuffer addresses, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_nodeaddr_derp_url(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_nodeaddr_direct_addresses(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_nodeaddr_equal(void*_Nonnull ptr, void*_Nonnull other, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_nodestatusresponse(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_nodestatusresponse_listen_addrs(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_method_nodestatusresponse_node_addr(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_nodestatusresponse_version(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_publickey(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_publickey_from_bytes(RustBuffer bytes, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_publickey_from_string(RustBuffer s, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_publickey_equal(void*_Nonnull ptr, void*_Nonnull other, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_publickey_fmt_short(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_publickey_to_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_publickey_to_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_query(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_all(RustBuffer opts, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_author(void*_Nonnull author, RustBuffer opts, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_author_key_exact(void*_Nonnull author, RustBuffer key, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_author_key_prefix(void*_Nonnull author, RustBuffer prefix, RustBuffer opts, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_key_exact(RustBuffer key, RustBuffer opts, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_key_prefix(RustBuffer prefix, RustBuffer opts, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_query_single_latest_per_key(RustBuffer opts, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_method_query_limit(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_iroh_fn_method_query_offset(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_rangespec(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_rangespec_is_all(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_iroh_fn_method_rangespec_is_empty(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_settagoption(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_settagoption_auto(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_iroh_fn_constructor_settagoption_named(RustBuffer tag, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_free_wrapoption(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_iroh_fn_constructor_wrapoption_no_wrap(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_iroh_fn_constructor_wrapoption_wrap(RustBuffer name, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_init_callback_addcallback(ForeignCallback _Nonnull callback_stub, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_init_callback_docexportfilecallback(ForeignCallback _Nonnull callback_stub, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_init_callback_docimportfilecallback(ForeignCallback _Nonnull callback_stub, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_init_callback_downloadcallback(ForeignCallback _Nonnull callback_stub, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_init_callback_subscribecallback(ForeignCallback _Nonnull callback_stub, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_func_key_to_path(RustBuffer key, RustBuffer prefix, RustBuffer root, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_iroh_fn_func_path_to_key(RustBuffer path, RustBuffer prefix, RustBuffer root, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_func_set_log_level(RustBuffer level, RustCallStatus *_Nonnull out_status
);
void uniffi_iroh_fn_func_start_metrics_collection(RustCallStatus *_Nonnull out_status
    
);
RustBuffer ffi_iroh_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_iroh_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_iroh_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_continuation_callback_set(UniFfiRustFutureContinuation _Nonnull callback
);
void ffi_iroh_rust_future_poll_u8(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_u8(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_u8(void* _Nonnull handle
);
uint8_t ffi_iroh_rust_future_complete_u8(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_i8(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_i8(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_i8(void* _Nonnull handle
);
int8_t ffi_iroh_rust_future_complete_i8(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_u16(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_u16(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_u16(void* _Nonnull handle
);
uint16_t ffi_iroh_rust_future_complete_u16(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_i16(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_i16(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_i16(void* _Nonnull handle
);
int16_t ffi_iroh_rust_future_complete_i16(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_u32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_u32(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_u32(void* _Nonnull handle
);
uint32_t ffi_iroh_rust_future_complete_u32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_i32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_i32(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_i32(void* _Nonnull handle
);
int32_t ffi_iroh_rust_future_complete_i32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_u64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_u64(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_u64(void* _Nonnull handle
);
uint64_t ffi_iroh_rust_future_complete_u64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_i64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_i64(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_i64(void* _Nonnull handle
);
int64_t ffi_iroh_rust_future_complete_i64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_f32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_f32(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_f32(void* _Nonnull handle
);
float ffi_iroh_rust_future_complete_f32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_f64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_f64(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_f64(void* _Nonnull handle
);
double ffi_iroh_rust_future_complete_f64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_pointer(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_pointer(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_pointer(void* _Nonnull handle
);
void*_Nonnull ffi_iroh_rust_future_complete_pointer(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_rust_buffer(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_rust_buffer(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_rust_buffer(void* _Nonnull handle
);
RustBuffer ffi_iroh_rust_future_complete_rust_buffer(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_iroh_rust_future_poll_void(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_iroh_rust_future_cancel_void(void* _Nonnull handle
);
void ffi_iroh_rust_future_free_void(void* _Nonnull handle
);
void ffi_iroh_rust_future_complete_void(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_iroh_checksum_func_key_to_path(void
    
);
uint16_t uniffi_iroh_checksum_func_path_to_key(void
    
);
uint16_t uniffi_iroh_checksum_func_set_log_level(void
    
);
uint16_t uniffi_iroh_checksum_func_start_metrics_collection(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_as_abort(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_as_all_done(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_as_done(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_as_found(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_as_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_addprogress_type(void
    
);
uint16_t uniffi_iroh_checksum_method_authorid_equal(void
    
);
uint16_t uniffi_iroh_checksum_method_authorid_to_string(void
    
);
uint16_t uniffi_iroh_checksum_method_collection_len(void
    
);
uint16_t uniffi_iroh_checksum_method_collection_links(void
    
);
uint16_t uniffi_iroh_checksum_method_connectiontype_as_direct(void
    
);
uint16_t uniffi_iroh_checksum_method_connectiontype_as_mixed(void
    
);
uint16_t uniffi_iroh_checksum_method_connectiontype_as_relay(void
    
);
uint16_t uniffi_iroh_checksum_method_connectiontype_type(void
    
);
uint16_t uniffi_iroh_checksum_method_directaddrinfo_addr(void
    
);
uint16_t uniffi_iroh_checksum_method_directaddrinfo_last_control(void
    
);
uint16_t uniffi_iroh_checksum_method_directaddrinfo_last_payload(void
    
);
uint16_t uniffi_iroh_checksum_method_directaddrinfo_latency(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_close(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_del(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_export_file(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_get_download_policy(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_get_exact(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_get_many(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_get_one(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_id(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_import_file(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_leave(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_set_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_set_download_policy(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_set_hash(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_share(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_start_sync(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_status(void
    
);
uint16_t uniffi_iroh_checksum_method_doc_subscribe(void
    
);
uint16_t uniffi_iroh_checksum_method_docexportprogress_as_abort(void
    
);
uint16_t uniffi_iroh_checksum_method_docexportprogress_as_found(void
    
);
uint16_t uniffi_iroh_checksum_method_docexportprogress_as_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_docexportprogress_type(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_as_abort(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_as_all_done(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_as_found(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_as_ingest_done(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_as_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportprogress_type(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_abort(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_done(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_export(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_export_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_found(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_found_hash_seq(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_network_done(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_as_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadprogress_type(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_author(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_content_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_content_hash(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_content_len(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_key(void
    
);
uint16_t uniffi_iroh_checksum_method_entry_namespace(void
    
);
uint16_t uniffi_iroh_checksum_method_filterkind_matches(void
    
);
uint16_t uniffi_iroh_checksum_method_hash_equal(void
    
);
uint16_t uniffi_iroh_checksum_method_hash_to_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_hash_to_hex(void
    
);
uint16_t uniffi_iroh_checksum_method_hash_to_string(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_author_create(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_author_list(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_add_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_add_from_path(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_delete_blob(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_download(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_list(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_list_collections(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_list_incomplete(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_read_at_to_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_read_to_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_size(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_blobs_write_to_path(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_connection_info(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_connections(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_doc_create(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_doc_drop(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_doc_join(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_doc_list(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_doc_open(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_node_id(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_stats(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_status(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_tags_delete(void
    
);
uint16_t uniffi_iroh_checksum_method_irohnode_tags_list(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_content_ready(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_insert_local(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_insert_remote(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_neighbor_down(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_neighbor_up(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_as_sync_finished(void
    
);
uint16_t uniffi_iroh_checksum_method_liveevent_type(void
    
);
uint16_t uniffi_iroh_checksum_method_nodeaddr_derp_url(void
    
);
uint16_t uniffi_iroh_checksum_method_nodeaddr_direct_addresses(void
    
);
uint16_t uniffi_iroh_checksum_method_nodeaddr_equal(void
    
);
uint16_t uniffi_iroh_checksum_method_nodestatusresponse_listen_addrs(void
    
);
uint16_t uniffi_iroh_checksum_method_nodestatusresponse_node_addr(void
    
);
uint16_t uniffi_iroh_checksum_method_nodestatusresponse_version(void
    
);
uint16_t uniffi_iroh_checksum_method_publickey_equal(void
    
);
uint16_t uniffi_iroh_checksum_method_publickey_fmt_short(void
    
);
uint16_t uniffi_iroh_checksum_method_publickey_to_bytes(void
    
);
uint16_t uniffi_iroh_checksum_method_publickey_to_string(void
    
);
uint16_t uniffi_iroh_checksum_method_query_limit(void
    
);
uint16_t uniffi_iroh_checksum_method_query_offset(void
    
);
uint16_t uniffi_iroh_checksum_method_rangespec_is_all(void
    
);
uint16_t uniffi_iroh_checksum_method_rangespec_is_empty(void
    
);
uint16_t uniffi_iroh_checksum_constructor_authorid_from_string(void
    
);
uint16_t uniffi_iroh_checksum_constructor_blobdownloadrequest_new(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadlocation_external(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadlocation_internal(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadpolicy_everything(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadpolicy_everything_except(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadpolicy_nothing(void
    
);
uint16_t uniffi_iroh_checksum_constructor_downloadpolicy_nothing_except(void
    
);
uint16_t uniffi_iroh_checksum_constructor_filterkind_exact(void
    
);
uint16_t uniffi_iroh_checksum_constructor_filterkind_prefix(void
    
);
uint16_t uniffi_iroh_checksum_constructor_hash_from_bytes(void
    
);
uint16_t uniffi_iroh_checksum_constructor_hash_from_string(void
    
);
uint16_t uniffi_iroh_checksum_constructor_hash_new(void
    
);
uint16_t uniffi_iroh_checksum_constructor_irohnode_new(void
    
);
uint16_t uniffi_iroh_checksum_constructor_nodeaddr_new(void
    
);
uint16_t uniffi_iroh_checksum_constructor_publickey_from_bytes(void
    
);
uint16_t uniffi_iroh_checksum_constructor_publickey_from_string(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_all(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_author(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_author_key_exact(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_author_key_prefix(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_key_exact(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_key_prefix(void
    
);
uint16_t uniffi_iroh_checksum_constructor_query_single_latest_per_key(void
    
);
uint16_t uniffi_iroh_checksum_constructor_settagoption_auto(void
    
);
uint16_t uniffi_iroh_checksum_constructor_settagoption_named(void
    
);
uint16_t uniffi_iroh_checksum_constructor_wrapoption_no_wrap(void
    
);
uint16_t uniffi_iroh_checksum_constructor_wrapoption_wrap(void
    
);
uint16_t uniffi_iroh_checksum_method_addcallback_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_docexportfilecallback_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_docimportfilecallback_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_downloadcallback_progress(void
    
);
uint16_t uniffi_iroh_checksum_method_subscribecallback_event(void
    
);
uint32_t ffi_iroh_uniffi_contract_version(void
    
);

