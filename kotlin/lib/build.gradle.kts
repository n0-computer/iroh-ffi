/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    `maven-publish`
    alias(libs.plugins.dokka)
    signing
}

group = "computer.iroh"
version = "0.31.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation("net.java.dev.jna:jna:5.15.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

kotlin {
    compilerOptions {
        optIn.add("kotlin.ExperimentalUnsignedTypes")
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    systemProperty("java.library.path", "lib/src/main/resources")
    systemProperty("jna.library.path", "lib/src/main/resources")

    testLogging {
        events("passed", "skipped", "failed")
    }
}

val stagingDir = layout.buildDirectory.dir("staging")

signing {
    // Use property `signing.keyId` to pick GPG signing key
    // e.g. `./gradlew publish -Psigning.keyId=24875D73`
    // Or, place it in `~/.gradle/gradle.properties` for persistence.

    useGpgCmd()
    sign(publishing.publications)
}

dokka {
    moduleName = "Iroh"
    dokkaSourceSets.main {
        includes.from(rootProject.projectDir.resolve("README.md"))
        sourceLink {
            localDirectory = file("src/main/kotlin")
            remoteUrl("https://github.com/n0-computer/iroh-ffi/blob/main/kotlin/lib/src/main/kotlin")
            remoteLineSuffix.set("#L")
        }
    }
    pluginsConfiguration.html {
        footerMessage.set("Â© n0, inc.")
    }
    // Runs Dokka in the current Gradle process
    dokkaGeneratorIsolation = ClassLoaderIsolation()
}

tasks.named("javadocJar", Jar::class) {
    dependsOn(tasks.dokkaGenerate)
    from(layout.buildDirectory.dir("dokka/html"))
}

publishing {
    publications {
        register<MavenPublication>("maven") {
            groupId = project.group.toString()
            version = project.version.toString()
            artifactId = "iroh"

            pom {
                // https://central.sonatype.org/publish/requirements/#required-pom-metadata

                name = "Iroh"
                description = "A toolkit for building distributed applications"
                inceptionYear = "2025"
                url = "https://iroh.computer"

                developers {
                    developer {
                        id = "number0"
                        email = "hello@n0.computer"
                        organization = "number0"
                        organizationUrl = "https://n0.computer"
                    }
                }

                licenses {
                    license {
                        name = "Apache License, Version 2.0"
                        url = "https://opensource.org/license/apache-2-0"
                    }
                    license {
                        name = "The MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                scm {
                    connection = "scm:git:git://https://github.com/n0-computer/iroh-ffi.git"
                    developerConnection = "scm:git:ssh://https://github.com/n0-computer/iroh-ffi.git"
                    url = "https://github.com/n0-computer/iroh-ffi"
                }
            }

            from(components["java"])
        }
    }

    repositories {
        maven(uri(stagingDir)) {
            name = "staging"
        }
    }
}

val cleanStagingDir by tasks.register<Delete>("cleanStagingDir") {
    delete(stagingDir)
}

val stagingDirJar by tasks.register<Jar>("stagingDirJar") {
    from(stagingDir)
    archiveFileName.set("deploy.jar")
}

tasks.named("publishMavenPublicationToStagingRepository") {
    dependsOn(cleanStagingDir)
}

tasks.publish {
    finalizedBy(stagingDirJar)
}
