# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# https://github.com/crate-ci/cargo-release/blob/91549dbf9db9915ba5f121890ad0816c7d851679/.github/workflows/post-release.yml

name: release
on:
  push:
    tags:
    - "v*"

env:
  LIB_NAME: libiroh_ffi
  PACKAGE_NAME: libiroh
  IROH_FORCE_STAGING_RELAYS: "1"

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
    - name: Get the release version from the tag
      shell: bash
      if: env.RELEASE_VERSION == ''
      run: |
        # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "version is: ${{ env.RELEASE_VERSION }}"
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Create GitHub release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: ${{ env.RELEASE_VERSION }}

  build-and-publish-libs:
    name: Build & publish release libraries
    needs: create-release
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        name: [ubuntu-latest, ubuntu-arm-latest, macOS-latest, macOS-arm-latest, windows-latest]
        rust: [stable]
        include:
          - name: ubuntu-arm-latest
            os: ubuntu-latest
            target: linux-aarch64
            runner: [self-hosted, linux, ARM64]
          - name: ubuntu-latest
            os: ubuntu-latest
            target: linux-x86_64
            runner: [self-hosted, linux, X64]
          - name: macOS-latest
            os: macOS-latest
            target: darwin-x86_64
            runner: [self-hosted, macOS, X64]
          - name: macOS-arm-latest
            os: macOS-latest
            target: darwin-aarch64
            runner: [self-hosted, macOS, ARM64]
        # TODO: windows runner is not available on the org level
          - name: windows-latest
            os: windows-latest
            target: windows-x86_64
            runner: [windows-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    - name: Build release binary
      run: cargo build --verbose --release
    - name: Build archive
      shell: bash
      run: |
        outdir="./target/release"
        staging="${{ env.PACKAGE_NAME }}-${{ matrix.target }}"
        mkdir -p "$staging"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/release/iroh_ffi.lib" "$staging/iroh.lib"
          cd "$staging"
          7z a "../$staging.zip" .
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/release/${{ env.LIB_NAME }}.a" "$staging/${{ env.PACKAGE_NAME }}.a"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  build-and-publish-swift:
    name: Build & publish swift libraries
    timeout-minutes: 30
    runs-on: [macOS, ARM64]
    needs: create-release
    steps:
    - uses: actions/checkout@master
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios,aarch64-apple-darwin
    - name: Make swift
      run: |
        ./make_swift.sh
        zip -r IrohLib.xcframework.zip Iroh.xcframework/*
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: IrohLib.xcframework.zip 
        asset_name: IrohLib.xcframework.zip 
        asset_content_type: application/octet-stream

  build-and-publish-kotlin:
    name: Build & publish kotlin libraries
    timeout-minutes: 30
    runs-on: [self-hosted, linux, X64]
    needs: create-release
    steps:
    - uses: actions/checkout@master
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android
    - name: setup java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '21'

    - name: install kotlin
      uses: arqu/setup-kotlin@main

    - name: install ktlint
      uses: arqu/action-ktlint-setup@main

    - name: fetch jna
      run: curl -L https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.14.0/jna-5.14.0.jar -o jna.jar
    - name: fetch kotlinx-coroutines
      run: curl -L https://repo1.maven.org/maven2/org/jetbrains/kotlinx/kotlinx-coroutines-core-jvm/1.6.4/kotlinx-coroutines-core-jvm-1.6.4.jar -o kotlinx-coroutines.jar

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    - name: Setup Android NDK
      uses: arqu/setup-ndk@main
      id: setup-ndk
      with:
        ndk-version: r23
        add-to-path: true

    - name: Build kotlin
      shell: bash
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo install --version 3.5.4 cargo-ndk
        cargo build --lib
        cargo ndk -o ./kotlin \
        --manifest-path ./Cargo.toml \
        -t armeabi-v7a \
        -t arm64-v8a \
        -t x86 \
        -t x86_64 \
        build --release
        cargo run --bin uniffi-bindgen generate --language kotlin --library ./target/debug/libiroh_ffi.so --out-dir ./kotlin --config uniffi.toml
        cp ./target/debug/libiroh_ffi.so ./kotlin
        kotlinc -Werror -d ./kotlin/iroh.jar ./kotlin/iroh/*.kt -classpath ./jna.jar:./kotlinx-coroutines.jar
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./kotlin/iroh.jar
        asset_name: iroh.jar
        asset_content_type: application/octet-stream
      
