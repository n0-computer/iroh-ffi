// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(Iroh)
    import Iroh
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_iroh_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_iroh_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        throw CancellationError()

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

private struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}

private struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}

public protocol AddProgressProtocol {
    func asAbort() -> AddProgressAbort
    func asAllDone() -> AddProgressAllDone
    func asDone() -> AddProgressDone
    func asFound() -> AddProgressFound
    func asProgress() -> AddProgressProgress
    func type() -> AddProgressType
}

/**
 * Progress updates for the add operation.
 */
public class AddProgress: AddProgressProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_addprogress(pointer, $0) }
    }

    /**
     * Return the `AddProgressAbort`
     */
    public func asAbort() -> AddProgressAbort {
        return try! FfiConverterTypeAddProgressAbort.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_as_abort(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `AddAllDone`
     */
    public func asAllDone() -> AddProgressAllDone {
        return try! FfiConverterTypeAddProgressAllDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_as_all_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `AddProgressDone` event
     */
    public func asDone() -> AddProgressDone {
        return try! FfiConverterTypeAddProgressDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_as_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `AddProgressFound` event
     */
    public func asFound() -> AddProgressFound {
        return try! FfiConverterTypeAddProgressFound.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_as_found(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `AddProgressProgress` event
     */
    public func asProgress() -> AddProgressProgress {
        return try! FfiConverterTypeAddProgressProgress.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_as_progress(self.pointer, $0)
                }
        )
    }

    /**
     * Get the type of event
     */
    public func type() -> AddProgressType {
        return try! FfiConverterTypeAddProgressType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_addprogress_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeAddProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddProgress

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddProgress {
        return AddProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddProgress) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeAddProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddProgress {
    return try FfiConverterTypeAddProgress.lift(pointer)
}

public func FfiConverterTypeAddProgress_lower(_ value: AddProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddProgress.lower(value)
}

public protocol AuthorIdProtocol {
    func equal(other: AuthorId) -> Bool
    func toString() -> String
}

/**
 * Identifier for an [`Author`]
 */
public class AuthorId: AuthorIdProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_authorid(pointer, $0) }
    }

    /**
     * Get an [`AuthorId`] from a String
     */
    public static func fromString(str: String) throws -> AuthorId {
        return try AuthorId(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_authorid_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true when both AuthorId's have the same value
     */
    public func equal(other: AuthorId) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_authorid_equal(self.pointer,
                                                         FfiConverterTypeAuthorId.lower(other), $0)
                }
        )
    }

    /**
     * Return the AuthorId as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_authorid_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeAuthorId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthorId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthorId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthorId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
        return AuthorId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeAuthorId_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
    return try FfiConverterTypeAuthorId.lift(pointer)
}

public func FfiConverterTypeAuthorId_lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthorId.lower(value)
}

public protocol BlobDownloadRequestProtocol {}

/**
 * A request to the node to download and share the data specified by the hash.
 */
public class BlobDownloadRequest: BlobDownloadRequestProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(hash: Hash, format: BlobFormat, node: NodeAddr, tag: SetTagOption, out: DownloadLocation, token: RequestToken?) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_blobdownloadrequest_new(
                FfiConverterTypeHash.lower(hash),
                FfiConverterTypeBlobFormat.lower(format),
                FfiConverterTypeNodeAddr.lower(node),
                FfiConverterTypeSetTagOption.lower(tag),
                FfiConverterTypeDownloadLocation.lower(out),
                FfiConverterOptionTypeRequestToken.lower(token), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_blobdownloadrequest(pointer, $0) }
    }
}

public struct FfiConverterTypeBlobDownloadRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BlobDownloadRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobDownloadRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BlobDownloadRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobDownloadRequest {
        return BlobDownloadRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BlobDownloadRequest) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeBlobDownloadRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobDownloadRequest {
    return try FfiConverterTypeBlobDownloadRequest.lift(pointer)
}

public func FfiConverterTypeBlobDownloadRequest_lower(_ value: BlobDownloadRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBlobDownloadRequest.lower(value)
}

public protocol DirectAddrInfoProtocol {}

/**
 * Information about a direct address.
 */
public class DirectAddrInfo: DirectAddrInfoProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_directaddrinfo(pointer, $0) }
    }
}

public struct FfiConverterTypeDirectAddrInfo: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DirectAddrInfo

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DirectAddrInfo {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DirectAddrInfo, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
        return DirectAddrInfo(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDirectAddrInfo_lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
    return try FfiConverterTypeDirectAddrInfo.lift(pointer)
}

public func FfiConverterTypeDirectAddrInfo_lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDirectAddrInfo.lower(value)
}

public protocol DocProtocol {
    func close() throws
    func del(authorId: AuthorId, prefix: Data) throws -> UInt64
    func exportFile(entry: Entry, path: String, cb: DocExportFileCallback?) throws
    func getMany(query: Query) throws -> [Entry]
    func getOne(query: Query) throws -> Entry?
    func id() -> NamespaceId
    func importFile(author: AuthorId, key: Data, path: String, inPlace: Bool, cb: DocImportFileCallback?) throws
    func leave() throws
    func readToBytes(entry: Entry) throws -> Data
    func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash
    func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws
    func share(mode: ShareMode) throws -> DocTicket
    func size(entry: Entry) throws -> UInt64
    func startSync(peers: [NodeAddr]) throws
    func status() throws -> OpenState
    func subscribe(cb: SubscribeCallback) throws
}

/**
 * A representation of a mutable, synchronizable key-value store.
 */
public class Doc: DocProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_doc(pointer, $0) }
    }

    /**
     * Close the document.
     */
    public func close() throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_close(self.pointer, $0)
            }
    }

    /**
     * Delete entries that match the given `author` and key `prefix`.
     *
     * This inserts an empty entry with the key set to `prefix`, effectively clearing all other
     * entries whose key starts with or is equal to the given `prefix`.
     *
     * Returns the number of entries deleted.
     */
    public func del(authorId: AuthorId, prefix: Data) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_del(self.pointer,
                                              FfiConverterTypeAuthorId.lower(authorId),
                                              FfiConverterData.lower(prefix), $0)
            }
        )
    }

    /**
     * Export an entry as a file to a given absolute path
     */
    public func exportFile(entry: Entry, path: String, cb: DocExportFileCallback?) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_export_file(self.pointer,
                                                      FfiConverterTypeEntry.lower(entry),
                                                      FfiConverterString.lower(path),
                                                      FfiConverterOptionCallbackInterfaceDocExportFileCallback.lower(cb), $0)
            }
    }

    /**
     * Get entries.
     *
     * Note: this allocates for each `Entry`, if you have many `Entry`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    public func getMany(query: Query) throws -> [Entry] {
        return try FfiConverterSequenceTypeEntry.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_get_many(self.pointer,
                                                   FfiConverterTypeQuery.lower(query), $0)
            }
        )
    }

    /**
     * Get the latest entry for a key and author.
     */
    public func getOne(query: Query) throws -> Entry? {
        return try FfiConverterOptionTypeEntry.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_get_one(self.pointer,
                                                  FfiConverterTypeQuery.lower(query), $0)
            }
        )
    }

    /**
     * Get the document id of this doc.
     */
    public func id() -> NamespaceId {
        return try! FfiConverterTypeNamespaceId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_doc_id(self.pointer, $0)
                }
        )
    }

    /**
     * Add an entry from an absolute file path
     */
    public func importFile(author: AuthorId, key: Data, path: String, inPlace: Bool, cb: DocImportFileCallback?) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_import_file(self.pointer,
                                                      FfiConverterTypeAuthorId.lower(author),
                                                      FfiConverterData.lower(key),
                                                      FfiConverterString.lower(path),
                                                      FfiConverterBool.lower(inPlace),
                                                      FfiConverterOptionCallbackInterfaceDocImportFileCallback.lower(cb), $0)
            }
    }

    /**
     * Stop the live sync for this document.
     */
    public func leave() throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_leave(self.pointer, $0)
            }
    }

    /**
     * Read all content of an [`Entry`] into a buffer.
     * This allocates a buffer for the full entry. Use only if you know that the entry you're
     * reading is small. If not sure, use [`Self::size`] and check the size with
     * before calling [`Self::read_to_bytes`].
     */
    public func readToBytes(entry: Entry) throws -> Data {
        return try FfiConverterData.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_read_to_bytes(self.pointer,
                                                        FfiConverterTypeEntry.lower(entry), $0)
            }
        )
    }

    /**
     * Set the content of a key to a byte array.
     */
    public func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash {
        return try FfiConverterTypeHash.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_set_bytes(self.pointer,
                                                    FfiConverterTypeAuthorId.lower(author),
                                                    FfiConverterData.lower(key),
                                                    FfiConverterData.lower(value), $0)
            }
        )
    }

    /**
     * Set an entries on the doc via its key, hash, and size.
     */
    public func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_set_hash(self.pointer,
                                                   FfiConverterTypeAuthorId.lower(author),
                                                   FfiConverterData.lower(key),
                                                   FfiConverterTypeHash.lower(hash),
                                                   FfiConverterUInt64.lower(size), $0)
            }
    }

    /**
     * Share this document with peers over a ticket.
     */
    public func share(mode: ShareMode) throws -> DocTicket {
        return try FfiConverterTypeDocTicket.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_share(self.pointer,
                                                FfiConverterTypeShareMode.lower(mode), $0)
            }
        )
    }

    /**
     * Get the content size of an [`Entry`]
     */
    public func size(entry: Entry) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_size(self.pointer,
                                               FfiConverterTypeEntry.lower(entry), $0)
            }
        )
    }

    /**
     * Start to sync this document with a list of peers.
     */
    public func startSync(peers: [NodeAddr]) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_start_sync(self.pointer,
                                                     FfiConverterSequenceTypeNodeAddr.lower(peers), $0)
            }
    }

    /**
     * Get status info for this document
     */
    public func status() throws -> OpenState {
        return try FfiConverterTypeOpenState.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_status(self.pointer, $0)
            }
        )
    }

    /**
     * Subscribe to events for this document.
     */
    public func subscribe(cb: SubscribeCallback) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_subscribe(self.pointer,
                                                    FfiConverterCallbackInterfaceSubscribeCallback.lower(cb), $0)
            }
    }
}

public struct FfiConverterTypeDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Doc

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Doc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Doc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
        return Doc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Doc) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
    return try FfiConverterTypeDoc.lift(pointer)
}

public func FfiConverterTypeDoc_lower(_ value: Doc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDoc.lower(value)
}

public protocol DocExportProgressProtocol {
    func asAbort() -> DocExportProgressAbort
    func asFound() -> DocExportProgressFound
    func asProgress() -> DocExportProgressProgress
    func type() -> DocExportProgressType
}

/**
 * Progress updates for the doc import file operation.
 */
public class DocExportProgress: DocExportProgressProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_docexportprogress(pointer, $0) }
    }

    /**
     * Return the `DocExportProgressAbort`
     */
    public func asAbort() -> DocExportProgressAbort {
        return try! FfiConverterTypeDocExportProgressAbort.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docexportprogress_as_abort(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocExportProgressFound` event
     */
    public func asFound() -> DocExportProgressFound {
        return try! FfiConverterTypeDocExportProgressFound.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docexportprogress_as_found(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocExportProgressProgress` event
     */
    public func asProgress() -> DocExportProgressProgress {
        return try! FfiConverterTypeDocExportProgressProgress.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docexportprogress_as_progress(self.pointer, $0)
                }
        )
    }

    /**
     * Get the type of event
     */
    public func type() -> DocExportProgressType {
        return try! FfiConverterTypeDocExportProgressType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docexportprogress_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDocExportProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocExportProgress

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocExportProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportProgress {
        return DocExportProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocExportProgress) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDocExportProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportProgress {
    return try FfiConverterTypeDocExportProgress.lift(pointer)
}

public func FfiConverterTypeDocExportProgress_lower(_ value: DocExportProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocExportProgress.lower(value)
}

public protocol DocImportProgressProtocol {
    func asAbort() -> DocImportProgressAbort
    func asAllDone() -> DocImportProgressAllDone
    func asFound() -> DocImportProgressFound
    func asIngestDone() -> DocImportProgressIngestDone
    func asProgress() -> DocImportProgressProgress
    func type() -> DocImportProgressType
}

/**
 * Progress updates for the doc import file operation.
 */
public class DocImportProgress: DocImportProgressProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_docimportprogress(pointer, $0) }
    }

    /**
     * Return the `DocImportProgressAbort`
     */
    public func asAbort() -> DocImportProgressAbort {
        return try! FfiConverterTypeDocImportProgressAbort.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_as_abort(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocImportProgressAllDone`
     */
    public func asAllDone() -> DocImportProgressAllDone {
        return try! FfiConverterTypeDocImportProgressAllDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_as_all_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocImportProgressFound` event
     */
    public func asFound() -> DocImportProgressFound {
        return try! FfiConverterTypeDocImportProgressFound.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_as_found(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocImportProgressDone` event
     */
    public func asIngestDone() -> DocImportProgressIngestDone {
        return try! FfiConverterTypeDocImportProgressIngestDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_as_ingest_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DocImportProgressProgress` event
     */
    public func asProgress() -> DocImportProgressProgress {
        return try! FfiConverterTypeDocImportProgressProgress.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_as_progress(self.pointer, $0)
                }
        )
    }

    /**
     * Get the type of event
     */
    public func type() -> DocImportProgressType {
        return try! FfiConverterTypeDocImportProgressType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docimportprogress_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDocImportProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocImportProgress

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocImportProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportProgress {
        return DocImportProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocImportProgress) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDocImportProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportProgress {
    return try FfiConverterTypeDocImportProgress.lift(pointer)
}

public func FfiConverterTypeDocImportProgress_lower(_ value: DocImportProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocImportProgress.lower(value)
}

public protocol DocTicketProtocol {
    func equal(other: DocTicket) -> Bool
    func toString() -> String
}

/**
 * Contains both a key (either secret or public) to a document, and a list of peers to join.
 */
public class DocTicket: DocTicketProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_docticket(pointer, $0) }
    }

    /**
     * Create a `DocTicket` from a string
     */
    public static func fromString(content: String) throws -> DocTicket {
        return try DocTicket(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_docticket_from_string(
                FfiConverterString.lower(content), $0
            )
        })
    }

    /**
     * Returns true if both `DocTicket`'s have the same value
     */
    public func equal(other: DocTicket) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docticket_equal(self.pointer,
                                                          FfiConverterTypeDocTicket.lower(other), $0)
                }
        )
    }

    /**
     * Return a string representation of a `DocTicket`
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docticket_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDocTicket: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocTicket

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocTicket {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocTicket, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocTicket {
        return DocTicket(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocTicket) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDocTicket_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocTicket {
    return try FfiConverterTypeDocTicket.lift(pointer)
}

public func FfiConverterTypeDocTicket_lower(_ value: DocTicket) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocTicket.lower(value)
}

public protocol DownloadLocationProtocol {}

/**
 * Location to store a downloaded blob at.
 */
public class DownloadLocation: DownloadLocationProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_downloadlocation(pointer, $0) }
    }

    /**
     * Store at the provided path.
     *
     * If `in_place` is true, the data is shared in place, i.e. it is moved to the
     * out path instead of being copied. The database itself contains only a
     * reference to the out path of the file.
     *
     * If the data is modified in the location specified by the out path,
     * download attempts for the associated hash will fail.
     */
    public static func external(path: String, inPlace: Bool) -> DownloadLocation {
        return DownloadLocation(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_downloadlocation_external(
                FfiConverterString.lower(path),
                FfiConverterBool.lower(inPlace), $0
            )
        })
    }

    /**
     * Store in the node's blob storage directory.
     */
    public static func `internal`() -> DownloadLocation {
        return DownloadLocation(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_downloadlocation_internal($0)
        })
    }
}

public struct FfiConverterTypeDownloadLocation: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DownloadLocation

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadLocation {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DownloadLocation, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadLocation {
        return DownloadLocation(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DownloadLocation) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDownloadLocation_lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadLocation {
    return try FfiConverterTypeDownloadLocation.lift(pointer)
}

public func FfiConverterTypeDownloadLocation_lower(_ value: DownloadLocation) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDownloadLocation.lower(value)
}

public protocol DownloadProgressProtocol {
    func asAbort() -> DownloadProgressAbort
    func asDone() -> DownloadProgressDone
    func asExport() -> DownloadProgressExport
    func asExportProgress() -> DownloadProgressExportProgress
    func asFound() -> DownloadProgressFound
    func asFoundHashSeq() -> DownloadProgressFoundHashSeq
    func asNetworkDone() -> DownloadProgressNetworkDone
    func asProgress() -> DownloadProgressProgress
    func type() -> DownloadProgressType
}

/**
 * Progress updates for the get operation.
 */
public class DownloadProgress: DownloadProgressProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_downloadprogress(pointer, $0) }
    }

    /**
     * Return the `DownloadProgressAbort`
     */
    public func asAbort() -> DownloadProgressAbort {
        return try! FfiConverterTypeDownloadProgressAbort.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_abort(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressDone` event
     */
    public func asDone() -> DownloadProgressDone {
        return try! FfiConverterTypeDownloadProgressDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressExport` event
     */
    public func asExport() -> DownloadProgressExport {
        return try! FfiConverterTypeDownloadProgressExport.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_export(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressExportProgress` event
     */
    public func asExportProgress() -> DownloadProgressExportProgress {
        return try! FfiConverterTypeDownloadProgressExportProgress.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_export_progress(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressFound` event
     */
    public func asFound() -> DownloadProgressFound {
        return try! FfiConverterTypeDownloadProgressFound.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_found(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressFoundHashSeq` event
     */
    public func asFoundHashSeq() -> DownloadProgressFoundHashSeq {
        return try! FfiConverterTypeDownloadProgressFoundHashSeq.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_found_hash_seq(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressNetworkDone` event
     */
    public func asNetworkDone() -> DownloadProgressNetworkDone {
        return try! FfiConverterTypeDownloadProgressNetworkDone.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_network_done(self.pointer, $0)
                }
        )
    }

    /**
     * Return the `DownloadProgressProgress` event
     */
    public func asProgress() -> DownloadProgressProgress {
        return try! FfiConverterTypeDownloadProgressProgress.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_as_progress(self.pointer, $0)
                }
        )
    }

    /**
     * Get the type of event
     */
    public func type() -> DownloadProgressType {
        return try! FfiConverterTypeDownloadProgressType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_downloadprogress_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDownloadProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DownloadProgress

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DownloadProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadProgress {
        return DownloadProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DownloadProgress) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDownloadProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadProgress {
    return try FfiConverterTypeDownloadProgress.lift(pointer)
}

public func FfiConverterTypeDownloadProgress_lower(_ value: DownloadProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDownloadProgress.lower(value)
}

public protocol EntryProtocol {
    func author() -> AuthorId
    func contentHash() -> Hash
    func contentLen() -> UInt64
    func key() -> Data
    func namespace() -> NamespaceId
}

/**
 * A single entry in a [`Doc`]
 *
 * An entry is identified by a key, its [`AuthorId`], and the [`Doc`]'s
 * [`NamespaceId`]. Its value is the 32-byte BLAKE3 [`hash`]
 * of the entry's content data, the size of this content data, and a timestamp.
 */
public class Entry: EntryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_entry(pointer, $0) }
    }

    /**
     * Get the [`AuthorId`] of this entry.
     */
    public func author() -> AuthorId {
        return try! FfiConverterTypeAuthorId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_author(self.pointer, $0)
                }
        )
    }

    /**
     * Get the content_hash of this entry.
     */
    public func contentHash() -> Hash {
        return try! FfiConverterTypeHash.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_content_hash(self.pointer, $0)
                }
        )
    }

    /**
     * Get the content_length of this entry.
     */
    public func contentLen() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_content_len(self.pointer, $0)
                }
        )
    }

    /**
     * Get the key of this entry.
     */
    public func key() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_key(self.pointer, $0)
                }
        )
    }

    /**
     * Get the [`NamespaceId`] of this entry.
     */
    public func namespace() -> NamespaceId {
        return try! FfiConverterTypeNamespaceId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_namespace(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeEntry: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Entry

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Entry {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Entry, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
        return Entry(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Entry) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeEntry_lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
    return try FfiConverterTypeEntry.lift(pointer)
}

public func FfiConverterTypeEntry_lower(_ value: Entry) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEntry.lower(value)
}

public protocol HashProtocol {
    func asCidBytes() -> Data
    func equal(other: Hash) -> Bool
    func toBytes() -> Data
    func toHex() -> String
    func toString() -> String
}

/**
 * Hash type used throughout Iroh. A blake3 hash.
 */
public class Hash: HashProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Calculate the hash of the provide bytes.
     */
    public convenience init(buf: Data) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_hash_new(
                FfiConverterData.lower(buf), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_hash(pointer, $0) }
    }

    /**
     * Create a Hash from its raw bytes representation.
     */
    public static func fromBytes(bytes: Data) throws -> Hash {
        return try Hash(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_hash_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Try to create a blake3 cid from cid bytes.
     *
     * This will only work if the prefix is the following:
     * - version 1
     * - raw codec
     * - blake3 hash function
     * - 32 byte hash size
     */
    public static func fromCidBytes(bytes: Data) throws -> Hash {
        return try Hash(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_hash_from_cid_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Make a Hash from hex or base 64 encoded cid string
     */
    public static func fromString(str: String) throws -> Hash {
        return try Hash(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_hash_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Get the cid as bytes.
     */
    public func asCidBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_as_cid_bytes(self.pointer, $0)
                }
        )
    }

    /**
     * Returns true if the Hash's have the same value
     */
    public func equal(other: Hash) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_equal(self.pointer,
                                                     FfiConverterTypeHash.lower(other), $0)
                }
        )
    }

    /**
     * Bytes of the hash.
     */
    public func toBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_to_bytes(self.pointer, $0)
                }
        )
    }

    /**
     * Convert the hash to a hex string.
     */
    public func toHex() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_to_hex(self.pointer, $0)
                }
        )
    }

    /**
     * Write the hash to a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeHash: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Hash

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hash {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Hash, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
        return Hash(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Hash) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeHash_lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
    return try FfiConverterTypeHash.lift(pointer)
}

public func FfiConverterTypeHash_lower(_ value: Hash) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHash.lower(value)
}

public protocol Ipv4AddrProtocol {
    func equal(other: Ipv4Addr) -> Bool
    func octets() -> [UInt8]
    func toString() -> String
}

/**
 * Ipv4 address
 */
public class Ipv4Addr: Ipv4AddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new Ipv4 addr from 4 eight-bit octets
     */
    public convenience init(a: UInt8, b: UInt8, c: UInt8, d: UInt8) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_ipv4addr_new(
                FfiConverterUInt8.lower(a),
                FfiConverterUInt8.lower(b),
                FfiConverterUInt8.lower(c),
                FfiConverterUInt8.lower(d), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_ipv4addr(pointer, $0) }
    }

    /**
     * Create a new Ipv4 addr from a String
     */
    public static func fromString(str: String) throws -> Ipv4Addr {
        return try Ipv4Addr(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_ipv4addr_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true if both Ipv4Addrs have the same value
     */
    public func equal(other: Ipv4Addr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_equal(self.pointer,
                                                         FfiConverterTypeIpv4Addr.lower(other), $0)
                }
        )
    }

    /**
     * Get the 4 octets as bytes
     */
    public func octets() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_octets(self.pointer, $0)
                }
        )
    }

    /**
     * Returns an Ipv4 address as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeIpv4Addr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ipv4Addr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Addr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ipv4Addr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv4Addr {
        return Ipv4Addr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ipv4Addr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIpv4Addr_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv4Addr {
    return try FfiConverterTypeIpv4Addr.lift(pointer)
}

public func FfiConverterTypeIpv4Addr_lower(_ value: Ipv4Addr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIpv4Addr.lower(value)
}

public protocol Ipv6AddrProtocol {
    func equal(other: Ipv6Addr) -> Bool
    func segments() -> [UInt16]
    func toString() -> String
}

/**
 * Ipv6 address
 */
public class Ipv6Addr: Ipv6AddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new Ipv6 Addr from eight sixteen-bit segments
     */
    public convenience init(a: UInt16, b: UInt16, c: UInt16, d: UInt16, e: UInt16, f: UInt16, g: UInt16, h: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_ipv6addr_new(
                FfiConverterUInt16.lower(a),
                FfiConverterUInt16.lower(b),
                FfiConverterUInt16.lower(c),
                FfiConverterUInt16.lower(d),
                FfiConverterUInt16.lower(e),
                FfiConverterUInt16.lower(f),
                FfiConverterUInt16.lower(g),
                FfiConverterUInt16.lower(h), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_ipv6addr(pointer, $0) }
    }

    /**
     * Create a new Ipv6 addr from a String
     */
    public static func fromString(str: String) throws -> Ipv6Addr {
        return try Ipv6Addr(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_ipv6addr_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true if both Ipv6Addr's have the same value
     */
    public func equal(other: Ipv6Addr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_equal(self.pointer,
                                                         FfiConverterTypeIpv6Addr.lower(other), $0)
                }
        )
    }

    /**
     * Get the 8 sixteen-bit segments as an array
     */
    public func segments() -> [UInt16] {
        return try! FfiConverterSequenceUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_segments(self.pointer, $0)
                }
        )
    }

    /**
     * Returns a Ipv6 Address as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeIpv6Addr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ipv6Addr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Addr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ipv6Addr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv6Addr {
        return Ipv6Addr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ipv6Addr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIpv6Addr_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv6Addr {
    return try FfiConverterTypeIpv6Addr.lift(pointer)
}

public func FfiConverterTypeIpv6Addr_lower(_ value: Ipv6Addr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIpv6Addr.lower(value)
}

public protocol IrohNodeProtocol {
    func authorCreate() throws -> AuthorId
    func authorList() throws -> [AuthorId]
    func blobsAddBytes(bytes: Data, tag: SetTagOption) throws -> BlobAddOutcome
    func blobsAddFromPath(path: String, inPlace: Bool, tag: SetTagOption, wrap: WrapOption, cb: AddCallback) throws
    func blobsDeleteBlob(hash: Hash) throws
    func blobsDownload(req: BlobDownloadRequest, cb: DownloadCallback) throws
    func blobsList() throws -> [Hash]
    func blobsListCollections() throws -> [BlobListCollectionsResponse]
    func blobsListIncomplete() throws -> [BlobListIncompleteResponse]
    func blobsReadToBytes(hash: Hash) throws -> Data
    func blobsSize(hash: Hash) throws -> UInt64
    func blobsWriteToPath(hash: Hash, path: String) throws
    func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo?
    func connections() throws -> [ConnectionInfo]
    func docCreate() throws -> Doc
    func docJoin(ticket: DocTicket) throws -> Doc
    func docList() throws -> [NamespaceAndCapability]
    func nodeId() -> String
    func stats() throws -> [String: CounterStats]
}

/**
 * An Iroh node. Allows you to sync, store, and transfer data.
 */
public class IrohNode: IrohNodeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new iroh node. The `path` param should be a directory where we can store or load
     * iroh data from a previous session.
     */
    public convenience init(path: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_irohnode_new(
                FfiConverterString.lower(path), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_irohnode(pointer, $0) }
    }

    /**
     * Create a new author.
     */
    public func authorCreate() throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_author_create(self.pointer, $0)
            }
        )
    }

    /**
     * List all the AuthorIds that exist on this node.
     */
    public func authorList() throws -> [AuthorId] {
        return try FfiConverterSequenceTypeAuthorId.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_author_list(self.pointer, $0)
            }
        )
    }

    /**
     * Write a blob by passing bytes.
     */
    public func blobsAddBytes(bytes: Data, tag: SetTagOption) throws -> BlobAddOutcome {
        return try FfiConverterTypeBlobAddOutcome.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_add_bytes(self.pointer,
                                                               FfiConverterData.lower(bytes),
                                                               FfiConverterTypeSetTagOption.lower(tag), $0)
            }
        )
    }

    /**
     * Import a blob from a filesystem path.
     *
     * `path` should be an absolute path valid for the file system on which
     * the node runs.
     * If `in_place` is true, Iroh will assume that the data will not change and will share it in
     * place without copying to the Iroh data directory.
     */
    public func blobsAddFromPath(path: String, inPlace: Bool, tag: SetTagOption, wrap: WrapOption, cb: AddCallback) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_add_from_path(self.pointer,
                                                                   FfiConverterString.lower(path),
                                                                   FfiConverterBool.lower(inPlace),
                                                                   FfiConverterTypeSetTagOption.lower(tag),
                                                                   FfiConverterTypeWrapOption.lower(wrap),
                                                                   FfiConverterCallbackInterfaceAddCallback.lower(cb), $0)
            }
    }

    /**
     * Delete a blob.
     */
    public func blobsDeleteBlob(hash: Hash) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_delete_blob(self.pointer,
                                                                 FfiConverterTypeHash.lower(hash), $0)
            }
    }

    /**
     * Download a blob from another node and add it to the local database.
     */
    public func blobsDownload(req: BlobDownloadRequest, cb: DownloadCallback) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_download(self.pointer,
                                                              FfiConverterTypeBlobDownloadRequest.lower(req),
                                                              FfiConverterCallbackInterfaceDownloadCallback.lower(cb), $0)
            }
    }

    /**
     * List all complete blobs.
     *
     * Note: this allocates for each `BlobListResponse`, if you have many `BlobListReponse`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    public func blobsList() throws -> [Hash] {
        return try FfiConverterSequenceTypeHash.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_list(self.pointer, $0)
            }
        )
    }

    /**
     * List all collections.
     *
     * Note: this allocates for each `BlobListCollectionsResponse`, if you have many `BlobListCollectionsResponse`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    public func blobsListCollections() throws -> [BlobListCollectionsResponse] {
        return try FfiConverterSequenceTypeBlobListCollectionsResponse.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_list_collections(self.pointer, $0)
            }
        )
    }

    /**
     * List all incomplete (partial) blobs.
     *
     * Note: this allocates for each `BlobListIncompleteResponse`, if you have many `BlobListIncompleteResponse`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    public func blobsListIncomplete() throws -> [BlobListIncompleteResponse] {
        return try FfiConverterSequenceTypeBlobListIncompleteResponse.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_list_incomplete(self.pointer, $0)
            }
        )
    }

    /**
     * Read all bytes of single blob.
     *
     * This allocates a buffer for the full blob. Use only if you know that the blob you're
     * reading is small. If not sure, use [`Self::blobs_size`] and check the size with
     * before calling [`Self::blobs_read_to_bytes`].
     */
    public func blobsReadToBytes(hash: Hash) throws -> Data {
        return try FfiConverterData.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_read_to_bytes(self.pointer,
                                                                   FfiConverterTypeHash.lower(hash), $0)
            }
        )
    }

    /**
     * Get the size information on a single blob.
     */
    public func blobsSize(hash: Hash) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_size(self.pointer,
                                                          FfiConverterTypeHash.lower(hash), $0)
            }
        )
    }

    /**
     * Export the blob contents to a file path
     * The `path` field is expected to be the absolute path.
     */
    public func blobsWriteToPath(hash: Hash, path: String) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blobs_write_to_path(self.pointer,
                                                                   FfiConverterTypeHash.lower(hash),
                                                                   FfiConverterString.lower(path), $0)
            }
    }

    public func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo? {
        return try FfiConverterOptionTypeConnectionInfo.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_connection_info(self.pointer,
                                                               FfiConverterTypePublicKey.lower(nodeId), $0)
            }
        )
    }

    /**
     * Return `ConnectionInfo`s for each connection we have to another iroh node.
     */
    public func connections() throws -> [ConnectionInfo] {
        return try FfiConverterSequenceTypeConnectionInfo.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_connections(self.pointer, $0)
            }
        )
    }

    /**
     * Create a new doc.
     */
    public func docCreate() throws -> Doc {
        return try FfiConverterTypeDoc.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_create(self.pointer, $0)
            }
        )
    }

    /**
     * Join and sync with an already existing document.
     */
    public func docJoin(ticket: DocTicket) throws -> Doc {
        return try FfiConverterTypeDoc.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_join(self.pointer,
                                                        FfiConverterTypeDocTicket.lower(ticket), $0)
            }
        )
    }

    /**
     * List all the docs we have access to on this node.
     */
    public func docList() throws -> [NamespaceAndCapability] {
        return try FfiConverterSequenceTypeNamespaceAndCapability.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_list(self.pointer, $0)
            }
        )
    }

    /**
     * The string representation of the PublicKey of this node.
     */
    public func nodeId() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_irohnode_node_id(self.pointer, $0)
                }
        )
    }

    /**
     * Get statistics of the running node.
     */
    public func stats() throws -> [String: CounterStats] {
        return try FfiConverterDictionaryStringTypeCounterStats.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_stats(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeIrohNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IrohNode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohNode {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IrohNode, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
        return IrohNode(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIrohNode_lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
    return try FfiConverterTypeIrohNode.lift(pointer)
}

public func FfiConverterTypeIrohNode_lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIrohNode.lower(value)
}

public protocol LiveEventProtocol {
    func asContentReady() -> Hash
    func asInsertLocal() -> Entry
    func asInsertRemote() -> InsertRemoteEvent
    func asNeighborDown() -> PublicKey
    func asNeighborUp() -> PublicKey
    func asSyncFinished() -> SyncEvent
    func type() -> LiveEventType
}

/**
 * Events informing about actions of the live sync progress
 */
public class LiveEvent: LiveEventProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_liveevent(pointer, $0) }
    }

    /**
     * For `LiveEventType::ContentReady`, returns a Hash
     */
    public func asContentReady() -> Hash {
        return try! FfiConverterTypeHash.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_content_ready(self.pointer, $0)
                }
        )
    }

    /**
     * For `LiveEventType::InsertLocal`, returns an Entry
     */
    public func asInsertLocal() -> Entry {
        return try! FfiConverterTypeEntry.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_insert_local(self.pointer, $0)
                }
        )
    }

    /**
     * For `LiveEventType::InsertRemote`, returns an InsertRemoteEvent
     */
    public func asInsertRemote() -> InsertRemoteEvent {
        return try! FfiConverterTypeInsertRemoteEvent.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_insert_remote(self.pointer, $0)
                }
        )
    }

    /**
     * For `LiveEventType::NeighborDown`, returns a PublicKey
     */
    public func asNeighborDown() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_neighbor_down(self.pointer, $0)
                }
        )
    }

    /**
     * For `LiveEventType::NeighborUp`, returns a PublicKey
     */
    public func asNeighborUp() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_neighbor_up(self.pointer, $0)
                }
        )
    }

    /**
     * For `LiveEventType::SyncFinished`, returns a SyncEvent
     */
    public func asSyncFinished() -> SyncEvent {
        return try! FfiConverterTypeSyncEvent.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_sync_finished(self.pointer, $0)
                }
        )
    }

    /**
     * The type LiveEvent
     */
    public func type() -> LiveEventType {
        return try! FfiConverterTypeLiveEventType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeLiveEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEvent {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveEvent, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
        return LiveEvent(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeLiveEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
    return try FfiConverterTypeLiveEvent.lift(pointer)
}

public func FfiConverterTypeLiveEvent_lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveEvent.lower(value)
}

public protocol NamespaceIdProtocol {
    func equal(other: NamespaceId) -> Bool
    func toString() -> String
}

/**
 * An identifier for a Doc
 */
public class NamespaceId: NamespaceIdProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_namespaceid(pointer, $0) }
    }

    /**
     * Get an [`NamespaceId`] from a String
     */
    public static func fromString(str: String) throws -> NamespaceId {
        return try NamespaceId(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_namespaceid_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true when both NamespaceId's have the same value
     */
    public func equal(other: NamespaceId) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_namespaceid_equal(self.pointer,
                                                            FfiConverterTypeNamespaceId.lower(other), $0)
                }
        )
    }

    /**
     * Return a NamespaceId as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_namespaceid_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeNamespaceId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NamespaceId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NamespaceId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NamespaceId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NamespaceId {
        return NamespaceId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NamespaceId) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeNamespaceId_lift(_ pointer: UnsafeMutableRawPointer) throws -> NamespaceId {
    return try FfiConverterTypeNamespaceId.lift(pointer)
}

public func FfiConverterTypeNamespaceId_lower(_ value: NamespaceId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNamespaceId.lower(value)
}

public protocol NodeAddrProtocol {
    func derpRegion() -> UInt16?
    func directAddresses() -> [SocketAddr]
    func equal(other: NodeAddr) -> Bool
}

/**
 * A peer and it's addressing information.
 */
public class NodeAddr: NodeAddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new [`NodeAddr`] with empty [`AddrInfo`].
     */
    public convenience init(nodeId: PublicKey, regionId: UInt16?, addresses: [SocketAddr]) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_nodeaddr_new(
                FfiConverterTypePublicKey.lower(nodeId),
                FfiConverterOptionUInt16.lower(regionId),
                FfiConverterSequenceTypeSocketAddr.lower(addresses), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_nodeaddr(pointer, $0) }
    }

    /**
     * Get the derp region of this peer.
     */
    public func derpRegion() -> UInt16? {
        return try! FfiConverterOptionUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_derp_region(self.pointer, $0)
                }
        )
    }

    /**
     * Get the direct addresses of this peer.
     */
    public func directAddresses() -> [SocketAddr] {
        return try! FfiConverterSequenceTypeSocketAddr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_direct_addresses(self.pointer, $0)
                }
        )
    }

    /**
     * Returns true if both NodeAddr's have the same values
     */
    public func equal(other: NodeAddr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_equal(self.pointer,
                                                         FfiConverterTypeNodeAddr.lower(other), $0)
                }
        )
    }
}

public struct FfiConverterTypeNodeAddr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeAddr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeAddr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeAddr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
        return NodeAddr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeNodeAddr_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
    return try FfiConverterTypeNodeAddr.lift(pointer)
}

public func FfiConverterTypeNodeAddr_lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeAddr.lower(value)
}

public protocol PublicKeyProtocol {
    func equal(other: PublicKey) -> Bool
    func fmtShort() -> String
    func toBytes() -> Data
    func toString() -> String
}

/**
 * A public key
 */
public class PublicKey: PublicKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_publickey(pointer, $0) }
    }

    /**
     * Get a PublicKey from a byte slice
     */
    public static func fromBytes(bytes: Data) throws -> PublicKey {
        return try PublicKey(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_publickey_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Get a PublicKey from a string
     */
    public static func fromString(s: String) throws -> PublicKey {
        return try PublicKey(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_publickey_from_string(
                FfiConverterString.lower(s), $0
            )
        })
    }

    /**
     * Returns true when both PublicKeys have the same value
     */
    public func equal(other: PublicKey) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_equal(self.pointer,
                                                          FfiConverterTypePublicKey.lower(other), $0)
                }
        )
    }

    /**
     * The first 10 bytes of the PublicKey represented as a string
     */
    public func fmtShort() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_fmt_short(self.pointer, $0)
                }
        )
    }

    /**
     * Represent a PublicKey as a byte slice
     */
    public func toBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_to_bytes(self.pointer, $0)
                }
        )
    }

    /**
     * Represent a PublicKey as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypePublicKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PublicKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypePublicKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(pointer)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePublicKey.lower(value)
}

public protocol QueryProtocol {
    func limit() -> UInt64?
    func offset() -> UInt64
}

/**
 * Build a Query to search for an entry or entries in a doc.
 *
 * Use this with `QueryOptions` to determine sorting, grouping, and pagination.
 */
public class Query: QueryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_query(pointer, $0) }
    }

    /**
     * Query all records.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func all(opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_all(
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query all entries for by a single author.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func author(author: AuthorId, opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_author(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Create a Query for a single key and author.
     */
    public static func authorKeyExact(author: AuthorId, key: Data) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_author_key_exact(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterData.lower(key), $0
            )
        })
    }

    /**
     * Create a query for all entries of a single author with a given key prefix.
     *
     * If `opts` is `None`, the default values will be used:
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func authorKeyPrefix(author: AuthorId, prefix: Data, opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_author_key_prefix(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterData.lower(prefix),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query all entries that have an exact key.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func keyExact(key: Data, opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_key_exact(
                FfiConverterData.lower(key),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Create a query for all entries with a given key prefix.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func keyPrefix(prefix: Data, opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_key_prefix(
                FfiConverterData.lower(prefix),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query only the latest entry for each key, omitting older entries if the entry was written
     * to by multiple authors.
     *
     * If `opts` is `None`, the default values will be used:
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func singleLatestPerKey(opts: QueryOptions?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_single_latest_per_key(
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Get the limit for this query (max. number of entries to emit).
     */
    public func limit() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_query_limit(self.pointer, $0)
                }
        )
    }

    /**
     * Get the offset for this query (number of entries to skip at the beginning).
     */
    public func offset() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_query_offset(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeQuery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Query

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Query {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Query, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
        return Query(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Query) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeQuery_lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
    return try FfiConverterTypeQuery.lift(pointer)
}

public func FfiConverterTypeQuery_lower(_ value: Query) -> UnsafeMutableRawPointer {
    return FfiConverterTypeQuery.lower(value)
}

public protocol RequestTokenProtocol {
    func asBytes() -> Data
    func equal(other: RequestToken) -> Bool
}

/**
 * A Request token is an opaque byte sequence associated with a single request.
 * Applications can use request tokens to implement request authorization,
 * user association, etc.
 */
public class RequestToken: RequestTokenProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Creates a new request token from bytes.
     */
    public convenience init(bytes: Data) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_requesttoken_new(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_requesttoken(pointer, $0) }
    }

    /**
     * Create a request token from a string
     */
    public static func fromString(str: String) throws -> RequestToken {
        return try RequestToken(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_requesttoken_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Generate a random 32 byte request token.
     */
    public static func generate() -> RequestToken {
        return RequestToken(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_requesttoken_generate($0)
        })
    }

    /**
     * Returns a reference the token bytes.
     */
    public func asBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_requesttoken_as_bytes(self.pointer, $0)
                }
        )
    }

    /**
     * Returns true if both RequestTokens have the same value
     */
    public func equal(other: RequestToken) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_requesttoken_equal(self.pointer,
                                                             FfiConverterTypeRequestToken.lower(other), $0)
                }
        )
    }
}

public struct FfiConverterTypeRequestToken: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RequestToken

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestToken {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RequestToken, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RequestToken {
        return RequestToken(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RequestToken) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeRequestToken_lift(_ pointer: UnsafeMutableRawPointer) throws -> RequestToken {
    return try FfiConverterTypeRequestToken.lift(pointer)
}

public func FfiConverterTypeRequestToken_lower(_ value: RequestToken) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRequestToken.lower(value)
}

public protocol SetTagOptionProtocol {}

/**
 * An option for commands that allow setting a Tag
 */
public class SetTagOption: SetTagOptionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_settagoption(pointer, $0) }
    }

    /**
     * Indicate you want an automatically generated tag
     */
    public static func auto() -> SetTagOption {
        return SetTagOption(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_settagoption_auto($0)
        })
    }

    /**
     * Indicate you want a named tag
     */
    public static func named(tag: Tag) -> SetTagOption {
        return SetTagOption(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_settagoption_named(
                FfiConverterTypeTag.lower(tag), $0
            )
        })
    }
}

public struct FfiConverterTypeSetTagOption: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SetTagOption

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SetTagOption {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SetTagOption, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SetTagOption {
        return SetTagOption(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SetTagOption) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSetTagOption_lift(_ pointer: UnsafeMutableRawPointer) throws -> SetTagOption {
    return try FfiConverterTypeSetTagOption.lift(pointer)
}

public func FfiConverterTypeSetTagOption_lower(_ value: SetTagOption) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSetTagOption.lower(value)
}

public protocol SocketAddrProtocol {
    func asIpv4() -> SocketAddrV4
    func asIpv6() -> SocketAddrV6
    func equal(other: SocketAddr) -> Bool
    func type() -> SocketAddrType
}

/**
 * An internet socket address, either Ipv4 or Ipv6
 */
public class SocketAddr: SocketAddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddr(pointer, $0) }
    }

    /**
     * Create an Ipv4 SocketAddr
     */
    public static func fromIpv4(ipv4: Ipv4Addr, port: UInt16) -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddr_from_ipv4(
                FfiConverterTypeIpv4Addr.lower(ipv4),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    /**
     * Create an Ipv6 SocketAddr
     */
    public static func fromIpv6(ipv6: Ipv6Addr, port: UInt16) -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddr_from_ipv6(
                FfiConverterTypeIpv6Addr.lower(ipv6),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    /**
     * Get the IPv4 SocketAddr representation
     */
    public func asIpv4() -> SocketAddrV4 {
        return try! FfiConverterTypeSocketAddrV4.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_as_ipv4(self.pointer, $0)
                }
        )
    }

    /**
     * Get the IPv6 SocketAddr representation
     */
    public func asIpv6() -> SocketAddrV6 {
        return try! FfiConverterTypeSocketAddrV6.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_as_ipv6(self.pointer, $0)
                }
        )
    }

    /**
     * Returns true if the two SocketAddrs have the same value
     */
    public func equal(other: SocketAddr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_equal(self.pointer,
                                                           FfiConverterTypeSocketAddr.lower(other), $0)
                }
        )
    }

    /**
     * The type of SocketAddr
     */
    public func type() -> SocketAddrType {
        return try! FfiConverterTypeSocketAddrType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddr_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddr {
    return try FfiConverterTypeSocketAddr.lift(pointer)
}

public func FfiConverterTypeSocketAddr_lower(_ value: SocketAddr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddr.lower(value)
}

public protocol SocketAddrV4Protocol {
    func equal(other: SocketAddrV4) -> Bool
    func ip() -> Ipv4Addr
    func port() -> UInt16
    func toString() -> String
}

/**
 * An Ipv4 socket address
 */
public class SocketAddrV4: SocketAddrV4Protocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new socket address from an [`Ipv4Addr`] and a port number
     */
    public convenience init(ipv4: Ipv4Addr, port: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddrv4_new(
                FfiConverterTypeIpv4Addr.lower(ipv4),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddrv4(pointer, $0) }
    }

    /**
     * Create a new Ipv4 addr from a String
     */
    public static func fromString(str: String) throws -> SocketAddrV4 {
        return try SocketAddrV4(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_socketaddrv4_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true if both SocketAddrV4's have the same value
     */
    public func equal(other: SocketAddrV4) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_equal(self.pointer,
                                                             FfiConverterTypeSocketAddrV4.lower(other), $0)
                }
        )
    }

    /**
     * Returns the IP address associated with this socket address
     */
    public func ip() -> Ipv4Addr {
        return try! FfiConverterTypeIpv4Addr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_ip(self.pointer, $0)
                }
        )
    }

    /**
     * Returns the port number associated with this socket address
     */
    public func port() -> UInt16 {
        return try! FfiConverterUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_port(self.pointer, $0)
                }
        )
    }

    /**
     * Returns a Ipv4 SocketAddr as string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddrV4: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddrV4

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrV4 {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddrV4, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV4 {
        return SocketAddrV4(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddrV4) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddrV4_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV4 {
    return try FfiConverterTypeSocketAddrV4.lift(pointer)
}

public func FfiConverterTypeSocketAddrV4_lower(_ value: SocketAddrV4) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddrV4.lower(value)
}

public protocol SocketAddrV6Protocol {
    func equal(other: SocketAddrV6) -> Bool
    func ip() -> Ipv6Addr
    func port() -> UInt16
    func toString() -> String
}

/**
 * An Ipv6 socket address
 */
public class SocketAddrV6: SocketAddrV6Protocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /**
     * Create a new socket address from an [`Ipv6Addr`] and a port number
     */
    public convenience init(ipv6: Ipv6Addr, port: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddrv6_new(
                FfiConverterTypeIpv6Addr.lower(ipv6),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddrv6(pointer, $0) }
    }

    /**
     * Create a new Ipv6 addr from a String
     */
    public static func fromString(str: String) throws -> SocketAddrV6 {
        return try SocketAddrV6(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_socketaddrv6_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true if both SocketAddrV6's have the same value
     */
    public func equal(other: SocketAddrV6) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_equal(self.pointer,
                                                             FfiConverterTypeSocketAddrV6.lower(other), $0)
                }
        )
    }

    /**
     * Returns the IP address associated with this socket address
     */
    public func ip() -> Ipv6Addr {
        return try! FfiConverterTypeIpv6Addr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_ip(self.pointer, $0)
                }
        )
    }

    /**
     * Returns the port number associated with this socket address
     */
    public func port() -> UInt16 {
        return try! FfiConverterUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_port(self.pointer, $0)
                }
        )
    }

    /**
     * Returns the Ipv6 SocketAddr as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddrV6: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddrV6

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrV6 {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddrV6, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV6 {
        return SocketAddrV6(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddrV6) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddrV6_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV6 {
    return try FfiConverterTypeSocketAddrV6.lift(pointer)
}

public func FfiConverterTypeSocketAddrV6_lower(_ value: SocketAddrV6) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddrV6.lower(value)
}

public protocol TagProtocol {
    func equal(other: Tag) -> Bool
    func toBytes() -> Data
    func toString() -> String
}

/**
 * A tag
 */
public class Tag: TagProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_tag(pointer, $0) }
    }

    /**
     * Get a Tag from a slice of bytes
     */
    public static func fromBytes(bytes: Data) -> Tag {
        return Tag(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_tag_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Get a Tag from a string
     */
    public static func fromString(s: String) -> Tag {
        return Tag(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_tag_from_string(
                FfiConverterString.lower(s), $0
            )
        })
    }

    /**
     * Returns trun when the two tags have the same value
     */
    public func equal(other: Tag) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_tag_equal(self.pointer,
                                                    FfiConverterTypeTag.lower(other), $0)
                }
        )
    }

    /**
     * Represent a Tag as bytes
     */
    public func toBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_tag_to_bytes(self.pointer, $0)
                }
        )
    }

    /**
     * Represent a Tag as a string
     */
    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_tag_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeTag: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Tag

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Tag {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Tag, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Tag {
        return Tag(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Tag) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeTag_lift(_ pointer: UnsafeMutableRawPointer) throws -> Tag {
    return try FfiConverterTypeTag.lift(pointer)
}

public func FfiConverterTypeTag_lower(_ value: Tag) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTag.lower(value)
}

public protocol WrapOptionProtocol {}

/**
 * Whether to wrap the added data in a collection.
 */
public class WrapOption: WrapOptionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_wrapoption(pointer, $0) }
    }

    /**
     * Indicate you do not wrap the file or directory.
     */
    public static func noWrap() -> WrapOption {
        return WrapOption(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_wrapoption_no_wrap($0)
        })
    }

    /**
     * Indicate you want to wrap the file or directory in a colletion, with an optional name
     */
    public static func wrap(name: String?) -> WrapOption {
        return WrapOption(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_wrapoption_wrap(
                FfiConverterOptionString.lower(name), $0
            )
        })
    }
}

public struct FfiConverterTypeWrapOption: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WrapOption

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WrapOption {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WrapOption, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WrapOption {
        return WrapOption(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WrapOption) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeWrapOption_lift(_ pointer: UnsafeMutableRawPointer) throws -> WrapOption {
    return try FfiConverterTypeWrapOption.lift(pointer)
}

public func FfiConverterTypeWrapOption_lower(_ value: WrapOption) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWrapOption.lower(value)
}

/**
 * An AddProgress event indicating we got an error and need to abort
 */
public struct AddProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: String) {
        self.error = error
    }
}

extension AddProgressAbort: Equatable, Hashable {
    public static func == (lhs: AddProgressAbort, rhs: AddProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeAddProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressAbort {
        return try AddProgressAbort(
            error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: AddProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeAddProgressAbort_lift(_ buf: RustBuffer) throws -> AddProgressAbort {
    return try FfiConverterTypeAddProgressAbort.lift(buf)
}

public func FfiConverterTypeAddProgressAbort_lower(_ value: AddProgressAbort) -> RustBuffer {
    return FfiConverterTypeAddProgressAbort.lower(value)
}

/**
 * An AddProgress event indicating we are done with the the whole operation
 */
public struct AddProgressAllDone {
    /**
     * The hash of the created data.
     */
    public var hash: Hash
    /**
     * The format of the added data.
     */
    public var format: BlobFormat
    /**
     * The tag of the added data.
     */
    public var tag: Tag

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: Hash, format: BlobFormat, tag: Tag) {
        self.hash = hash
        self.format = format
        self.tag = tag
    }
}

public struct FfiConverterTypeAddProgressAllDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressAllDone {
        return try AddProgressAllDone(
            hash: FfiConverterTypeHash.read(from: &buf),
            format: FfiConverterTypeBlobFormat.read(from: &buf),
            tag: FfiConverterTypeTag.read(from: &buf)
        )
    }

    public static func write(_ value: AddProgressAllDone, into buf: inout [UInt8]) {
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterTypeBlobFormat.write(value.format, into: &buf)
        FfiConverterTypeTag.write(value.tag, into: &buf)
    }
}

public func FfiConverterTypeAddProgressAllDone_lift(_ buf: RustBuffer) throws -> AddProgressAllDone {
    return try FfiConverterTypeAddProgressAllDone.lift(buf)
}

public func FfiConverterTypeAddProgressAllDone_lower(_ value: AddProgressAllDone) -> RustBuffer {
    return FfiConverterTypeAddProgressAllDone.lower(value)
}

/**
 * An AddProgress event indicated we are done with `id` and now have a hash `hash`
 */
public struct AddProgressDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, hash: Hash) {
        self.id = id
        self.hash = hash
    }
}

public struct FfiConverterTypeAddProgressDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressDone {
        return try AddProgressDone(
            id: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf)
        )
    }

    public static func write(_ value: AddProgressDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeAddProgressDone_lift(_ buf: RustBuffer) throws -> AddProgressDone {
    return try FfiConverterTypeAddProgressDone.lift(buf)
}

public func FfiConverterTypeAddProgressDone_lower(_ value: AddProgressDone) -> RustBuffer {
    return FfiConverterTypeAddProgressDone.lower(value)
}

/**
 * An AddProgress event indicating an item was found with name `name`, that can be referred to by `id`
 */
public struct AddProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The name of the entry.
     */
    public var name: String
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, name: String, size: UInt64) {
        self.id = id
        self.name = name
        self.size = size
    }
}

extension AddProgressFound: Equatable, Hashable {
    public static func == (lhs: AddProgressFound, rhs: AddProgressFound) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(size)
    }
}

public struct FfiConverterTypeAddProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressFound {
        return try AddProgressFound(
            id: FfiConverterUInt64.read(from: &buf),
            name: FfiConverterString.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: AddProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeAddProgressFound_lift(_ buf: RustBuffer) throws -> AddProgressFound {
    return try FfiConverterTypeAddProgressFound.lift(buf)
}

public func FfiConverterTypeAddProgressFound_lower(_ value: AddProgressFound) -> RustBuffer {
    return FfiConverterTypeAddProgressFound.lower(value)
}

/**
 * An AddProgress event indicating we got progress ingesting item `id`.
 */
public struct AddProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, offset: UInt64) {
        self.id = id
        self.offset = offset
    }
}

extension AddProgressProgress: Equatable, Hashable {
    public static func == (lhs: AddProgressProgress, rhs: AddProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeAddProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressProgress {
        return try AddProgressProgress(
            id: FfiConverterUInt64.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: AddProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeAddProgressProgress_lift(_ buf: RustBuffer) throws -> AddProgressProgress {
    return try FfiConverterTypeAddProgressProgress.lift(buf)
}

public func FfiConverterTypeAddProgressProgress_lower(_ value: AddProgressProgress) -> RustBuffer {
    return FfiConverterTypeAddProgressProgress.lower(value)
}

/**
 * Outcome of a blob add operation.
 */
public struct BlobAddOutcome {
    /**
     * The hash of the blob
     */
    public var hash: Hash
    /**
     * The format the blob
     */
    public var format: BlobFormat
    /**
     * The size of the blob
     */
    public var size: UInt64
    /**
     * The tag of the blob
     */
    public var tag: Tag

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hash: Hash, format: BlobFormat, size: UInt64, tag: Tag) {
        self.hash = hash
        self.format = format
        self.size = size
        self.tag = tag
    }
}

public struct FfiConverterTypeBlobAddOutcome: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobAddOutcome {
        return try BlobAddOutcome(
            hash: FfiConverterTypeHash.read(from: &buf),
            format: FfiConverterTypeBlobFormat.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf),
            tag: FfiConverterTypeTag.read(from: &buf)
        )
    }

    public static func write(_ value: BlobAddOutcome, into buf: inout [UInt8]) {
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterTypeBlobFormat.write(value.format, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterTypeTag.write(value.tag, into: &buf)
    }
}

public func FfiConverterTypeBlobAddOutcome_lift(_ buf: RustBuffer) throws -> BlobAddOutcome {
    return try FfiConverterTypeBlobAddOutcome.lift(buf)
}

public func FfiConverterTypeBlobAddOutcome_lower(_ value: BlobAddOutcome) -> RustBuffer {
    return FfiConverterTypeBlobAddOutcome.lower(value)
}

/**
 * A response to a list collections request
 */
public struct BlobListCollectionsResponse {
    /**
     * Tag of the collection
     */
    public var tag: Tag
    /**
     * Hash of the collection
     */
    public var hash: Hash
    /**
     * Number of children in the collection
     *
     * This is an optional field, because the data is not always available.
     */
    public var totalBlobsCount: UInt64?
    /**
     * Total size of the raw data referred to by all links
     *
     * This is an optional field, because the data is not always available.
     */
    public var totalBlobsSize: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tag: Tag, hash: Hash, totalBlobsCount: UInt64?, totalBlobsSize: UInt64?) {
        self.tag = tag
        self.hash = hash
        self.totalBlobsCount = totalBlobsCount
        self.totalBlobsSize = totalBlobsSize
    }
}

public struct FfiConverterTypeBlobListCollectionsResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobListCollectionsResponse {
        return try BlobListCollectionsResponse(
            tag: FfiConverterTypeTag.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf),
            totalBlobsCount: FfiConverterOptionUInt64.read(from: &buf),
            totalBlobsSize: FfiConverterOptionUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: BlobListCollectionsResponse, into buf: inout [UInt8]) {
        FfiConverterTypeTag.write(value.tag, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterOptionUInt64.write(value.totalBlobsCount, into: &buf)
        FfiConverterOptionUInt64.write(value.totalBlobsSize, into: &buf)
    }
}

public func FfiConverterTypeBlobListCollectionsResponse_lift(_ buf: RustBuffer) throws -> BlobListCollectionsResponse {
    return try FfiConverterTypeBlobListCollectionsResponse.lift(buf)
}

public func FfiConverterTypeBlobListCollectionsResponse_lower(_ value: BlobListCollectionsResponse) -> RustBuffer {
    return FfiConverterTypeBlobListCollectionsResponse.lower(value)
}

/**
 * A response to a list blobs request
 */
public struct BlobListIncompleteResponse {
    /**
     * The size we got
     */
    public var size: UInt64
    /**
     * The size we expect
     */
    public var expectedSize: UInt64
    /**
     * The hash of the blob
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(size: UInt64, expectedSize: UInt64, hash: Hash) {
        self.size = size
        self.expectedSize = expectedSize
        self.hash = hash
    }
}

public struct FfiConverterTypeBlobListIncompleteResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobListIncompleteResponse {
        return try BlobListIncompleteResponse(
            size: FfiConverterUInt64.read(from: &buf),
            expectedSize: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf)
        )
    }

    public static func write(_ value: BlobListIncompleteResponse, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterUInt64.write(value.expectedSize, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeBlobListIncompleteResponse_lift(_ buf: RustBuffer) throws -> BlobListIncompleteResponse {
    return try FfiConverterTypeBlobListIncompleteResponse.lift(buf)
}

public func FfiConverterTypeBlobListIncompleteResponse_lower(_ value: BlobListIncompleteResponse) -> RustBuffer {
    return FfiConverterTypeBlobListIncompleteResponse.lower(value)
}

/**
 * A response to a list blobs request
 */
public struct BlobListResponse {
    /**
     * Location of the blob
     */
    public var path: String
    /**
     * The hash of the blob
     */
    public var hash: Hash
    /**
     * The size of the blob
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(path: String, hash: Hash, size: UInt64) {
        self.path = path
        self.hash = hash
        self.size = size
    }
}

public struct FfiConverterTypeBlobListResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobListResponse {
        return try BlobListResponse(
            path: FfiConverterString.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: BlobListResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeBlobListResponse_lift(_ buf: RustBuffer) throws -> BlobListResponse {
    return try FfiConverterTypeBlobListResponse.lift(buf)
}

public func FfiConverterTypeBlobListResponse_lower(_ value: BlobListResponse) -> RustBuffer {
    return FfiConverterTypeBlobListResponse.lower(value)
}

/**
 * Information about a connection
 */
public struct ConnectionInfo {
    /**
     * The public key of the endpoint.
     */
    public var publicKey: PublicKey
    /**
     * Derp region, if available.
     */
    public var derpRegion: UInt16?
    /**
     * List of addresses at which this node might be reachable, plus any latency information we
     * have about that address and the last time the address was used.
     */
    public var addrs: [DirectAddrInfo]
    /**
     * The type of connection we have to the peer, either direct or over relay.
     */
    public var connType: ConnectionType
    /**
     * The latency of the `conn_type`.
     */
    public var latency: TimeInterval?
    /**
     * Duration since the last time this peer was used.
     */
    public var lastUsed: TimeInterval?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(publicKey: PublicKey, derpRegion: UInt16?, addrs: [DirectAddrInfo], connType: ConnectionType, latency: TimeInterval?, lastUsed: TimeInterval?) {
        self.publicKey = publicKey
        self.derpRegion = derpRegion
        self.addrs = addrs
        self.connType = connType
        self.latency = latency
        self.lastUsed = lastUsed
    }
}

public struct FfiConverterTypeConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionInfo {
        return try ConnectionInfo(
            publicKey: FfiConverterTypePublicKey.read(from: &buf),
            derpRegion: FfiConverterOptionUInt16.read(from: &buf),
            addrs: FfiConverterSequenceTypeDirectAddrInfo.read(from: &buf),
            connType: FfiConverterTypeConnectionType.read(from: &buf),
            latency: FfiConverterOptionDuration.read(from: &buf),
            lastUsed: FfiConverterOptionDuration.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.publicKey, into: &buf)
        FfiConverterOptionUInt16.write(value.derpRegion, into: &buf)
        FfiConverterSequenceTypeDirectAddrInfo.write(value.addrs, into: &buf)
        FfiConverterTypeConnectionType.write(value.connType, into: &buf)
        FfiConverterOptionDuration.write(value.latency, into: &buf)
        FfiConverterOptionDuration.write(value.lastUsed, into: &buf)
    }
}

public func FfiConverterTypeConnectionInfo_lift(_ buf: RustBuffer) throws -> ConnectionInfo {
    return try FfiConverterTypeConnectionInfo.lift(buf)
}

public func FfiConverterTypeConnectionInfo_lower(_ value: ConnectionInfo) -> RustBuffer {
    return FfiConverterTypeConnectionInfo.lower(value)
}

/**
 * Stats counter
 */
public struct CounterStats {
    /**
     * The counter value
     */
    public var value: UInt64
    /**
     * The counter description
     */
    public var description: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: UInt64, description: String) {
        self.value = value
        self.description = description
    }
}

extension CounterStats: Equatable, Hashable {
    public static func == (lhs: CounterStats, rhs: CounterStats) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(description)
    }
}

public struct FfiConverterTypeCounterStats: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CounterStats {
        return try CounterStats(
            value: FfiConverterUInt64.read(from: &buf),
            description: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CounterStats, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterString.write(value.description, into: &buf)
    }
}

public func FfiConverterTypeCounterStats_lift(_ buf: RustBuffer) throws -> CounterStats {
    return try FfiConverterTypeCounterStats.lift(buf)
}

public func FfiConverterTypeCounterStats_lower(_ value: CounterStats) -> RustBuffer {
    return FfiConverterTypeCounterStats.lower(value)
}

/**
 * A DocExportProgress event indicating we got an error and need to abort
 */
public struct DocExportProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: String) {
        self.error = error
    }
}

extension DocExportProgressAbort: Equatable, Hashable {
    public static func == (lhs: DocExportProgressAbort, rhs: DocExportProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDocExportProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressAbort {
        return try DocExportProgressAbort(
            error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DocExportProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressAbort_lift(_ buf: RustBuffer) throws -> DocExportProgressAbort {
    return try FfiConverterTypeDocExportProgressAbort.lift(buf)
}

public func FfiConverterTypeDocExportProgressAbort_lower(_ value: DocExportProgressAbort) -> RustBuffer {
    return FfiConverterTypeDocExportProgressAbort.lower(value)
}

/**
 * A DocExportProgress event indicating a file was found with name `name`, from now on referred to via `id`
 */
public struct DocExportProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash
    /**
     * The key of the entry.
     */
    public var key: Data
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64
    /**
     * The path where we are writing the entry
     */
    public var outpath: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, hash: Hash, key: Data, size: UInt64, outpath: String) {
        self.id = id
        self.hash = hash
        self.key = key
        self.size = size
        self.outpath = outpath
    }
}

public struct FfiConverterTypeDocExportProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressFound {
        return try DocExportProgressFound(
            id: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf),
            key: FfiConverterData.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf),
            outpath: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DocExportProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterData.write(value.key, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterString.write(value.outpath, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressFound_lift(_ buf: RustBuffer) throws -> DocExportProgressFound {
    return try FfiConverterTypeDocExportProgressFound.lift(buf)
}

public func FfiConverterTypeDocExportProgressFound_lower(_ value: DocExportProgressFound) -> RustBuffer {
    return FfiConverterTypeDocExportProgressFound.lower(value)
}

/**
 * A DocExportProgress event indicating we've made progress exporting item `id`.
 */
public struct DocExportProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, offset: UInt64) {
        self.id = id
        self.offset = offset
    }
}

extension DocExportProgressProgress: Equatable, Hashable {
    public static func == (lhs: DocExportProgressProgress, rhs: DocExportProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDocExportProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressProgress {
        return try DocExportProgressProgress(
            id: FfiConverterUInt64.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DocExportProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressProgress_lift(_ buf: RustBuffer) throws -> DocExportProgressProgress {
    return try FfiConverterTypeDocExportProgressProgress.lift(buf)
}

public func FfiConverterTypeDocExportProgressProgress_lower(_ value: DocExportProgressProgress) -> RustBuffer {
    return FfiConverterTypeDocExportProgressProgress.lower(value)
}

/**
 * A DocImportProgress event indicating we got an error and need to abort
 */
public struct DocImportProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: String) {
        self.error = error
    }
}

extension DocImportProgressAbort: Equatable, Hashable {
    public static func == (lhs: DocImportProgressAbort, rhs: DocImportProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDocImportProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressAbort {
        return try DocImportProgressAbort(
            error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DocImportProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressAbort_lift(_ buf: RustBuffer) throws -> DocImportProgressAbort {
    return try FfiConverterTypeDocImportProgressAbort.lift(buf)
}

public func FfiConverterTypeDocImportProgressAbort_lower(_ value: DocImportProgressAbort) -> RustBuffer {
    return FfiConverterTypeDocImportProgressAbort.lower(value)
}

/**
 * A DocImportProgress event indicating we are done setting the entry to the doc
 */
public struct DocImportProgressAllDone {
    /**
     * The key of the entry
     */
    public var key: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: Data) {
        self.key = key
    }
}

extension DocImportProgressAllDone: Equatable, Hashable {
    public static func == (lhs: DocImportProgressAllDone, rhs: DocImportProgressAllDone) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
    }
}

public struct FfiConverterTypeDocImportProgressAllDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressAllDone {
        return try DocImportProgressAllDone(
            key: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: DocImportProgressAllDone, into buf: inout [UInt8]) {
        FfiConverterData.write(value.key, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressAllDone_lift(_ buf: RustBuffer) throws -> DocImportProgressAllDone {
    return try FfiConverterTypeDocImportProgressAllDone.lift(buf)
}

public func FfiConverterTypeDocImportProgressAllDone_lower(_ value: DocImportProgressAllDone) -> RustBuffer {
    return FfiConverterTypeDocImportProgressAllDone.lower(value)
}

/**
 * A DocImportProgress event indicating a file was found with name `name`, from now on referred to via `id`
 */
public struct DocImportProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The name of the entry.
     */
    public var name: String
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, name: String, size: UInt64) {
        self.id = id
        self.name = name
        self.size = size
    }
}

extension DocImportProgressFound: Equatable, Hashable {
    public static func == (lhs: DocImportProgressFound, rhs: DocImportProgressFound) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(size)
    }
}

public struct FfiConverterTypeDocImportProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressFound {
        return try DocImportProgressFound(
            id: FfiConverterUInt64.read(from: &buf),
            name: FfiConverterString.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DocImportProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressFound_lift(_ buf: RustBuffer) throws -> DocImportProgressFound {
    return try FfiConverterTypeDocImportProgressFound.lift(buf)
}

public func FfiConverterTypeDocImportProgressFound_lower(_ value: DocImportProgressFound) -> RustBuffer {
    return FfiConverterTypeDocImportProgressFound.lower(value)
}

/**
 * A DocImportProgress event indicating we are finished adding `id` to the data store and the hash is `hash`.
 */
public struct DocImportProgressIngestDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, hash: Hash) {
        self.id = id
        self.hash = hash
    }
}

public struct FfiConverterTypeDocImportProgressIngestDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressIngestDone {
        return try DocImportProgressIngestDone(
            id: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf)
        )
    }

    public static func write(_ value: DocImportProgressIngestDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressIngestDone_lift(_ buf: RustBuffer) throws -> DocImportProgressIngestDone {
    return try FfiConverterTypeDocImportProgressIngestDone.lift(buf)
}

public func FfiConverterTypeDocImportProgressIngestDone_lower(_ value: DocImportProgressIngestDone) -> RustBuffer {
    return FfiConverterTypeDocImportProgressIngestDone.lower(value)
}

/**
 * A DocImportProgress event indicating we've made progress ingesting item `id`.
 */
public struct DocImportProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, offset: UInt64) {
        self.id = id
        self.offset = offset
    }
}

extension DocImportProgressProgress: Equatable, Hashable {
    public static func == (lhs: DocImportProgressProgress, rhs: DocImportProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDocImportProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressProgress {
        return try DocImportProgressProgress(
            id: FfiConverterUInt64.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DocImportProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressProgress_lift(_ buf: RustBuffer) throws -> DocImportProgressProgress {
    return try FfiConverterTypeDocImportProgressProgress.lift(buf)
}

public func FfiConverterTypeDocImportProgressProgress_lower(_ value: DocImportProgressProgress) -> RustBuffer {
    return FfiConverterTypeDocImportProgressProgress.lower(value)
}

/**
 * A DownloadProgress event indicating we got an error and need to abort
 */
public struct DownloadProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(error: String) {
        self.error = error
    }
}

extension DownloadProgressAbort: Equatable, Hashable {
    public static func == (lhs: DownloadProgressAbort, rhs: DownloadProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDownloadProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressAbort {
        return try DownloadProgressAbort(
            error: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressAbort_lift(_ buf: RustBuffer) throws -> DownloadProgressAbort {
    return try FfiConverterTypeDownloadProgressAbort.lift(buf)
}

public func FfiConverterTypeDownloadProgressAbort_lower(_ value: DownloadProgressAbort) -> RustBuffer {
    return FfiConverterTypeDownloadProgressAbort.lower(value)
}

/**
 * A DownloadProgress event indicated we are done with `id`
 */
public struct DownloadProgressDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64) {
        self.id = id
    }
}

extension DownloadProgressDone: Equatable, Hashable {
    public static func == (lhs: DownloadProgressDone, rhs: DownloadProgressDone) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
}

public struct FfiConverterTypeDownloadProgressDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressDone {
        return try DownloadProgressDone(
            id: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressDone_lift(_ buf: RustBuffer) throws -> DownloadProgressDone {
    return try FfiConverterTypeDownloadProgressDone.lift(buf)
}

public func FfiConverterTypeDownloadProgressDone_lower(_ value: DownloadProgressDone) -> RustBuffer {
    return FfiConverterTypeDownloadProgressDone.lower(value)
}

/**
 * A DownloadProgress event indicating We have made progress exporting the data.
 *
 * This is only sent for large blobs.
 */
public struct DownloadProgressExport {
    /**
     * Unique id of the entry that is being exported.
     */
    public var id: UInt64
    /**
     * The hash of the entry
     */
    public var hash: Hash
    /**
     * The size of the entry in bytes
     */
    public var size: UInt64
    /**
     * The path to the file where the data is exported
     */
    public var target: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, hash: Hash, size: UInt64, target: String) {
        self.id = id
        self.hash = hash
        self.size = size
        self.target = target
    }
}

public struct FfiConverterTypeDownloadProgressExport: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressExport {
        return try DownloadProgressExport(
            id: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf),
            target: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressExport, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterString.write(value.target, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressExport_lift(_ buf: RustBuffer) throws -> DownloadProgressExport {
    return try FfiConverterTypeDownloadProgressExport.lift(buf)
}

public func FfiConverterTypeDownloadProgressExport_lower(_ value: DownloadProgressExport) -> RustBuffer {
    return FfiConverterTypeDownloadProgressExport.lower(value)
}

/**
 * A DownloadProgress event indicating We have made progress exporting the data.
 *
 * This is only sent for large blobs.
 */
public struct DownloadProgressExportProgress {
    /**
     * Unique id of the entry that is being exported.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, offset: UInt64) {
        self.id = id
        self.offset = offset
    }
}

extension DownloadProgressExportProgress: Equatable, Hashable {
    public static func == (lhs: DownloadProgressExportProgress, rhs: DownloadProgressExportProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDownloadProgressExportProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressExportProgress {
        return try DownloadProgressExportProgress(
            id: FfiConverterUInt64.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressExportProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressExportProgress_lift(_ buf: RustBuffer) throws -> DownloadProgressExportProgress {
    return try FfiConverterTypeDownloadProgressExportProgress.lift(buf)
}

public func FfiConverterTypeDownloadProgressExportProgress_lower(_ value: DownloadProgressExportProgress) -> RustBuffer {
    return FfiConverterTypeDownloadProgressExportProgress.lower(value)
}

/**
 * A DownloadProgress event indicating an item was found with hash `hash`, that can be referred to by `id`
 */
public struct DownloadProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * child offset
     */
    public var child: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, child: UInt64, hash: Hash, size: UInt64) {
        self.id = id
        self.child = child
        self.hash = hash
        self.size = size
    }
}

public struct FfiConverterTypeDownloadProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressFound {
        return try DownloadProgressFound(
            id: FfiConverterUInt64.read(from: &buf),
            child: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf),
            size: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.child, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressFound_lift(_ buf: RustBuffer) throws -> DownloadProgressFound {
    return try FfiConverterTypeDownloadProgressFound.lift(buf)
}

public func FfiConverterTypeDownloadProgressFound_lower(_ value: DownloadProgressFound) -> RustBuffer {
    return FfiConverterTypeDownloadProgressFound.lower(value)
}

/**
 * A DownloadProgress event indicating an item was found with hash `hash`, that can be referred to by `id`
 */
public struct DownloadProgressFoundHashSeq {
    /**
     * Number of children in the collection, if known.
     */
    public var children: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(children: UInt64, hash: Hash) {
        self.children = children
        self.hash = hash
    }
}

public struct FfiConverterTypeDownloadProgressFoundHashSeq: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressFoundHashSeq {
        return try DownloadProgressFoundHashSeq(
            children: FfiConverterUInt64.read(from: &buf),
            hash: FfiConverterTypeHash.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressFoundHashSeq, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.children, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressFoundHashSeq_lift(_ buf: RustBuffer) throws -> DownloadProgressFoundHashSeq {
    return try FfiConverterTypeDownloadProgressFoundHashSeq.lift(buf)
}

public func FfiConverterTypeDownloadProgressFoundHashSeq_lower(_ value: DownloadProgressFoundHashSeq) -> RustBuffer {
    return FfiConverterTypeDownloadProgressFoundHashSeq.lower(value)
}

/**
 * A DownloadProgress event indicating we are done with the networking portion - all data is local
 */
public struct DownloadProgressNetworkDone {
    /**
     * The number of bytes written
     */
    public var bytesWritten: UInt64
    /**
     * The number of bytes read
     */
    public var bytesRead: UInt64
    /**
     * The time it took to transfer the data
     */
    public var elapsed: TimeInterval

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytesWritten: UInt64, bytesRead: UInt64, elapsed: TimeInterval) {
        self.bytesWritten = bytesWritten
        self.bytesRead = bytesRead
        self.elapsed = elapsed
    }
}

extension DownloadProgressNetworkDone: Equatable, Hashable {
    public static func == (lhs: DownloadProgressNetworkDone, rhs: DownloadProgressNetworkDone) -> Bool {
        if lhs.bytesWritten != rhs.bytesWritten {
            return false
        }
        if lhs.bytesRead != rhs.bytesRead {
            return false
        }
        if lhs.elapsed != rhs.elapsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytesWritten)
        hasher.combine(bytesRead)
        hasher.combine(elapsed)
    }
}

public struct FfiConverterTypeDownloadProgressNetworkDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressNetworkDone {
        return try DownloadProgressNetworkDone(
            bytesWritten: FfiConverterUInt64.read(from: &buf),
            bytesRead: FfiConverterUInt64.read(from: &buf),
            elapsed: FfiConverterDuration.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressNetworkDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.bytesWritten, into: &buf)
        FfiConverterUInt64.write(value.bytesRead, into: &buf)
        FfiConverterDuration.write(value.elapsed, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressNetworkDone_lift(_ buf: RustBuffer) throws -> DownloadProgressNetworkDone {
    return try FfiConverterTypeDownloadProgressNetworkDone.lift(buf)
}

public func FfiConverterTypeDownloadProgressNetworkDone_lower(_ value: DownloadProgressNetworkDone) -> RustBuffer {
    return FfiConverterTypeDownloadProgressNetworkDone.lower(value)
}

/**
 * A DownloadProgress event indicating we got progress ingesting item `id`.
 */
public struct DownloadProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: UInt64, offset: UInt64) {
        self.id = id
        self.offset = offset
    }
}

extension DownloadProgressProgress: Equatable, Hashable {
    public static func == (lhs: DownloadProgressProgress, rhs: DownloadProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDownloadProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressProgress {
        return try DownloadProgressProgress(
            id: FfiConverterUInt64.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: DownloadProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressProgress_lift(_ buf: RustBuffer) throws -> DownloadProgressProgress {
    return try FfiConverterTypeDownloadProgressProgress.lift(buf)
}

public func FfiConverterTypeDownloadProgressProgress_lower(_ value: DownloadProgressProgress) -> RustBuffer {
    return FfiConverterTypeDownloadProgressProgress.lower(value)
}

/**
 * Outcome of an InsertRemove event.
 */
public struct InsertRemoteEvent {
    /**
     * The peer that sent us the entry.
     */
    public var from: PublicKey
    /**
     * The inserted entry.
     */
    public var entry: Entry
    /**
     * If the content is available at the local node
     */
    public var contentStatus: ContentStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(from: PublicKey, entry: Entry, contentStatus: ContentStatus) {
        self.from = from
        self.entry = entry
        self.contentStatus = contentStatus
    }
}

public struct FfiConverterTypeInsertRemoteEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InsertRemoteEvent {
        return try InsertRemoteEvent(
            from: FfiConverterTypePublicKey.read(from: &buf),
            entry: FfiConverterTypeEntry.read(from: &buf),
            contentStatus: FfiConverterTypeContentStatus.read(from: &buf)
        )
    }

    public static func write(_ value: InsertRemoteEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.from, into: &buf)
        FfiConverterTypeEntry.write(value.entry, into: &buf)
        FfiConverterTypeContentStatus.write(value.contentStatus, into: &buf)
    }
}

public func FfiConverterTypeInsertRemoteEvent_lift(_ buf: RustBuffer) throws -> InsertRemoteEvent {
    return try FfiConverterTypeInsertRemoteEvent.lift(buf)
}

public func FfiConverterTypeInsertRemoteEvent_lower(_ value: InsertRemoteEvent) -> RustBuffer {
    return FfiConverterTypeInsertRemoteEvent.lower(value)
}

/**
 * The NamespaceId and CapabilityKind (read/write) of the doc
 */
public struct NamespaceAndCapability {
    /**
     * The NamespaceId of the doc
     */
    public var namespace: NamespaceId
    /**
     * The capability you have for the doc (read/write)
     */
    public var capability: CapabilityKind

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(namespace: NamespaceId, capability: CapabilityKind) {
        self.namespace = namespace
        self.capability = capability
    }
}

public struct FfiConverterTypeNamespaceAndCapability: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NamespaceAndCapability {
        return try NamespaceAndCapability(
            namespace: FfiConverterTypeNamespaceId.read(from: &buf),
            capability: FfiConverterTypeCapabilityKind.read(from: &buf)
        )
    }

    public static func write(_ value: NamespaceAndCapability, into buf: inout [UInt8]) {
        FfiConverterTypeNamespaceId.write(value.namespace, into: &buf)
        FfiConverterTypeCapabilityKind.write(value.capability, into: &buf)
    }
}

public func FfiConverterTypeNamespaceAndCapability_lift(_ buf: RustBuffer) throws -> NamespaceAndCapability {
    return try FfiConverterTypeNamespaceAndCapability.lift(buf)
}

public func FfiConverterTypeNamespaceAndCapability_lower(_ value: NamespaceAndCapability) -> RustBuffer {
    return FfiConverterTypeNamespaceAndCapability.lower(value)
}

/**
 * The state for an open replica.
 */
public struct OpenState {
    /**
     * Whether to accept sync requests for this replica.
     */
    public var sync: Bool
    /**
     * How many event subscriptions are open
     */
    public var subscribers: UInt64
    /**
     * By how many handles the replica is currently held open
     */
    public var handles: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sync: Bool, subscribers: UInt64, handles: UInt64) {
        self.sync = sync
        self.subscribers = subscribers
        self.handles = handles
    }
}

extension OpenState: Equatable, Hashable {
    public static func == (lhs: OpenState, rhs: OpenState) -> Bool {
        if lhs.sync != rhs.sync {
            return false
        }
        if lhs.subscribers != rhs.subscribers {
            return false
        }
        if lhs.handles != rhs.handles {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sync)
        hasher.combine(subscribers)
        hasher.combine(handles)
    }
}

public struct FfiConverterTypeOpenState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenState {
        return try OpenState(
            sync: FfiConverterBool.read(from: &buf),
            subscribers: FfiConverterUInt64.read(from: &buf),
            handles: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OpenState, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.sync, into: &buf)
        FfiConverterUInt64.write(value.subscribers, into: &buf)
        FfiConverterUInt64.write(value.handles, into: &buf)
    }
}

public func FfiConverterTypeOpenState_lift(_ buf: RustBuffer) throws -> OpenState {
    return try FfiConverterTypeOpenState.lift(buf)
}

public func FfiConverterTypeOpenState_lower(_ value: OpenState) -> RustBuffer {
    return FfiConverterTypeOpenState.lower(value)
}

/**
 * Options for sorting and pagination for using [`Query`]s.
 */
public struct QueryOptions {
    /**
     * Sort by author or key first.
     *
     * Default is [`SortBy::AuthorKey`], so sorting first by author and then by key.
     */
    public var sortBy: SortBy
    /**
     * Direction by which to sort the entries
     *
     * Default is [`SortDirection::Asc`]
     */
    public var direction: SortDirection
    /**
     * Offset
     */
    public var offset: UInt64
    /**
     * Limit to limit the pagination.
     *
     * When the limit is 0, the limit does not exist.
     */
    public var limit: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sortBy: SortBy, direction: SortDirection, offset: UInt64, limit: UInt64) {
        self.sortBy = sortBy
        self.direction = direction
        self.offset = offset
        self.limit = limit
    }
}

extension QueryOptions: Equatable, Hashable {
    public static func == (lhs: QueryOptions, rhs: QueryOptions) -> Bool {
        if lhs.sortBy != rhs.sortBy {
            return false
        }
        if lhs.direction != rhs.direction {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        if lhs.limit != rhs.limit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sortBy)
        hasher.combine(direction)
        hasher.combine(offset)
        hasher.combine(limit)
    }
}

public struct FfiConverterTypeQueryOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QueryOptions {
        return try QueryOptions(
            sortBy: FfiConverterTypeSortBy.read(from: &buf),
            direction: FfiConverterTypeSortDirection.read(from: &buf),
            offset: FfiConverterUInt64.read(from: &buf),
            limit: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: QueryOptions, into buf: inout [UInt8]) {
        FfiConverterTypeSortBy.write(value.sortBy, into: &buf)
        FfiConverterTypeSortDirection.write(value.direction, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
        FfiConverterUInt64.write(value.limit, into: &buf)
    }
}

public func FfiConverterTypeQueryOptions_lift(_ buf: RustBuffer) throws -> QueryOptions {
    return try FfiConverterTypeQueryOptions.lift(buf)
}

public func FfiConverterTypeQueryOptions_lower(_ value: QueryOptions) -> RustBuffer {
    return FfiConverterTypeQueryOptions.lower(value)
}

/**
 * Outcome of a sync operation
 */
public struct SyncEvent {
    /**
     * Peer we synced with
     */
    public var peer: PublicKey
    /**
     * Origin of the sync exchange
     */
    public var origin: Origin
    /**
     * Timestamp when the sync finished
     */
    public var started: Date
    /**
     * Timestamp when the sync started
     */
    public var finished: Date
    /**
     * Result of the sync operation. `None` if successfull.
     */
    public var result: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: PublicKey, origin: Origin, started: Date, finished: Date, result: String?) {
        self.peer = peer
        self.origin = origin
        self.started = started
        self.finished = finished
        self.result = result
    }
}

public struct FfiConverterTypeSyncEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncEvent {
        return try SyncEvent(
            peer: FfiConverterTypePublicKey.read(from: &buf),
            origin: FfiConverterTypeOrigin.read(from: &buf),
            started: FfiConverterTimestamp.read(from: &buf),
            finished: FfiConverterTimestamp.read(from: &buf),
            result: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SyncEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.peer, into: &buf)
        FfiConverterTypeOrigin.write(value.origin, into: &buf)
        FfiConverterTimestamp.write(value.started, into: &buf)
        FfiConverterTimestamp.write(value.finished, into: &buf)
        FfiConverterOptionString.write(value.result, into: &buf)
    }
}

public func FfiConverterTypeSyncEvent_lift(_ buf: RustBuffer) throws -> SyncEvent {
    return try FfiConverterTypeSyncEvent.lift(buf)
}

public func FfiConverterTypeSyncEvent_lower(_ value: SyncEvent) -> RustBuffer {
    return FfiConverterTypeSyncEvent.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The different types of AddProgress events
 */
public enum AddProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done with `id`, and the hash is `hash`.
     */
    case done
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeAddProgressType: FfiConverterRustBuffer {
    typealias SwiftType = AddProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .done

        case 4: return .allDone

        case 5: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .done:
            writeInt(&buf, Int32(3))

        case .allDone:
            writeInt(&buf, Int32(4))

        case .abort:
            writeInt(&buf, Int32(5))
        }
    }
}

public func FfiConverterTypeAddProgressType_lift(_ buf: RustBuffer) throws -> AddProgressType {
    return try FfiConverterTypeAddProgressType.lift(buf)
}

public func FfiConverterTypeAddProgressType_lower(_ value: AddProgressType) -> RustBuffer {
    return FfiConverterTypeAddProgressType.lower(value)
}

extension AddProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * A format identifier
 */
public enum BlobFormat {
    /**
     * Raw blob
     */
    case raw
    /**
     * A sequence of BLAKE3 hashes
     */
    case hashSeq
}

public struct FfiConverterTypeBlobFormat: FfiConverterRustBuffer {
    typealias SwiftType = BlobFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .raw

        case 2: return .hashSeq

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlobFormat, into buf: inout [UInt8]) {
        switch value {
        case .raw:
            writeInt(&buf, Int32(1))

        case .hashSeq:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeBlobFormat_lift(_ buf: RustBuffer) throws -> BlobFormat {
    return try FfiConverterTypeBlobFormat.lift(buf)
}

public func FfiConverterTypeBlobFormat_lower(_ value: BlobFormat) -> RustBuffer {
    return FfiConverterTypeBlobFormat.lower(value)
}

extension BlobFormat: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Kind of capability of the doc.
 */
public enum CapabilityKind {
    /**
     * A writable doc
     */
    case write
    /**
     * A readable doc
     */
    case read
}

public struct FfiConverterTypeCapabilityKind: FfiConverterRustBuffer {
    typealias SwiftType = CapabilityKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CapabilityKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .write

        case 2: return .read

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CapabilityKind, into buf: inout [UInt8]) {
        switch value {
        case .write:
            writeInt(&buf, Int32(1))

        case .read:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeCapabilityKind_lift(_ buf: RustBuffer) throws -> CapabilityKind {
    return try FfiConverterTypeCapabilityKind.lift(buf)
}

public func FfiConverterTypeCapabilityKind_lower(_ value: CapabilityKind) -> RustBuffer {
    return FfiConverterTypeCapabilityKind.lower(value)
}

extension CapabilityKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of connection we have to the node
 */
public enum ConnectionType {
    /**
     * Direct UDP connection
     */
    case direct(addr: String, port: UInt16)
    /**
     * Relay connection over DERP
     */
    case relay(port: UInt16)
    /**
     * Both a UDP and a DERP connection are used.
     *
     * This is the case if we do have a UDP address, but are missing a recent confirmation that
     * the address works.
     */
    case mixed(addr: String, port: UInt16)
    /**
     * We have no verified connection to this PublicKey
     */
    case none
}

public struct FfiConverterTypeConnectionType: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .direct(
                addr: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 2: return try .relay(
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 3: return try .mixed(
                addr: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 4: return .none

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionType, into buf: inout [UInt8]) {
        switch value {
        case let .direct(addr, port):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(addr, into: &buf)
            FfiConverterUInt16.write(port, into: &buf)

        case let .relay(port):
            writeInt(&buf, Int32(2))
            FfiConverterUInt16.write(port, into: &buf)

        case let .mixed(addr, port):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(addr, into: &buf)
            FfiConverterUInt16.write(port, into: &buf)

        case .none:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeConnectionType_lift(_ buf: RustBuffer) throws -> ConnectionType {
    return try FfiConverterTypeConnectionType.lift(buf)
}

public func FfiConverterTypeConnectionType_lower(_ value: ConnectionType) -> RustBuffer {
    return FfiConverterTypeConnectionType.lower(value)
}

extension ConnectionType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Whether the content status is available on a node.
 */
public enum ContentStatus {
    /**
     * The content is completely available.
     */
    case complete
    /**
     * The content is partially available.
     */
    case incomplete
    /**
     * The content is missing.
     */
    case missing
}

public struct FfiConverterTypeContentStatus: FfiConverterRustBuffer {
    typealias SwiftType = ContentStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContentStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .complete

        case 2: return .incomplete

        case 3: return .missing

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContentStatus, into buf: inout [UInt8]) {
        switch value {
        case .complete:
            writeInt(&buf, Int32(1))

        case .incomplete:
            writeInt(&buf, Int32(2))

        case .missing:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeContentStatus_lift(_ buf: RustBuffer) throws -> ContentStatus {
    return try FfiConverterTypeContentStatus.lift(buf)
}

public func FfiConverterTypeContentStatus_lower(_ value: ContentStatus) -> RustBuffer {
    return FfiConverterTypeContentStatus.lower(value)
}

extension ContentStatus: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of `DocExportProgress` event
 */
public enum DocExportProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress exporting item `id`.
     */
    case progress
    /**
     * We are done writing the entry to the filesystem
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDocExportProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DocExportProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .allDone

        case 4: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DocExportProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .allDone:
            writeInt(&buf, Int32(3))

        case .abort:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeDocExportProgressType_lift(_ buf: RustBuffer) throws -> DocExportProgressType {
    return try FfiConverterTypeDocExportProgressType.lift(buf)
}

public func FfiConverterTypeDocExportProgressType_lower(_ value: DocExportProgressType) -> RustBuffer {
    return FfiConverterTypeDocExportProgressType.lower(value)
}

extension DocExportProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of `DocImportProgress` event
 */
public enum DocImportProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done ingesting `id`, and the hash is `hash`.
     */
    case ingestDone
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDocImportProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DocImportProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .ingestDone

        case 4: return .allDone

        case 5: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DocImportProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .ingestDone:
            writeInt(&buf, Int32(3))

        case .allDone:
            writeInt(&buf, Int32(4))

        case .abort:
            writeInt(&buf, Int32(5))
        }
    }
}

public func FfiConverterTypeDocImportProgressType_lift(_ buf: RustBuffer) throws -> DocImportProgressType {
    return try FfiConverterTypeDocImportProgressType.lift(buf)
}

public func FfiConverterTypeDocImportProgressType_lower(_ value: DocImportProgressType) -> RustBuffer {
    return FfiConverterTypeDocImportProgressType.lower(value)
}

extension DocImportProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The kinds of progress events that can occur in a `DownloadProgress`
 */
public enum DownloadProgressType {
    /**
     * A new connection was established.
     */
    case connected
    /**
     * An item was found with hash `hash`, from now on referred to via `id`
     */
    case found
    /**
     * An item was found with hash `hash`, from now on referred to via `id`
     */
    case foundHashSeq
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done with `id`, and the hash is `hash`.
     */
    case done
    /**
     * We are done with the network part - all data is local
     */
    case networkDone
    /**
     * The download part is done for this id, we are not exporting the data to the specified outpath
     */
    case export
    /**
     * We have made progress exporting the data
     *
     * This is only sent for large blobs"Export",
     */
    case exportProgress
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDownloadProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DownloadProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .connected

        case 2: return .found

        case 3: return .foundHashSeq

        case 4: return .progress

        case 5: return .done

        case 6: return .networkDone

        case 7: return .export

        case 8: return .exportProgress

        case 9: return .allDone

        case 10: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DownloadProgressType, into buf: inout [UInt8]) {
        switch value {
        case .connected:
            writeInt(&buf, Int32(1))

        case .found:
            writeInt(&buf, Int32(2))

        case .foundHashSeq:
            writeInt(&buf, Int32(3))

        case .progress:
            writeInt(&buf, Int32(4))

        case .done:
            writeInt(&buf, Int32(5))

        case .networkDone:
            writeInt(&buf, Int32(6))

        case .export:
            writeInt(&buf, Int32(7))

        case .exportProgress:
            writeInt(&buf, Int32(8))

        case .allDone:
            writeInt(&buf, Int32(9))

        case .abort:
            writeInt(&buf, Int32(10))
        }
    }
}

public func FfiConverterTypeDownloadProgressType_lift(_ buf: RustBuffer) throws -> DownloadProgressType {
    return try FfiConverterTypeDownloadProgressType.lift(buf)
}

public func FfiConverterTypeDownloadProgressType_lower(_ value: DownloadProgressType) -> RustBuffer {
    return FfiConverterTypeDownloadProgressType.lower(value)
}

extension DownloadProgressType: Equatable, Hashable {}

/**
 * An iroh error. Each IrohError contains a string description.
 */
public enum IrohError {
    case Runtime(description: String)
    case NodeCreate(description: String)
    case Doc(description: String)
    case Author(description: String)
    case Namespace(description: String)
    case DocTicket(description: String)
    case Uniffi(description: String)
    case Connection(description: String)
    case Blobs(description: String)
    case Ipv4Addr(description: String)
    case Ipv6Addr(description: String)
    case SocketAddrV4(description: String)
    case SocketAddrV6(description: String)
    case PublicKey(description: String)
    case NodeAddr(description: String)
    case Hash(description: String)
    case RequestToken(description: String)
    case FsUtil(description: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeIrohError.lift(error)
    }
}

public struct FfiConverterTypeIrohError: FfiConverterRustBuffer {
    typealias SwiftType = IrohError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Runtime(
                description: FfiConverterString.read(from: &buf)
            )
        case 2: return try .NodeCreate(
                description: FfiConverterString.read(from: &buf)
            )
        case 3: return try .Doc(
                description: FfiConverterString.read(from: &buf)
            )
        case 4: return try .Author(
                description: FfiConverterString.read(from: &buf)
            )
        case 5: return try .Namespace(
                description: FfiConverterString.read(from: &buf)
            )
        case 6: return try .DocTicket(
                description: FfiConverterString.read(from: &buf)
            )
        case 7: return try .Uniffi(
                description: FfiConverterString.read(from: &buf)
            )
        case 8: return try .Connection(
                description: FfiConverterString.read(from: &buf)
            )
        case 9: return try .Blobs(
                description: FfiConverterString.read(from: &buf)
            )
        case 10: return try .Ipv4Addr(
                description: FfiConverterString.read(from: &buf)
            )
        case 11: return try .Ipv6Addr(
                description: FfiConverterString.read(from: &buf)
            )
        case 12: return try .SocketAddrV4(
                description: FfiConverterString.read(from: &buf)
            )
        case 13: return try .SocketAddrV6(
                description: FfiConverterString.read(from: &buf)
            )
        case 14: return try .PublicKey(
                description: FfiConverterString.read(from: &buf)
            )
        case 15: return try .NodeAddr(
                description: FfiConverterString.read(from: &buf)
            )
        case 16: return try .Hash(
                description: FfiConverterString.read(from: &buf)
            )
        case 17: return try .RequestToken(
                description: FfiConverterString.read(from: &buf)
            )
        case 18: return try .FsUtil(
                description: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IrohError, into buf: inout [UInt8]) {
        switch value {
        case let .Runtime(description):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(description, into: &buf)

        case let .NodeCreate(description):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(description, into: &buf)

        case let .Doc(description):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(description, into: &buf)

        case let .Author(description):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(description, into: &buf)

        case let .Namespace(description):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(description, into: &buf)

        case let .DocTicket(description):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(description, into: &buf)

        case let .Uniffi(description):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(description, into: &buf)

        case let .Connection(description):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(description, into: &buf)

        case let .Blobs(description):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(description, into: &buf)

        case let .Ipv4Addr(description):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(description, into: &buf)

        case let .Ipv6Addr(description):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(description, into: &buf)

        case let .SocketAddrV4(description):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(description, into: &buf)

        case let .SocketAddrV6(description):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(description, into: &buf)

        case let .PublicKey(description):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(description, into: &buf)

        case let .NodeAddr(description):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(description, into: &buf)

        case let .Hash(description):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(description, into: &buf)

        case let .RequestToken(description):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(description, into: &buf)

        case let .FsUtil(description):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(description, into: &buf)
        }
    }
}

extension IrohError: Equatable, Hashable {}

extension IrohError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of events that can be emitted during the live sync progress
 */
public enum LiveEventType {
    /**
     * A local insertion.
     */
    case insertLocal
    /**
     * Received a remote insert.
     */
    case insertRemote
    /**
     * The content of an entry was downloaded and is now available at the local node
     */
    case contentReady
    /**
     * We have a new neighbor in the swarm.
     */
    case neighborUp
    /**
     * We lost a neighbor in the swarm.
     */
    case neighborDown
    /**
     * A set-reconciliation sync finished.
     */
    case syncFinished
}

public struct FfiConverterTypeLiveEventType: FfiConverterRustBuffer {
    typealias SwiftType = LiveEventType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEventType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .insertLocal

        case 2: return .insertRemote

        case 3: return .contentReady

        case 4: return .neighborUp

        case 5: return .neighborDown

        case 6: return .syncFinished

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiveEventType, into buf: inout [UInt8]) {
        switch value {
        case .insertLocal:
            writeInt(&buf, Int32(1))

        case .insertRemote:
            writeInt(&buf, Int32(2))

        case .contentReady:
            writeInt(&buf, Int32(3))

        case .neighborUp:
            writeInt(&buf, Int32(4))

        case .neighborDown:
            writeInt(&buf, Int32(5))

        case .syncFinished:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeLiveEventType_lift(_ buf: RustBuffer) throws -> LiveEventType {
    return try FfiConverterTypeLiveEventType.lift(buf)
}

public func FfiConverterTypeLiveEventType_lower(_ value: LiveEventType) -> RustBuffer {
    return FfiConverterTypeLiveEventType.lower(value)
}

extension LiveEventType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The logging level. See the rust (log crate)[https://docs.rs/log] for more information.
 */
public enum LogLevel {
    case trace
    case debug
    case info
    case warn
    case error
    case off
}

public struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .trace

        case 2: return .debug

        case 3: return .info

        case 4: return .warn

        case 5: return .error

        case 6: return .off

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogLevel, into buf: inout [UInt8]) {
        switch value {
        case .trace:
            writeInt(&buf, Int32(1))

        case .debug:
            writeInt(&buf, Int32(2))

        case .info:
            writeInt(&buf, Int32(3))

        case .warn:
            writeInt(&buf, Int32(4))

        case .error:
            writeInt(&buf, Int32(5))

        case .off:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeLogLevel_lift(_ buf: RustBuffer) throws -> LogLevel {
    return try FfiConverterTypeLogLevel.lift(buf)
}

public func FfiConverterTypeLogLevel_lower(_ value: LogLevel) -> RustBuffer {
    return FfiConverterTypeLogLevel.lower(value)
}

extension LogLevel: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Why we performed a sync exchange
 */
public enum Origin {
    /**
     * public, use a unit variant
     */
    case connect(reason: SyncReason)
    /**
     * A peer connected to us and we accepted the exchange
     */
    case accept
}

public struct FfiConverterTypeOrigin: FfiConverterRustBuffer {
    typealias SwiftType = Origin

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Origin {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .connect(
                reason: FfiConverterTypeSyncReason.read(from: &buf)
            )

        case 2: return .accept

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Origin, into buf: inout [UInt8]) {
        switch value {
        case let .connect(reason):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSyncReason.write(reason, into: &buf)

        case .accept:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeOrigin_lift(_ buf: RustBuffer) throws -> Origin {
    return try FfiConverterTypeOrigin.lift(buf)
}

public func FfiConverterTypeOrigin_lower(_ value: Origin) -> RustBuffer {
    return FfiConverterTypeOrigin.lower(value)
}

extension Origin: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Intended capability for document share tickets
 */
public enum ShareMode {
    /**
     * Read-only access
     */
    case read
    /**
     * Write access
     */
    case write
}

public struct FfiConverterTypeShareMode: FfiConverterRustBuffer {
    typealias SwiftType = ShareMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShareMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .read

        case 2: return .write

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ShareMode, into buf: inout [UInt8]) {
        switch value {
        case .read:
            writeInt(&buf, Int32(1))

        case .write:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeShareMode_lift(_ buf: RustBuffer) throws -> ShareMode {
    return try FfiConverterTypeShareMode.lift(buf)
}

public func FfiConverterTypeShareMode_lower(_ value: ShareMode) -> RustBuffer {
    return FfiConverterTypeShareMode.lower(value)
}

extension ShareMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Type of SocketAddr
 */
public enum SocketAddrType {
    /**
     * Ipv4 SocketAddr
     */
    case v4
    /**
     * Ipv6 SocketAddr
     */
    case v6
}

public struct FfiConverterTypeSocketAddrType: FfiConverterRustBuffer {
    typealias SwiftType = SocketAddrType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .v4

        case 2: return .v6

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SocketAddrType, into buf: inout [UInt8]) {
        switch value {
        case .v4:
            writeInt(&buf, Int32(1))

        case .v6:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSocketAddrType_lift(_ buf: RustBuffer) throws -> SocketAddrType {
    return try FfiConverterTypeSocketAddrType.lift(buf)
}

public func FfiConverterTypeSocketAddrType_lower(_ value: SocketAddrType) -> RustBuffer {
    return FfiConverterTypeSocketAddrType.lower(value)
}

extension SocketAddrType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Fields by which the query can be sorted
 */
public enum SortBy {
    /**
     * Fields by which the query can be sorted
     */
    case keyAuthor
    /**
     * Fields by which the query can be sorted
     */
    case authorKey
}

public struct FfiConverterTypeSortBy: FfiConverterRustBuffer {
    typealias SwiftType = SortBy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortBy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keyAuthor

        case 2: return .authorKey

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortBy, into buf: inout [UInt8]) {
        switch value {
        case .keyAuthor:
            writeInt(&buf, Int32(1))

        case .authorKey:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortBy_lift(_ buf: RustBuffer) throws -> SortBy {
    return try FfiConverterTypeSortBy.lift(buf)
}

public func FfiConverterTypeSortBy_lower(_ value: SortBy) -> RustBuffer {
    return FfiConverterTypeSortBy.lower(value)
}

extension SortBy: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Sort direction
 */
public enum SortDirection {
    /**
     * Sort ascending
     */
    case asc
    /**
     * Sort descending
     */
    case desc
}

public struct FfiConverterTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .asc

        case 2: return .desc

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortDirection, into buf: inout [UInt8]) {
        switch value {
        case .asc:
            writeInt(&buf, Int32(1))

        case .desc:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortDirection_lift(_ buf: RustBuffer) throws -> SortDirection {
    return try FfiConverterTypeSortDirection.lift(buf)
}

public func FfiConverterTypeSortDirection_lower(_ value: SortDirection) -> RustBuffer {
    return FfiConverterTypeSortDirection.lower(value)
}

extension SortDirection: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Why we started a sync request
 */
public enum SyncReason {
    /**
     * Direct join request via API
     */
    case directJoin
    /**
     * Peer showed up as new neighbor in the gossip swarm
     */
    case newNeighbor
    /**
     * We synced after receiving a sync report that indicated news for us
     */
    case syncReport
    /**
     * We received a sync report while a sync was running, so run again afterwars
     */
    case resync
}

public struct FfiConverterTypeSyncReason: FfiConverterRustBuffer {
    typealias SwiftType = SyncReason

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncReason {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .directJoin

        case 2: return .newNeighbor

        case 3: return .syncReport

        case 4: return .resync

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SyncReason, into buf: inout [UInt8]) {
        switch value {
        case .directJoin:
            writeInt(&buf, Int32(1))

        case .newNeighbor:
            writeInt(&buf, Int32(2))

        case .syncReport:
            writeInt(&buf, Int32(3))

        case .resync:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeSyncReason_lift(_ buf: RustBuffer) throws -> SyncReason {
    return try FfiConverterTypeSyncReason.lift(buf)
}

public func FfiConverterTypeSyncReason_lower(_ value: SyncReason) -> RustBuffer {
    return FfiConverterTypeSyncReason.lower(value)
}

extension SyncReason: Equatable, Hashable {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for AddCallback Callback Interface
/**
 * The `progress` method will be called for each `AddProgress` event that is
 * emitted during a `node.blobs_add_from_path`. Use the `AddProgress.type()`
 * method to check the `AddProgressType`
 */
public protocol AddCallback: AnyObject {
    func progress(progress: AddProgress) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceAddCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeProgress(_ swiftCallbackInterface: AddCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.progress(
                progress: FfiConverterTypeAddProgress.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceAddCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: AddCallback
        do {
            cb = try FfiConverterCallbackInterfaceAddCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("AddCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeProgress(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceAddCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_addcallback(foreignCallbackCallbackInterfaceAddCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<AddCallback>()
}

extension FfiConverterCallbackInterfaceAddCallback: FfiConverter {
    typealias SwiftType = AddCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for DocExportFileCallback Callback Interface
/**
 * The `progress` method will be called for each `DocExportProgress` event that is
 * emitted during a `doc.export_file()` call. Use the `DocExportProgress.type()`
 * method to check the `DocExportProgressType`
 */
public protocol DocExportFileCallback: AnyObject {
    func progress(progress: DocExportProgress) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceDocExportFileCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeProgress(_ swiftCallbackInterface: DocExportFileCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.progress(
                progress: FfiConverterTypeDocExportProgress.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceDocExportFileCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: DocExportFileCallback
        do {
            cb = try FfiConverterCallbackInterfaceDocExportFileCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("DocExportFileCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeProgress(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDocExportFileCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_docexportfilecallback(foreignCallbackCallbackInterfaceDocExportFileCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<DocExportFileCallback>()
}

extension FfiConverterCallbackInterfaceDocExportFileCallback: FfiConverter {
    typealias SwiftType = DocExportFileCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for DocImportFileCallback Callback Interface
/**
 * The `progress` method will be called for each `DocImportProgress` event that is
 * emitted during a `doc.import_file()` call. Use the `DocImportProgress.type()`
 * method to check the `DocImportProgressType`
 */
public protocol DocImportFileCallback: AnyObject {
    func progress(progress: DocImportProgress) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceDocImportFileCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeProgress(_ swiftCallbackInterface: DocImportFileCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.progress(
                progress: FfiConverterTypeDocImportProgress.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceDocImportFileCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: DocImportFileCallback
        do {
            cb = try FfiConverterCallbackInterfaceDocImportFileCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("DocImportFileCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeProgress(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDocImportFileCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_docimportfilecallback(foreignCallbackCallbackInterfaceDocImportFileCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<DocImportFileCallback>()
}

extension FfiConverterCallbackInterfaceDocImportFileCallback: FfiConverter {
    typealias SwiftType = DocImportFileCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for DownloadCallback Callback Interface
/**
 * The `progress` method will be called for each `DownloadProgress` event that is emitted during
 * a `node.blobs_download`. Use the `DownloadProgress.type()` method to check the
 * `DownloadProgressType` of the event.
 */
public protocol DownloadCallback: AnyObject {
    func progress(progress: DownloadProgress) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceDownloadCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeProgress(_ swiftCallbackInterface: DownloadCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.progress(
                progress: FfiConverterTypeDownloadProgress.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceDownloadCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: DownloadCallback
        do {
            cb = try FfiConverterCallbackInterfaceDownloadCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("DownloadCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeProgress(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceDownloadCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_downloadcallback(foreignCallbackCallbackInterfaceDownloadCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<DownloadCallback>()
}

extension FfiConverterCallbackInterfaceDownloadCallback: FfiConverter {
    typealias SwiftType = DownloadCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

// Declaration and FfiConverters for SubscribeCallback Callback Interface
/**
 * The `progress` method will be called for each `SubscribeProgress` event that is
 * emitted during a `node.doc_subscribe`. Use the `SubscribeProgress.type()`
 * method to check the `LiveEvent`
 */
public protocol SubscribeCallback: AnyObject {
    func event(event: LiveEvent) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSubscribeCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeEvent(_ swiftCallbackInterface: SubscribeCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.event(
                event: FfiConverterTypeLiveEvent.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceSubscribeCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: SubscribeCallback
        do {
            cb = try FfiConverterCallbackInterfaceSubscribeCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SubscribeCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeEvent(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSubscribeCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_subscribecallback(foreignCallbackCallbackInterfaceSubscribeCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<SubscribeCallback>()
}

extension FfiConverterCallbackInterfaceSubscribeCallback: FfiConverter {
    typealias SwiftType = SubscribeCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = Entry?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEntry.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEntry.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRequestToken: FfiConverterRustBuffer {
    typealias SwiftType = RequestToken?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRequestToken.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRequestToken.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConnectionInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConnectionInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeQueryOptions: FfiConverterRustBuffer {
    typealias SwiftType = QueryOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeQueryOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeQueryOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceDocExportFileCallback: FfiConverterRustBuffer {
    typealias SwiftType = DocExportFileCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDocExportFileCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDocExportFileCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionCallbackInterfaceDocImportFileCallback: FfiConverterRustBuffer {
    typealias SwiftType = DocImportFileCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDocImportFileCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDocImportFileCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAuthorId: FfiConverterRustBuffer {
    typealias SwiftType = [AuthorId]

    public static func write(_ value: [AuthorId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthorId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthorId] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthorId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAuthorId.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeDirectAddrInfo: FfiConverterRustBuffer {
    typealias SwiftType = [DirectAddrInfo]

    public static func write(_ value: [DirectAddrInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDirectAddrInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DirectAddrInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [DirectAddrInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDirectAddrInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = [Entry]

    public static func write(_ value: [Entry], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEntry.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Entry] {
        let len: Int32 = try readInt(&buf)
        var seq = [Entry]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeEntry.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeHash: FfiConverterRustBuffer {
    typealias SwiftType = [Hash]

    public static func write(_ value: [Hash], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHash.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Hash] {
        let len: Int32 = try readInt(&buf)
        var seq = [Hash]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeHash.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNodeAddr: FfiConverterRustBuffer {
    typealias SwiftType = [NodeAddr]

    public static func write(_ value: [NodeAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNodeAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NodeAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [NodeAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNodeAddr.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeSocketAddr: FfiConverterRustBuffer {
    typealias SwiftType = [SocketAddr]

    public static func write(_ value: [SocketAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSocketAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SocketAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [SocketAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeSocketAddr.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeBlobListCollectionsResponse: FfiConverterRustBuffer {
    typealias SwiftType = [BlobListCollectionsResponse]

    public static func write(_ value: [BlobListCollectionsResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBlobListCollectionsResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BlobListCollectionsResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [BlobListCollectionsResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeBlobListCollectionsResponse.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeBlobListIncompleteResponse: FfiConverterRustBuffer {
    typealias SwiftType = [BlobListIncompleteResponse]

    public static func write(_ value: [BlobListIncompleteResponse], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBlobListIncompleteResponse.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BlobListIncompleteResponse] {
        let len: Int32 = try readInt(&buf)
        var seq = [BlobListIncompleteResponse]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeBlobListIncompleteResponse.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ConnectionInfo]

    public static func write(_ value: [ConnectionInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeConnectionInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ConnectionInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [ConnectionInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeConnectionInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNamespaceAndCapability: FfiConverterRustBuffer {
    typealias SwiftType = [NamespaceAndCapability]

    public static func write(_ value: [NamespaceAndCapability], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNamespaceAndCapability.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NamespaceAndCapability] {
        let len: Int32 = try readInt(&buf)
        var seq = [NamespaceAndCapability]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNamespaceAndCapability.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeCounterStats: FfiConverterRustBuffer {
    public static func write(_ value: [String: CounterStats], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeCounterStats.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: CounterStats] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: CounterStats]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeCounterStats.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Helper function that translates a key that was derived from the [`path_to_key`] function back
 * into a path.
 *
 * If `prefix` exists, it will be stripped before converting back to a path
 * If `root` exists, will add the root as a parent to the created path
 * Removes any null byte that has been appened to the key
 */
public func keyToPath(key: Data, prefix: String?, root: String?) throws -> String {
    return try FfiConverterString.lift(
        rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_func_key_to_path(
                FfiConverterData.lower(key),
                FfiConverterOptionString.lower(prefix),
                FfiConverterOptionString.lower(root), $0
            )
        }
    )
}

/**
 * Helper function that creates a document key from a canonicalized path, removing the `root` and adding the `prefix`, if they exist
 *
 * Appends the null byte to the end of the key.
 */
public func pathToKey(path: String, prefix: String?, root: String?) throws -> Data {
    return try FfiConverterData.lift(
        rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_func_path_to_key(
                FfiConverterString.lower(path),
                FfiConverterOptionString.lower(prefix),
                FfiConverterOptionString.lower(root), $0
            )
        }
    )
}

/**
 * Set the logging level.
 */
public func setLogLevel(level: LogLevel) {
    try! rustCall {
        uniffi_iroh_fn_func_set_log_level(
            FfiConverterTypeLogLevel.lower(level), $0
        )
    }
}

/**
 * Initialize the global metrics collection.
 */
public func startMetricsCollection() throws {
    try rustCallWithError(FfiConverterTypeIrohError.lift) {
        uniffi_iroh_fn_func_start_metrics_collection($0)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_iroh_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_iroh_checksum_func_key_to_path() != 1201 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_path_to_key() != 27769 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_set_log_level() != 52296 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_start_metrics_collection() != 17691 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_abort() != 64540 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_all_done() != 24629 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_done() != 65369 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_found() != 14508 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_progress() != 54075 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_type() != 63416 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_equal() != 33867 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_to_string() != 42389 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_close() != 23013 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_del() != 22285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_export_file() != 34185 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_many() != 58857 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_one() != 25151 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_id() != 34677 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_import_file() != 33349 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_leave() != 55816 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_read_to_bytes() != 37830 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_bytes() != 15024 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_hash() != 20311 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_share() != 28913 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_size() != 27875 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_start_sync() != 54158 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_status() != 59550 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_subscribe() != 2866 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_abort() != 39226 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_found() != 11254 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_progress() != 8859 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_type() != 43844 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_abort() != 45779 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_all_done() != 7478 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_found() != 55008 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_ingest_done() != 37186 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_progress() != 35401 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_type() != 49227 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docticket_equal() != 14909 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docticket_to_string() != 22814 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_abort() != 13741 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_done() != 54270 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_export() != 48739 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_export_progress() != 42097 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_found() != 13482 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_found_hash_seq() != 64232 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_network_done() != 49397 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_progress() != 7204 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_type() != 8349 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_author() != 26124 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_content_hash() != 39306 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_content_len() != 60107 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_key() != 19122 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_namespace() != 41306 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_as_cid_bytes() != 25019 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_equal() != 65301 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_bytes() != 29465 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_hex() != 27622 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_string() != 61408 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_equal() != 51523 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_octets() != 17752 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_to_string() != 5658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_equal() != 26037 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_segments() != 41182 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_to_string() != 46637 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_create() != 31148 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_list() != 12499 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_add_bytes() != 20668 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_add_from_path() != 38440 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_delete_blob() != 24766 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_download() != 50921 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list() != 49039 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list_collections() != 28497 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list_incomplete() != 39285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_read_to_bytes() != 6512 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_size() != 52941 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_write_to_path() != 9029 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connection_info() != 39895 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connections() != 37352 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_create() != 64213 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_join() != 30773 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_list() != 44252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_node_id() != 31962 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_stats() != 16158 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_content_ready() != 15237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_local() != 431 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_remote() != 17302 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_down() != 154 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_up() != 25727 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_sync_finished() != 14329 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_type() != 35533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_namespaceid_equal() != 18805 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_namespaceid_to_string() != 63715 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_derp_region() != 62080 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_direct_addresses() != 20857 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_equal() != 45841 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_equal() != 10645 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_fmt_short() != 33947 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_bytes() != 54334 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_string() != 48998 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_limit() != 6405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_offset() != 5309 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_requesttoken_as_bytes() != 10828 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_requesttoken_equal() != 58929 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_as_ipv4() != 50860 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_as_ipv6() != 40970 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_equal() != 1891 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_type() != 50972 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_equal() != 51550 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_ip() != 54004 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_port() != 34504 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_to_string() != 43672 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_equal() != 37651 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_ip() != 49803 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_port() != 39562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_to_string() != 14154 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_tag_equal() != 62383 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_tag_to_bytes() != 33917 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_tag_to_string() != 65488 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_authorid_from_string() != 14210 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_blobdownloadrequest_new() != 24971 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_docticket_from_string() != 40262 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadlocation_external() != 45372 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadlocation_internal() != 751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_from_bytes() != 19134 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_from_cid_bytes() != 58235 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_from_string() != 41770 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_new() != 22809 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv4addr_from_string() != 60777 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv4addr_new() != 51336 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv6addr_from_string() != 24533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv6addr_new() != 18364 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_irohnode_new() != 22562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_namespaceid_from_string() != 47535 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_nodeaddr_new() != 42954 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_bytes() != 65104 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_string() != 18975 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_all() != 18362 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author() != 6757 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author_key_exact() != 21618 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author_key_prefix() != 63753 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_exact() != 32100 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_prefix() != 44412 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_single_latest_per_key() != 42778 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_requesttoken_from_string() != 49791 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_requesttoken_generate() != 37061 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_requesttoken_new() != 37150 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_settagoption_auto() != 13040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_settagoption_named() != 24631 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddr_from_ipv4() != 48670 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddr_from_ipv6() != 45955 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv4_from_string() != 16157 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv4_new() != 12651 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv6_from_string() != 22443 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv6_new() != 46347 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_tag_from_bytes() != 48807 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_tag_from_string() != 40751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_wrapoption_no_wrap() != 60952 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_wrapoption_wrap() != 59295 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addcallback_progress() != 42266 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportfilecallback_progress() != 20951 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportfilecallback_progress() != 18783 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadcallback_progress() != 64403 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_subscribecallback_event() != 18725 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
