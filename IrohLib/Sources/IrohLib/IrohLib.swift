// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(Iroh)
    import Iroh
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_iroh_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_iroh_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

private struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}

private struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}

/**
 * The `progress` method will be called for each `AddProgress` event that is
 * emitted during a `node.blobs_add_from_path`. Use the `AddProgress.type()`
 * method to check the `AddProgressType`
 */
public protocol AddCallback: AnyObject {
    func progress(progress: AddProgress) throws
}

/**
 * The `progress` method will be called for each `AddProgress` event that is
 * emitted during a `node.blobs_add_from_path`. Use the `AddProgress.type()`
 * method to check the `AddProgressType`
 */
open class AddCallbackImpl:
    AddCallback
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_addcallback(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_addcallback(pointer, $0) }
    }

    open func progress(progress: AddProgress) throws { try rustCallWithError(FfiConverterTypeCallbackError.lift) {
        uniffi_iroh_fn_method_addcallback_progress(self.uniffiClonePointer(),
                                                   FfiConverterTypeAddProgress.lower(progress), $0)
    }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceAddCallback {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceAddCallback = .init(
        progress: { (
            uniffiHandle: UInt64,
            progress: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeAddCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progress(
                    progress: FfiConverterTypeAddProgress.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCallbackError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeAddCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface AddCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitAddCallback() {
    uniffi_iroh_fn_init_callback_vtable_addcallback(&UniffiCallbackInterfaceAddCallback.vtable)
}

public struct FfiConverterTypeAddCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<AddCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddCallback {
        return AddCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAddCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddCallback {
    return try FfiConverterTypeAddCallback.lift(pointer)
}

public func FfiConverterTypeAddCallback_lower(_ value: AddCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddCallback.lower(value)
}

/**
 * Progress updates for the add operation.
 */
public protocol AddProgressProtocol: AnyObject {
    /**
     * Return the `AddProgressAbort`
     */
    func asAbort() -> AddProgressAbort

    /**
     * Return the `AddAllDone`
     */
    func asAllDone() -> AddProgressAllDone

    /**
     * Return the `AddProgressDone` event
     */
    func asDone() -> AddProgressDone

    /**
     * Return the `AddProgressFound` event
     */
    func asFound() -> AddProgressFound

    /**
     * Return the `AddProgressProgress` event
     */
    func asProgress() -> AddProgressProgress

    /**
     * Get the type of event
     */
    func type() -> AddProgressType
}

/**
 * Progress updates for the add operation.
 */
open class AddProgress:
    AddProgressProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_addprogress(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_addprogress(pointer, $0) }
    }

    /**
     * Return the `AddProgressAbort`
     */
    open func asAbort() -> AddProgressAbort {
        return try! FfiConverterTypeAddProgressAbort.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_as_abort(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `AddAllDone`
     */
    open func asAllDone() -> AddProgressAllDone {
        return try! FfiConverterTypeAddProgressAllDone.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_as_all_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `AddProgressDone` event
     */
    open func asDone() -> AddProgressDone {
        return try! FfiConverterTypeAddProgressDone.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_as_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `AddProgressFound` event
     */
    open func asFound() -> AddProgressFound {
        return try! FfiConverterTypeAddProgressFound.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_as_found(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `AddProgressProgress` event
     */
    open func asProgress() -> AddProgressProgress {
        return try! FfiConverterTypeAddProgressProgress.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_as_progress(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the type of event
     */
    open func type() -> AddProgressType {
        return try! FfiConverterTypeAddProgressType.lift(try! rustCall {
            uniffi_iroh_fn_method_addprogress_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeAddProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AddProgress

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AddProgress {
        return AddProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AddProgress) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AddProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAddProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> AddProgress {
    return try FfiConverterTypeAddProgress.lift(pointer)
}

public func FfiConverterTypeAddProgress_lower(_ value: AddProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAddProgress.lower(value)
}

/**
 * Author key to insert entries in a document
 *
 * Internally, an author is a `SigningKey` which is used to sign entries.
 */
public protocol AuthorProtocol: AnyObject {
    /**
     * Get the [`AuthorId`] of this Author
     */
    func id() -> AuthorId

    /**
     * Return the AuthorId as a string
     */
    func toString() -> String
}

/**
 * Author key to insert entries in a document
 *
 * Internally, an author is a `SigningKey` which is used to sign entries.
 */
open class Author:
    AuthorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_author(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_author(pointer, $0) }
    }

    /**
     * Get an [`Author`] from a String
     */
    public static func fromString(str: String) throws -> Author {
        return try FfiConverterTypeAuthor.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_author_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Get the [`AuthorId`] of this Author
     */
    open func id() -> AuthorId {
        return try! FfiConverterTypeAuthorId.lift(try! rustCall {
            uniffi_iroh_fn_method_author_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the AuthorId as a string
     */
    open func toString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_author_to_string(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeAuthor: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Author

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Author {
        return Author(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Author) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Author {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Author, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAuthor_lift(_ pointer: UnsafeMutableRawPointer) throws -> Author {
    return try FfiConverterTypeAuthor.lift(pointer)
}

public func FfiConverterTypeAuthor_lower(_ value: Author) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthor.lower(value)
}

/**
 * Identifier for an [`Author`]
 */
public protocol AuthorIdProtocol: AnyObject {
    /**
     * Returns true when both AuthorId's have the same value
     */
    func equal(other: AuthorId) -> Bool

    /**
     * Return the AuthorId as a string
     */
    func toString() -> String
}

/**
 * Identifier for an [`Author`]
 */
open class AuthorId:
    AuthorIdProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_authorid(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_authorid(pointer, $0) }
    }

    /**
     * Get an [`AuthorId`] from a String
     */
    public static func fromString(str: String) throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_authorid_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    /**
     * Returns true when both AuthorId's have the same value
     */
    open func equal(other: AuthorId) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_authorid_equal(self.uniffiClonePointer(),
                                                 FfiConverterTypeAuthorId.lower(other), $0)
        })
    }

    /**
     * Return the AuthorId as a string
     */
    open func toString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_authorid_to_string(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeAuthorId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthorId

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
        return AuthorId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthorId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthorId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeAuthorId_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
    return try FfiConverterTypeAuthorId.lift(pointer)
}

public func FfiConverterTypeAuthorId_lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthorId.lower(value)
}

/**
 * A request to the node to download and share the data specified by the hash.
 */
public protocol BlobDownloadOptionsProtocol: AnyObject {}

/**
 * A request to the node to download and share the data specified by the hash.
 */
open class BlobDownloadOptions:
    BlobDownloadOptionsProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_blobdownloadoptions(self.pointer, $0) }
    }

    public convenience init(format: BlobFormat, node: NodeAddr, tag: SetTagOption) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
                uniffi_iroh_fn_constructor_blobdownloadoptions_new(
                    FfiConverterTypeBlobFormat.lower(format),
                    FfiConverterTypeNodeAddr.lower(node),
                    FfiConverterTypeSetTagOption.lower(tag), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_blobdownloadoptions(pointer, $0) }
    }
}

public struct FfiConverterTypeBlobDownloadOptions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BlobDownloadOptions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobDownloadOptions {
        return BlobDownloadOptions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BlobDownloadOptions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobDownloadOptions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BlobDownloadOptions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeBlobDownloadOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobDownloadOptions {
    return try FfiConverterTypeBlobDownloadOptions.lift(pointer)
}

public func FfiConverterTypeBlobDownloadOptions_lower(_ value: BlobDownloadOptions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBlobDownloadOptions.lower(value)
}

/**
 * A token containing everything to get a file from the provider.
 *
 * It is a single item which can be easily serialized and deserialized.
 */
public protocol BlobTicketProtocol: AnyObject {
    /**
     * Turn this ticket into parameters for blobs_download.
     */
    func asDownloadOptions() -> BlobDownloadOptions

    /**
     * The format of the blob.
     */
    func format() -> BlobFormat

    /**
     * The hash to retrieve.
     */
    func hash() -> Hash

    /**
     * The provider to get a file from.
     */
    func nodeAddr() -> NodeAddr
}

/**
 * A token containing everything to get a file from the provider.
 *
 * It is a single item which can be easily serialized and deserialized.
 */
open class BlobTicket:
    BlobTicketProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_blobticket(self.pointer, $0) }
    }

    public convenience init(ticket: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
                uniffi_iroh_fn_constructor_blobticket_new(
                    FfiConverterString.lower(ticket), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_blobticket(pointer, $0) }
    }

    /**
     * Turn this ticket into parameters for blobs_download.
     */
    open func asDownloadOptions() -> BlobDownloadOptions {
        return try! FfiConverterTypeBlobDownloadOptions.lift(try! rustCall {
            uniffi_iroh_fn_method_blobticket_as_download_options(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The format of the blob.
     */
    open func format() -> BlobFormat {
        return try! FfiConverterTypeBlobFormat.lift(try! rustCall {
            uniffi_iroh_fn_method_blobticket_format(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The hash to retrieve.
     */
    open func hash() -> Hash {
        return try! FfiConverterTypeHash.lift(try! rustCall {
            uniffi_iroh_fn_method_blobticket_hash(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The provider to get a file from.
     */
    open func nodeAddr() -> NodeAddr {
        return try! FfiConverterTypeNodeAddr.lift(try! rustCall {
            uniffi_iroh_fn_method_blobticket_node_addr(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeBlobTicket: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BlobTicket

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobTicket {
        return BlobTicket(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BlobTicket) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobTicket {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BlobTicket, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeBlobTicket_lift(_ pointer: UnsafeMutableRawPointer) throws -> BlobTicket {
    return try FfiConverterTypeBlobTicket.lift(pointer)
}

public func FfiConverterTypeBlobTicket_lower(_ value: BlobTicket) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBlobTicket.lower(value)
}

/**
 * A collection of blobs
 *
 * Note that the format is subject to change.
 */
public protocol CollectionProtocol: AnyObject {
    /**
     * Returns a [`Link`] (the name and the hash), for each blob in the collection.
     */
    func blobs() throws -> [LinkAndName]

    /**
     * Check if the collection is empty
     */
    func isEmpty() throws -> Bool

    /**
     * Returns the number of blobs in this collection
     */
    func len() throws -> UInt64

    /**
     * Get the links to the blobs in this collection
     */
    func links() throws -> [Hash]

    /**
     * Get the names of the blobs in this collection
     */
    func names() throws -> [String]

    /**
     * Add the given blob to the collection
     */
    func push(name: String, hash: Hash) throws
}

/**
 * A collection of blobs
 *
 * Note that the format is subject to change.
 */
open class Collection:
    CollectionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_collection(self.pointer, $0) }
    }

    /**
     * Create a new empty collection
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_iroh_fn_constructor_collection_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_collection(pointer, $0) }
    }

    /**
     * Returns a [`Link`] (the name and the hash), for each blob in the collection.
     */
    open func blobs() throws -> [LinkAndName] {
        return try FfiConverterSequenceTypeLinkAndName.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_collection_blobs(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Check if the collection is empty
     */
    open func isEmpty() throws -> Bool {
        return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_collection_is_empty(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Returns the number of blobs in this collection
     */
    open func len() throws -> UInt64 {
        return try FfiConverterUInt64.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_collection_len(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the links to the blobs in this collection
     */
    open func links() throws -> [Hash] {
        return try FfiConverterSequenceTypeHash.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_collection_links(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the names of the blobs in this collection
     */
    open func names() throws -> [String] {
        return try FfiConverterSequenceString.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_collection_names(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Add the given blob to the collection
     */
    open func push(name: String, hash: Hash) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_collection_push(self.uniffiClonePointer(),
                                              FfiConverterString.lower(name),
                                              FfiConverterTypeHash.lower(hash), $0)
    }
    }
}

public struct FfiConverterTypeCollection: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Collection

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Collection {
        return Collection(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Collection) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Collection {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Collection, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeCollection_lift(_ pointer: UnsafeMutableRawPointer) throws -> Collection {
    return try FfiConverterTypeCollection.lift(pointer)
}

public func FfiConverterTypeCollection_lower(_ value: Collection) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCollection.lower(value)
}

/**
 * The type of connection we have to the node
 */
public protocol ConnectionTypeProtocol: AnyObject {
    /**
     * Return the socket address if this is a direct connection
     */
    func asDirect() -> String

    /**
     * Return the socket address and relay url if this is a mixed connection
     */
    func asMixed() -> ConnectionTypeMixed

    /**
     * Return the relay url if this is a relay connection
     */
    func asRelay() -> String

    /**
     * Whether connection is direct, relay, mixed, or none
     */
    func type() -> ConnType
}

/**
 * The type of connection we have to the node
 */
open class ConnectionType:
    ConnectionTypeProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_connectiontype(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_connectiontype(pointer, $0) }
    }

    /**
     * Return the socket address if this is a direct connection
     */
    open func asDirect() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_connectiontype_as_direct(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the socket address and relay url if this is a mixed connection
     */
    open func asMixed() -> ConnectionTypeMixed {
        return try! FfiConverterTypeConnectionTypeMixed.lift(try! rustCall {
            uniffi_iroh_fn_method_connectiontype_as_mixed(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the relay url if this is a relay connection
     */
    open func asRelay() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_connectiontype_as_relay(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Whether connection is direct, relay, mixed, or none
     */
    open func type() -> ConnType {
        return try! FfiConverterTypeConnType.lift(try! rustCall {
            uniffi_iroh_fn_method_connectiontype_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeConnectionType: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ConnectionType

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionType {
        return ConnectionType(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ConnectionType) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionType {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ConnectionType, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeConnectionType_lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionType {
    return try FfiConverterTypeConnectionType.lift(pointer)
}

public func FfiConverterTypeConnectionType_lower(_ value: ConnectionType) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConnectionType.lower(value)
}

/**
 * Information about a direct address.
 */
public protocol DirectAddrInfoProtocol: AnyObject {
    /**
     * Get the reported address
     */
    func addr() -> String

    /**
     * Get the last control message received by this node
     */
    func lastControl() -> LatencyAndControlMsg?

    /**
     * Get how long ago the last payload message was received for this node
     */
    func lastPayload() -> TimeInterval?

    /**
     * Get the reported latency, if it exists
     */
    func latency() -> TimeInterval?
}

/**
 * Information about a direct address.
 */
open class DirectAddrInfo:
    DirectAddrInfoProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_directaddrinfo(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_directaddrinfo(pointer, $0) }
    }

    /**
     * Get the reported address
     */
    open func addr() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_directaddrinfo_addr(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the last control message received by this node
     */
    open func lastControl() -> LatencyAndControlMsg? {
        return try! FfiConverterOptionTypeLatencyAndControlMsg.lift(try! rustCall {
            uniffi_iroh_fn_method_directaddrinfo_last_control(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get how long ago the last payload message was received for this node
     */
    open func lastPayload() -> TimeInterval? {
        return try! FfiConverterOptionDuration.lift(try! rustCall {
            uniffi_iroh_fn_method_directaddrinfo_last_payload(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the reported latency, if it exists
     */
    open func latency() -> TimeInterval? {
        return try! FfiConverterOptionDuration.lift(try! rustCall {
            uniffi_iroh_fn_method_directaddrinfo_latency(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeDirectAddrInfo: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DirectAddrInfo

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
        return DirectAddrInfo(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DirectAddrInfo {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DirectAddrInfo, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDirectAddrInfo_lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
    return try FfiConverterTypeDirectAddrInfo.lift(pointer)
}

public func FfiConverterTypeDirectAddrInfo_lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDirectAddrInfo.lower(value)
}

/**
 * A representation of a mutable, synchronizable key-value store.
 */
public protocol DocProtocol: AnyObject {
    /**
     * Close the document.
     */
    func close() throws

    /**
     * Delete entries that match the given `author` and key `prefix`.
     *
     * This inserts an empty entry with the key set to `prefix`, effectively clearing all other
     * entries whose key starts with or is equal to the given `prefix`.
     *
     * Returns the number of entries deleted.
     */
    func del(authorId: AuthorId, prefix: Data) throws -> UInt64

    /**
     * Export an entry as a file to a given absolute path
     */
    func exportFile(entry: Entry, path: String, cb: DocExportFileCallback?) throws

    /**
     * Get the download policy for this document
     */
    func getDownloadPolicy() throws -> DownloadPolicy

    /**
     * Get an entry for a key and author.
     *
     * Optionally also get the entry if it is empty (i.e. a deletion marker)
     */
    func getExact(author: AuthorId, key: Data, includeEmpty: Bool) throws -> Entry?

    /**
     * Get entries.
     *
     * Note: this allocates for each `Entry`, if you have many `Entry`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    func getMany(query: Query) throws -> [Entry]

    /**
     * Get the latest entry for a key and author.
     */
    func getOne(query: Query) throws -> Entry?

    /**
     * Get the document id of this doc.
     */
    func id() -> String

    /**
     * Add an entry from an absolute file path
     */
    func importFile(author: AuthorId, key: Data, path: String, inPlace: Bool, cb: DocImportFileCallback?) throws

    /**
     * Stop the live sync for this document.
     */
    func leave() throws

    /**
     * Set the content of a key to a byte array.
     */
    func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash

    /**
     * Set the download policy for this document
     */
    func setDownloadPolicy(policy: DownloadPolicy) throws

    /**
     * Set an entries on the doc via its key, hash, and size.
     */
    func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws

    /**
     * Share this document with peers over a ticket.
     */
    func share(mode: ShareMode, addrOptions: AddrInfoOptions) throws -> String

    /**
     * Start to sync this document with a list of peers.
     */
    func startSync(peers: [NodeAddr]) throws

    /**
     * Get status info for this document
     */
    func status() throws -> OpenState

    /**
     * Subscribe to events for this document.
     */
    func subscribe(cb: SubscribeCallback) throws
}

/**
 * A representation of a mutable, synchronizable key-value store.
 */
open class Doc:
    DocProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_doc(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_doc(pointer, $0) }
    }

    /**
     * Close the document.
     */
    open func close() throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_close(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Delete entries that match the given `author` and key `prefix`.
     *
     * This inserts an empty entry with the key set to `prefix`, effectively clearing all other
     * entries whose key starts with or is equal to the given `prefix`.
     *
     * Returns the number of entries deleted.
     */
    open func del(authorId: AuthorId, prefix: Data) throws -> UInt64 {
        return try FfiConverterUInt64.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_del(self.uniffiClonePointer(),
                                          FfiConverterTypeAuthorId.lower(authorId),
                                          FfiConverterData.lower(prefix), $0)
        })
    }

    /**
     * Export an entry as a file to a given absolute path
     */
    open func exportFile(entry: Entry, path: String, cb: DocExportFileCallback?) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_export_file(self.uniffiClonePointer(),
                                              FfiConverterTypeEntry.lower(entry),
                                              FfiConverterString.lower(path),
                                              FfiConverterOptionTypeDocExportFileCallback.lower(cb), $0)
    }
    }

    /**
     * Get the download policy for this document
     */
    open func getDownloadPolicy() throws -> DownloadPolicy {
        return try FfiConverterTypeDownloadPolicy.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_get_download_policy(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get an entry for a key and author.
     *
     * Optionally also get the entry if it is empty (i.e. a deletion marker)
     */
    open func getExact(author: AuthorId, key: Data, includeEmpty: Bool) throws -> Entry? {
        return try FfiConverterOptionTypeEntry.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_get_exact(self.uniffiClonePointer(),
                                                FfiConverterTypeAuthorId.lower(author),
                                                FfiConverterData.lower(key),
                                                FfiConverterBool.lower(includeEmpty), $0)
        })
    }

    /**
     * Get entries.
     *
     * Note: this allocates for each `Entry`, if you have many `Entry`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    open func getMany(query: Query) throws -> [Entry] {
        return try FfiConverterSequenceTypeEntry.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_get_many(self.uniffiClonePointer(),
                                               FfiConverterTypeQuery.lower(query), $0)
        })
    }

    /**
     * Get the latest entry for a key and author.
     */
    open func getOne(query: Query) throws -> Entry? {
        return try FfiConverterOptionTypeEntry.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_get_one(self.uniffiClonePointer(),
                                              FfiConverterTypeQuery.lower(query), $0)
        })
    }

    /**
     * Get the document id of this doc.
     */
    open func id() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_doc_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Add an entry from an absolute file path
     */
    open func importFile(author: AuthorId, key: Data, path: String, inPlace: Bool, cb: DocImportFileCallback?) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_import_file(self.uniffiClonePointer(),
                                              FfiConverterTypeAuthorId.lower(author),
                                              FfiConverterData.lower(key),
                                              FfiConverterString.lower(path),
                                              FfiConverterBool.lower(inPlace),
                                              FfiConverterOptionTypeDocImportFileCallback.lower(cb), $0)
    }
    }

    /**
     * Stop the live sync for this document.
     */
    open func leave() throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_leave(self.uniffiClonePointer(), $0)
    }
    }

    /**
     * Set the content of a key to a byte array.
     */
    open func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash {
        return try FfiConverterTypeHash.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_set_bytes(self.uniffiClonePointer(),
                                                FfiConverterTypeAuthorId.lower(author),
                                                FfiConverterData.lower(key),
                                                FfiConverterData.lower(value), $0)
        })
    }

    /**
     * Set the download policy for this document
     */
    open func setDownloadPolicy(policy: DownloadPolicy) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_set_download_policy(self.uniffiClonePointer(),
                                                      FfiConverterTypeDownloadPolicy.lower(policy), $0)
    }
    }

    /**
     * Set an entries on the doc via its key, hash, and size.
     */
    open func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_set_hash(self.uniffiClonePointer(),
                                           FfiConverterTypeAuthorId.lower(author),
                                           FfiConverterData.lower(key),
                                           FfiConverterTypeHash.lower(hash),
                                           FfiConverterUInt64.lower(size), $0)
    }
    }

    /**
     * Share this document with peers over a ticket.
     */
    open func share(mode: ShareMode, addrOptions: AddrInfoOptions) throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_share(self.uniffiClonePointer(),
                                            FfiConverterTypeShareMode.lower(mode),
                                            FfiConverterTypeAddrInfoOptions.lower(addrOptions), $0)
        })
    }

    /**
     * Start to sync this document with a list of peers.
     */
    open func startSync(peers: [NodeAddr]) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_start_sync(self.uniffiClonePointer(),
                                             FfiConverterSequenceTypeNodeAddr.lower(peers), $0)
    }
    }

    /**
     * Get status info for this document
     */
    open func status() throws -> OpenState {
        return try FfiConverterTypeOpenState.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_doc_status(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Subscribe to events for this document.
     */
    open func subscribe(cb: SubscribeCallback) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_doc_subscribe(self.uniffiClonePointer(),
                                            FfiConverterTypeSubscribeCallback.lower(cb), $0)
    }
    }
}

public struct FfiConverterTypeDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Doc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
        return Doc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Doc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Doc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Doc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
    return try FfiConverterTypeDoc.lift(pointer)
}

public func FfiConverterTypeDoc_lower(_ value: Doc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDoc.lower(value)
}

/**
 * The `progress` method will be called for each `DocExportProgress` event that is
 * emitted during a `doc.export_file()` call. Use the `DocExportProgress.type()`
 * method to check the `DocExportProgressType`
 */
public protocol DocExportFileCallback: AnyObject {
    func progress(progress: DocExportProgress) throws
}

/**
 * The `progress` method will be called for each `DocExportProgress` event that is
 * emitted during a `doc.export_file()` call. Use the `DocExportProgress.type()`
 * method to check the `DocExportProgressType`
 */
open class DocExportFileCallbackImpl:
    DocExportFileCallback
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_docexportfilecallback(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_docexportfilecallback(pointer, $0) }
    }

    open func progress(progress: DocExportProgress) throws { try rustCallWithError(FfiConverterTypeCallbackError.lift) {
        uniffi_iroh_fn_method_docexportfilecallback_progress(self.uniffiClonePointer(),
                                                             FfiConverterTypeDocExportProgress.lower(progress), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceDocExportFileCallback {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceDocExportFileCallback = .init(
        progress: { (
            uniffiHandle: UInt64,
            progress: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeDocExportFileCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progress(
                    progress: FfiConverterTypeDocExportProgress.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCallbackError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeDocExportFileCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface DocExportFileCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitDocExportFileCallback() {
    uniffi_iroh_fn_init_callback_vtable_docexportfilecallback(&UniffiCallbackInterfaceDocExportFileCallback.vtable)
}

public struct FfiConverterTypeDocExportFileCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<DocExportFileCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocExportFileCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportFileCallback {
        return DocExportFileCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocExportFileCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportFileCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocExportFileCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDocExportFileCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportFileCallback {
    return try FfiConverterTypeDocExportFileCallback.lift(pointer)
}

public func FfiConverterTypeDocExportFileCallback_lower(_ value: DocExportFileCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocExportFileCallback.lower(value)
}

/**
 * Progress updates for the doc import file operation.
 */
public protocol DocExportProgressProtocol: AnyObject {
    /**
     * Return the `DocExportProgressAbort`
     */
    func asAbort() -> DocExportProgressAbort

    /**
     * Return the `DocExportProgressFound` event
     */
    func asFound() -> DocExportProgressFound

    /**
     * Return the `DocExportProgressProgress` event
     */
    func asProgress() -> DocExportProgressProgress

    /**
     * Get the type of event
     */
    func type() -> DocExportProgressType
}

/**
 * Progress updates for the doc import file operation.
 */
open class DocExportProgress:
    DocExportProgressProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_docexportprogress(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_docexportprogress(pointer, $0) }
    }

    /**
     * Return the `DocExportProgressAbort`
     */
    open func asAbort() -> DocExportProgressAbort {
        return try! FfiConverterTypeDocExportProgressAbort.lift(try! rustCall {
            uniffi_iroh_fn_method_docexportprogress_as_abort(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocExportProgressFound` event
     */
    open func asFound() -> DocExportProgressFound {
        return try! FfiConverterTypeDocExportProgressFound.lift(try! rustCall {
            uniffi_iroh_fn_method_docexportprogress_as_found(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocExportProgressProgress` event
     */
    open func asProgress() -> DocExportProgressProgress {
        return try! FfiConverterTypeDocExportProgressProgress.lift(try! rustCall {
            uniffi_iroh_fn_method_docexportprogress_as_progress(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the type of event
     */
    open func type() -> DocExportProgressType {
        return try! FfiConverterTypeDocExportProgressType.lift(try! rustCall {
            uniffi_iroh_fn_method_docexportprogress_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeDocExportProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocExportProgress

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportProgress {
        return DocExportProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocExportProgress) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocExportProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDocExportProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocExportProgress {
    return try FfiConverterTypeDocExportProgress.lift(pointer)
}

public func FfiConverterTypeDocExportProgress_lower(_ value: DocExportProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocExportProgress.lower(value)
}

/**
 * The `progress` method will be called for each `DocImportProgress` event that is
 * emitted during a `doc.import_file()` call. Use the `DocImportProgress.type()`
 * method to check the `DocImportProgressType`
 */
public protocol DocImportFileCallback: AnyObject {
    func progress(progress: DocImportProgress) throws
}

/**
 * The `progress` method will be called for each `DocImportProgress` event that is
 * emitted during a `doc.import_file()` call. Use the `DocImportProgress.type()`
 * method to check the `DocImportProgressType`
 */
open class DocImportFileCallbackImpl:
    DocImportFileCallback
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_docimportfilecallback(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_docimportfilecallback(pointer, $0) }
    }

    open func progress(progress: DocImportProgress) throws { try rustCallWithError(FfiConverterTypeCallbackError.lift) {
        uniffi_iroh_fn_method_docimportfilecallback_progress(self.uniffiClonePointer(),
                                                             FfiConverterTypeDocImportProgress.lower(progress), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceDocImportFileCallback {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceDocImportFileCallback = .init(
        progress: { (
            uniffiHandle: UInt64,
            progress: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeDocImportFileCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progress(
                    progress: FfiConverterTypeDocImportProgress.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCallbackError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeDocImportFileCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface DocImportFileCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitDocImportFileCallback() {
    uniffi_iroh_fn_init_callback_vtable_docimportfilecallback(&UniffiCallbackInterfaceDocImportFileCallback.vtable)
}

public struct FfiConverterTypeDocImportFileCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<DocImportFileCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocImportFileCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportFileCallback {
        return DocImportFileCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocImportFileCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportFileCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocImportFileCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDocImportFileCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportFileCallback {
    return try FfiConverterTypeDocImportFileCallback.lift(pointer)
}

public func FfiConverterTypeDocImportFileCallback_lower(_ value: DocImportFileCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocImportFileCallback.lower(value)
}

/**
 * Progress updates for the doc import file operation.
 */
public protocol DocImportProgressProtocol: AnyObject {
    /**
     * Return the `DocImportProgressAbort`
     */
    func asAbort() -> DocImportProgressAbort

    /**
     * Return the `DocImportProgressAllDone`
     */
    func asAllDone() -> DocImportProgressAllDone

    /**
     * Return the `DocImportProgressFound` event
     */
    func asFound() -> DocImportProgressFound

    /**
     * Return the `DocImportProgressDone` event
     */
    func asIngestDone() -> DocImportProgressIngestDone

    /**
     * Return the `DocImportProgressProgress` event
     */
    func asProgress() -> DocImportProgressProgress

    /**
     * Get the type of event
     */
    func type() -> DocImportProgressType
}

/**
 * Progress updates for the doc import file operation.
 */
open class DocImportProgress:
    DocImportProgressProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_docimportprogress(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_docimportprogress(pointer, $0) }
    }

    /**
     * Return the `DocImportProgressAbort`
     */
    open func asAbort() -> DocImportProgressAbort {
        return try! FfiConverterTypeDocImportProgressAbort.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_as_abort(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocImportProgressAllDone`
     */
    open func asAllDone() -> DocImportProgressAllDone {
        return try! FfiConverterTypeDocImportProgressAllDone.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_as_all_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocImportProgressFound` event
     */
    open func asFound() -> DocImportProgressFound {
        return try! FfiConverterTypeDocImportProgressFound.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_as_found(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocImportProgressDone` event
     */
    open func asIngestDone() -> DocImportProgressIngestDone {
        return try! FfiConverterTypeDocImportProgressIngestDone.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_as_ingest_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DocImportProgressProgress` event
     */
    open func asProgress() -> DocImportProgressProgress {
        return try! FfiConverterTypeDocImportProgressProgress.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_as_progress(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the type of event
     */
    open func type() -> DocImportProgressType {
        return try! FfiConverterTypeDocImportProgressType.lift(try! rustCall {
            uniffi_iroh_fn_method_docimportprogress_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeDocImportProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocImportProgress

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportProgress {
        return DocImportProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocImportProgress) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocImportProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDocImportProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocImportProgress {
    return try FfiConverterTypeDocImportProgress.lift(pointer)
}

public func FfiConverterTypeDocImportProgress_lower(_ value: DocImportProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocImportProgress.lower(value)
}

/**
 * The `progress` method will be called for each `DownloadProgress` event that is emitted during
 * a `node.blobs_download`. Use the `DownloadProgress.type()` method to check the
 * `DownloadProgressType` of the event.
 */
public protocol DownloadCallback: AnyObject {
    func progress(progress: DownloadProgress) throws
}

/**
 * The `progress` method will be called for each `DownloadProgress` event that is emitted during
 * a `node.blobs_download`. Use the `DownloadProgress.type()` method to check the
 * `DownloadProgressType` of the event.
 */
open class DownloadCallbackImpl:
    DownloadCallback
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_downloadcallback(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_downloadcallback(pointer, $0) }
    }

    open func progress(progress: DownloadProgress) throws { try rustCallWithError(FfiConverterTypeCallbackError.lift) {
        uniffi_iroh_fn_method_downloadcallback_progress(self.uniffiClonePointer(),
                                                        FfiConverterTypeDownloadProgress.lower(progress), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceDownloadCallback {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceDownloadCallback = .init(
        progress: { (
            uniffiHandle: UInt64,
            progress: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeDownloadCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progress(
                    progress: FfiConverterTypeDownloadProgress.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCallbackError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeDownloadCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface DownloadCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitDownloadCallback() {
    uniffi_iroh_fn_init_callback_vtable_downloadcallback(&UniffiCallbackInterfaceDownloadCallback.vtable)
}

public struct FfiConverterTypeDownloadCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<DownloadCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DownloadCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadCallback {
        return DownloadCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DownloadCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DownloadCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDownloadCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadCallback {
    return try FfiConverterTypeDownloadCallback.lift(pointer)
}

public func FfiConverterTypeDownloadCallback_lower(_ value: DownloadCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDownloadCallback.lower(value)
}

/**
 * Download policy to decide which content blobs shall be downloaded.
 */
public protocol DownloadPolicyProtocol: AnyObject {}

/**
 * Download policy to decide which content blobs shall be downloaded.
 */
open class DownloadPolicy:
    DownloadPolicyProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_downloadpolicy(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_downloadpolicy(pointer, $0) }
    }

    /**
     * Download everything
     */
    public static func everything() -> DownloadPolicy {
        return try! FfiConverterTypeDownloadPolicy.lift(try! rustCall {
            uniffi_iroh_fn_constructor_downloadpolicy_everything($0
            )
        })
    }

    /**
     * Download everything except keys that match the given filters
     */
    public static func everythingExcept(filters: [FilterKind]) -> DownloadPolicy {
        return try! FfiConverterTypeDownloadPolicy.lift(try! rustCall {
            uniffi_iroh_fn_constructor_downloadpolicy_everything_except(
                FfiConverterSequenceTypeFilterKind.lower(filters), $0
            )
        })
    }

    /**
     * Download nothing
     */
    public static func nothing() -> DownloadPolicy {
        return try! FfiConverterTypeDownloadPolicy.lift(try! rustCall {
            uniffi_iroh_fn_constructor_downloadpolicy_nothing($0
            )
        })
    }

    /**
     * Download nothing except keys that match the given filters
     */
    public static func nothingExcept(filters: [FilterKind]) -> DownloadPolicy {
        return try! FfiConverterTypeDownloadPolicy.lift(try! rustCall {
            uniffi_iroh_fn_constructor_downloadpolicy_nothing_except(
                FfiConverterSequenceTypeFilterKind.lower(filters), $0
            )
        })
    }
}

public struct FfiConverterTypeDownloadPolicy: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DownloadPolicy

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadPolicy {
        return DownloadPolicy(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DownloadPolicy) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadPolicy {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DownloadPolicy, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDownloadPolicy_lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadPolicy {
    return try FfiConverterTypeDownloadPolicy.lift(pointer)
}

public func FfiConverterTypeDownloadPolicy_lower(_ value: DownloadPolicy) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDownloadPolicy.lower(value)
}

/**
 * Progress updates for the get operation.
 */
public protocol DownloadProgressProtocol: AnyObject {
    /**
     * Return the `DownloadProgressAbort`
     */
    func asAbort() -> DownloadProgressAbort

    /**
     * Return the `DownloadProgressAllDone` event
     */
    func asAllDone() -> DownloadProgressAllDone

    /**
     * Return the `DownloadProgressDone` event
     */
    func asDone() -> DownloadProgressDone

    /**
     * Return the `DownloadProgressFound` event
     */
    func asFound() -> DownloadProgressFound

    /**
     * Return the `DownloadProgressFoundHashSeq` event
     */
    func asFoundHashSeq() -> DownloadProgressFoundHashSeq

    /**
     * Return the `DownloadProgressFoundLocal` event
     */
    func asFoundLocal() -> DownloadProgressFoundLocal

    /**
     * Return the `DownloadProgressProgress` event
     */
    func asProgress() -> DownloadProgressProgress

    /**
     * Get the type of event
     * note that there is no `as_connected` method, as the `Connected` event has no associated data
     */
    func type() -> DownloadProgressType
}

/**
 * Progress updates for the get operation.
 */
open class DownloadProgress:
    DownloadProgressProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_downloadprogress(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_downloadprogress(pointer, $0) }
    }

    /**
     * Return the `DownloadProgressAbort`
     */
    open func asAbort() -> DownloadProgressAbort {
        return try! FfiConverterTypeDownloadProgressAbort.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_abort(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressAllDone` event
     */
    open func asAllDone() -> DownloadProgressAllDone {
        return try! FfiConverterTypeDownloadProgressAllDone.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_all_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressDone` event
     */
    open func asDone() -> DownloadProgressDone {
        return try! FfiConverterTypeDownloadProgressDone.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_done(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressFound` event
     */
    open func asFound() -> DownloadProgressFound {
        return try! FfiConverterTypeDownloadProgressFound.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_found(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressFoundHashSeq` event
     */
    open func asFoundHashSeq() -> DownloadProgressFoundHashSeq {
        return try! FfiConverterTypeDownloadProgressFoundHashSeq.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_found_hash_seq(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressFoundLocal` event
     */
    open func asFoundLocal() -> DownloadProgressFoundLocal {
        return try! FfiConverterTypeDownloadProgressFoundLocal.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_found_local(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Return the `DownloadProgressProgress` event
     */
    open func asProgress() -> DownloadProgressProgress {
        return try! FfiConverterTypeDownloadProgressProgress.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_as_progress(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the type of event
     * note that there is no `as_connected` method, as the `Connected` event has no associated data
     */
    open func type() -> DownloadProgressType {
        return try! FfiConverterTypeDownloadProgressType.lift(try! rustCall {
            uniffi_iroh_fn_method_downloadprogress_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeDownloadProgress: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DownloadProgress

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadProgress {
        return DownloadProgress(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DownloadProgress) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgress {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DownloadProgress, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDownloadProgress_lift(_ pointer: UnsafeMutableRawPointer) throws -> DownloadProgress {
    return try FfiConverterTypeDownloadProgress.lift(pointer)
}

public func FfiConverterTypeDownloadProgress_lower(_ value: DownloadProgress) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDownloadProgress.lower(value)
}

/**
 * A single entry in a [`Doc`]
 *
 * An entry is identified by a key, its [`AuthorId`], and the [`Doc`]'s
 * namespace id. Its value is the 32-byte BLAKE3 [`hash`]
 * of the entry's content data, the size of this content data, and a timestamp.
 */
public protocol EntryProtocol: AnyObject {
    /**
     * Get the [`AuthorId`] of this entry.
     */
    func author() -> AuthorId

    /**
     * Read all content of an [`Entry`] into a buffer.
     * This allocates a buffer for the full entry. Use only if you know that the entry you're
     * reading is small. If not sure, use [`Self::content_len`] and check the size with
     * before calling [`Self::content_bytes`].
     */
    func contentBytes(doc: Doc) throws -> Data

    /**
     * Get the content_hash of this entry.
     */
    func contentHash() -> Hash

    /**
     * Get the content_length of this entry.
     */
    func contentLen() -> UInt64

    /**
     * Get the key of this entry.
     */
    func key() -> Data

    /**
     * Get the namespace id of this entry.
     */
    func namespace() -> String

    /**
     * Get the timestamp when this entry was written.
     */
    func timestamp() -> UInt64
}

/**
 * A single entry in a [`Doc`]
 *
 * An entry is identified by a key, its [`AuthorId`], and the [`Doc`]'s
 * namespace id. Its value is the 32-byte BLAKE3 [`hash`]
 * of the entry's content data, the size of this content data, and a timestamp.
 */
open class Entry:
    EntryProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_entry(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_entry(pointer, $0) }
    }

    /**
     * Get the [`AuthorId`] of this entry.
     */
    open func author() -> AuthorId {
        return try! FfiConverterTypeAuthorId.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_author(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Read all content of an [`Entry`] into a buffer.
     * This allocates a buffer for the full entry. Use only if you know that the entry you're
     * reading is small. If not sure, use [`Self::content_len`] and check the size with
     * before calling [`Self::content_bytes`].
     */
    open func contentBytes(doc: Doc) throws -> Data {
        return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_entry_content_bytes(self.uniffiClonePointer(),
                                                      FfiConverterTypeDoc.lower(doc), $0)
        })
    }

    /**
     * Get the content_hash of this entry.
     */
    open func contentHash() -> Hash {
        return try! FfiConverterTypeHash.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_content_hash(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the content_length of this entry.
     */
    open func contentLen() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_content_len(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the key of this entry.
     */
    open func key() -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_key(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the namespace id of this entry.
     */
    open func namespace() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_namespace(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the timestamp when this entry was written.
     */
    open func timestamp() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_iroh_fn_method_entry_timestamp(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeEntry: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Entry

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
        return Entry(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Entry) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Entry {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Entry, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeEntry_lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
    return try FfiConverterTypeEntry.lift(pointer)
}

public func FfiConverterTypeEntry_lower(_ value: Entry) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEntry.lower(value)
}

/**
 * Filter strategy used in download policies.
 */
public protocol FilterKindProtocol: AnyObject {
    /**
     * Verifies whether this filter matches a given key
     */
    func matches(key: Data) -> Bool
}

/**
 * Filter strategy used in download policies.
 */
open class FilterKind:
    FilterKindProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_filterkind(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_filterkind(pointer, $0) }
    }

    /**
     * Returns a FilterKind that matches if the contained bytes and the key are the same.
     */
    public static func exact(key: Data) -> FilterKind {
        return try! FfiConverterTypeFilterKind.lift(try! rustCall {
            uniffi_iroh_fn_constructor_filterkind_exact(
                FfiConverterData.lower(key), $0
            )
        })
    }

    /**
     * Returns a FilterKind that matches if the contained bytes are a prefix of the key.
     */
    public static func prefix(prefix: Data) -> FilterKind {
        return try! FfiConverterTypeFilterKind.lift(try! rustCall {
            uniffi_iroh_fn_constructor_filterkind_prefix(
                FfiConverterData.lower(prefix), $0
            )
        })
    }

    /**
     * Verifies whether this filter matches a given key
     */
    open func matches(key: Data) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_filterkind_matches(self.uniffiClonePointer(),
                                                     FfiConverterData.lower(key), $0)
        })
    }
}

public struct FfiConverterTypeFilterKind: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FilterKind

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FilterKind {
        return FilterKind(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FilterKind) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FilterKind {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FilterKind, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeFilterKind_lift(_ pointer: UnsafeMutableRawPointer) throws -> FilterKind {
    return try FfiConverterTypeFilterKind.lift(pointer)
}

public func FfiConverterTypeFilterKind_lower(_ value: FilterKind) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFilterKind.lower(value)
}

/**
 * Hash type used throughout Iroh. A blake3 hash.
 */
public protocol HashProtocol: AnyObject {
    /**
     * Returns true if the Hash's have the same value
     */
    func equal(other: Hash) -> Bool

    /**
     * Bytes of the hash.
     */
    func toBytes() -> Data

    /**
     * Convert the hash to a hex string.
     */
    func toHex() -> String

    /**
     * Write the hash to a string
     */
    func toString() -> String
}

/**
 * Hash type used throughout Iroh. A blake3 hash.
 */
open class Hash:
    HashProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_hash(self.pointer, $0) }
    }

    /**
     * Calculate the hash of the provide bytes.
     */
    public convenience init(buf: Data) {
        let pointer =
            try! rustCall {
                uniffi_iroh_fn_constructor_hash_new(
                    FfiConverterData.lower(buf), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_hash(pointer, $0) }
    }

    /**
     * Create a Hash from its raw bytes representation.
     */
    public static func fromBytes(bytes: Data) throws -> Hash {
        return try FfiConverterTypeHash.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_hash_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Make a Hash from hex string
     */
    public static func fromString(s: String) throws -> Hash {
        return try FfiConverterTypeHash.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_hash_from_string(
                FfiConverterString.lower(s), $0
            )
        })
    }

    /**
     * Returns true if the Hash's have the same value
     */
    open func equal(other: Hash) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_hash_equal(self.uniffiClonePointer(),
                                             FfiConverterTypeHash.lower(other), $0)
        })
    }

    /**
     * Bytes of the hash.
     */
    open func toBytes() -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_iroh_fn_method_hash_to_bytes(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Convert the hash to a hex string.
     */
    open func toHex() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_hash_to_hex(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Write the hash to a string
     */
    open func toString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_hash_to_string(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeHash: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Hash

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
        return Hash(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Hash) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hash {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Hash, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeHash_lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
    return try FfiConverterTypeHash.lift(pointer)
}

public func FfiConverterTypeHash_lower(_ value: Hash) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHash.lower(value)
}

/**
 * An iroh error.
 */
public protocol IrohErrorProtocol: AnyObject {
    func message() -> String
}

/**
 * An iroh error.
 */
open class IrohError:
    CustomDebugStringConvertible,
    Swift.Error,

    IrohErrorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_iroherror(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_iroherror(pointer, $0) }
    }

    open func message() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_iroherror_message(self.uniffiClonePointer(), $0)
        })
    }

    open var debugDescription: String {
        return try! FfiConverterString.lift(
            try! rustCall {
                uniffi_iroh_fn_method_iroherror_uniffi_trait_debug(self.uniffiClonePointer(), $0)
            }
        )
    }
}

public struct FfiConverterTypeIrohError: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IrohError

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohError {
        return IrohError(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IrohError) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohError {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IrohError, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

extension IrohError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

public struct FfiConverterTypeIrohError__as_error: FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> IrohError {
        var reader = createReader(data: Data(rustBuffer: buf))
        return try FfiConverterTypeIrohError.read(from: &reader)
    }

    public static func lower(_: IrohError) -> RustBuffer {
        fatalError("not implemented")
    }

    public static func read(from _: inout (data: Data, offset: Data.Index)) throws -> IrohError {
        fatalError("not implemented")
    }

    public static func write(_: IrohError, into _: inout [UInt8]) {
        fatalError("not implemented")
    }
}

public func FfiConverterTypeIrohError_lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohError {
    return try FfiConverterTypeIrohError.lift(pointer)
}

public func FfiConverterTypeIrohError_lower(_ value: IrohError) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIrohError.lower(value)
}

/**
 * An Iroh node. Allows you to sync, store, and transfer data.
 */
public protocol IrohNodeProtocol: AnyObject {
    /**
     * Create a new document author.
     *
     * You likely want to save the returned [`AuthorId`] somewhere so that you can use this author
     * again.
     *
     * If you need only a single author, use [`Self::default`].
     */
    func authorCreate() throws -> AuthorId

    /**
     * Returns the default document author of this node.
     *
     * On persistent nodes, the author is created on first start and its public key is saved
     * in the data directory.
     *
     * The default author can be set with [`Self::set_default`].
     */
    func authorDefault() throws -> AuthorId

    /**
     * Deletes the given author by id.
     *
     * Warning: This permanently removes this author.
     */
    func authorDelete(author: AuthorId) throws

    /**
     * Export the given author.
     *
     * Warning: This contains sensitive data.
     */
    func authorExport(author: AuthorId) throws -> Author

    /**
     * Import the given author.
     *
     * Warning: This contains sensitive data.
     */
    func authorImport(author: Author) throws -> AuthorId

    func authorList() throws -> [AuthorId]

    /**
     * Write a blob by passing bytes.
     */
    func blobsAddBytes(bytes: Data) throws -> BlobAddOutcome

    /**
     * Import a blob from a filesystem path.
     *
     * `path` should be an absolute path valid for the file system on which
     * the node runs.
     * If `in_place` is true, Iroh will assume that the data will not change and will share it in
     * place without copying to the Iroh data directory.
     */
    func blobsAddFromPath(path: String, inPlace: Bool, tag: SetTagOption, wrap: WrapOption, cb: AddCallback) throws

    /**
     * Create a collection from already existing blobs.
     *
     * To automatically clear the tags for the passed in blobs you can set
     * `tags_to_delete` on those tags, and they will be deleted once the collection is created.
     */
    func blobsCreateCollection(collection: Collection, tag: SetTagOption, tagsToDelete: [String]) throws -> HashAndTag

    /**
     * Delete a blob.
     */
    func blobsDeleteBlob(hash: Hash) throws

    /**
     * Download a blob from another node and add it to the local database.
     */
    func blobsDownload(hash: Hash, req: BlobDownloadOptions, cb: DownloadCallback) throws

    /**
     * Download a blob from another node and add it to the local database.
     */
    func blobsExport(hash: Hash, destination: String, format: BlobExportFormat, mode: BlobExportMode) throws

    /**
     * Read the content of a collection
     */
    func blobsGetCollection(hash: Hash) throws -> Collection

    /**
     * List all complete blobs.
     *
     * Note: this allocates for each `BlobInfo`, if you have many `BlobInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    func blobsList() throws -> [Hash]

    /**
     * List all collections.
     *
     * Note: this allocates for each `CollectionInfo`, if you have many `CollectionInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    func blobsListCollections() throws -> [CollectionInfo]

    /**
     * List all incomplete (partial) blobs.
     *
     * Note: this allocates for each `IncompleteBlobInfo`, if you have many `IncompleteBlobInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    func blobsListIncomplete() throws -> [IncompleteBlobInfo]

    /**
     * Read all bytes of single blob at `offset` for length `len`.
     *
     * This allocates a buffer for the full length `len`. Use only if you know that the blob you're
     * reading is small. If not sure, use [`Self::blobs_size`] and check the size with
     * before calling [`Self::blobs_read_at_to_bytes`].
     */
    func blobsReadAtToBytes(hash: Hash, offset: UInt64, len: UInt64?) throws -> Data

    /**
     * Read all bytes of single blob.
     *
     * This allocates a buffer for the full blob. Use only if you know that the blob you're
     * reading is small. If not sure, use [`Self::blobs_size`] and check the size with
     * before calling [`Self::blobs_read_to_bytes`].
     */
    func blobsReadToBytes(hash: Hash) throws -> Data

    /**
     * Create a ticket for sharing a blob or collection from this node.
     */
    func blobsShare(hash: Hash, blobFormat: BlobFormat, ticketOptions: AddrInfoOptions) throws -> String

    /**
     * Get the size information on a single blob.
     */
    func blobsSize(hash: Hash) throws -> UInt64

    /**
     * Export the blob contents to a file path
     * The `path` field is expected to be the absolute path.
     */
    func blobsWriteToPath(hash: Hash, path: String) throws

    func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo?

    /**
     * Return `ConnectionInfo`s for each connection we have to another iroh node.
     */
    func connections() throws -> [ConnectionInfo]

    /**
     * Create a new doc.
     */
    func docCreate() throws -> Doc

    /**
     * Delete a document from the local node.
     *
     * This is a destructive operation. Both the document secret key and all entries in the
     * document will be permanently deleted from the node's storage. Content blobs will be
     * deleted through garbage collection unless they are referenced from another document or tag.
     */
    func docDrop(docId: String) throws

    /**
     * Join and sync with an already existing document.
     */
    func docJoin(ticket: String) throws -> Doc

    /**
     * Join and sync with an already existing document and subscribe to events on that document.
     */
    func docJoinAndSubscribe(ticket: String, cb: SubscribeCallback) throws -> Doc

    /**
     * List all the docs we have access to on this node.
     */
    func docList() throws -> [NamespaceAndCapability]

    /**
     * Get a [`Doc`].
     *
     * Returns None if the document cannot be found.
     */
    func docOpen(id: String) throws -> Doc?

    /**
     * The string representation of the PublicKey of this node.
     */
    func nodeId() -> String

    /**
     * Get statistics of the running node.
     */
    func stats() throws -> [String: CounterStats]

    /**
     * Get status information about a node
     */
    func status() throws -> NodeStatus

    /**
     * Delete a tag.
     */
    func tagsDelete(name: Data) throws

    /**
     * List all tags
     *
     * Note: this allocates for each `TagInfo`, if you have many `Tags`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    func tagsList() throws -> [TagInfo]
}

/**
 * An Iroh node. Allows you to sync, store, and transfer data.
 */
open class IrohNode:
    IrohNodeProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_irohnode(self.pointer, $0) }
    }

    /**
     * Create a new iroh node. The `path` param should be a directory where we can store or load
     * iroh data from a previous session.
     */
    public convenience init(path: String) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
                uniffi_iroh_fn_constructor_irohnode_new(
                    FfiConverterString.lower(path), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_irohnode(pointer, $0) }
    }

    /**
     * Create a new iroh node with options.
     */
    public static func withOptions(path: String, opts: NodeOptions) throws -> IrohNode {
        return try FfiConverterTypeIrohNode.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_irohnode_with_options(
                FfiConverterString.lower(path),
                FfiConverterTypeNodeOptions.lower(opts), $0
            )
        })
    }

    /**
     * Create a new document author.
     *
     * You likely want to save the returned [`AuthorId`] somewhere so that you can use this author
     * again.
     *
     * If you need only a single author, use [`Self::default`].
     */
    open func authorCreate() throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_author_create(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Returns the default document author of this node.
     *
     * On persistent nodes, the author is created on first start and its public key is saved
     * in the data directory.
     *
     * The default author can be set with [`Self::set_default`].
     */
    open func authorDefault() throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_author_default(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Deletes the given author by id.
     *
     * Warning: This permanently removes this author.
     */
    open func authorDelete(author: AuthorId) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_author_delete(self.uniffiClonePointer(),
                                                     FfiConverterTypeAuthorId.lower(author), $0)
    }
    }

    /**
     * Export the given author.
     *
     * Warning: This contains sensitive data.
     */
    open func authorExport(author: AuthorId) throws -> Author {
        return try FfiConverterTypeAuthor.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_author_export(self.uniffiClonePointer(),
                                                         FfiConverterTypeAuthorId.lower(author), $0)
        })
    }

    /**
     * Import the given author.
     *
     * Warning: This contains sensitive data.
     */
    open func authorImport(author: Author) throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_author_import(self.uniffiClonePointer(),
                                                         FfiConverterTypeAuthor.lower(author), $0)
        })
    }

    open func authorList() throws -> [AuthorId] {
        return try FfiConverterSequenceTypeAuthorId.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_author_list(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Write a blob by passing bytes.
     */
    open func blobsAddBytes(bytes: Data) throws -> BlobAddOutcome {
        return try FfiConverterTypeBlobAddOutcome.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_add_bytes(self.uniffiClonePointer(),
                                                           FfiConverterData.lower(bytes), $0)
        })
    }

    /**
     * Import a blob from a filesystem path.
     *
     * `path` should be an absolute path valid for the file system on which
     * the node runs.
     * If `in_place` is true, Iroh will assume that the data will not change and will share it in
     * place without copying to the Iroh data directory.
     */
    open func blobsAddFromPath(path: String, inPlace: Bool, tag: SetTagOption, wrap: WrapOption, cb: AddCallback) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_blobs_add_from_path(self.uniffiClonePointer(),
                                                           FfiConverterString.lower(path),
                                                           FfiConverterBool.lower(inPlace),
                                                           FfiConverterTypeSetTagOption.lower(tag),
                                                           FfiConverterTypeWrapOption.lower(wrap),
                                                           FfiConverterTypeAddCallback.lower(cb), $0)
    }
    }

    /**
     * Create a collection from already existing blobs.
     *
     * To automatically clear the tags for the passed in blobs you can set
     * `tags_to_delete` on those tags, and they will be deleted once the collection is created.
     */
    open func blobsCreateCollection(collection: Collection, tag: SetTagOption, tagsToDelete: [String]) throws -> HashAndTag {
        return try FfiConverterTypeHashAndTag.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_create_collection(self.uniffiClonePointer(),
                                                                   FfiConverterTypeCollection.lower(collection),
                                                                   FfiConverterTypeSetTagOption.lower(tag),
                                                                   FfiConverterSequenceString.lower(tagsToDelete), $0)
        })
    }

    /**
     * Delete a blob.
     */
    open func blobsDeleteBlob(hash: Hash) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_blobs_delete_blob(self.uniffiClonePointer(),
                                                         FfiConverterTypeHash.lower(hash), $0)
    }
    }

    /**
     * Download a blob from another node and add it to the local database.
     */
    open func blobsDownload(hash: Hash, req: BlobDownloadOptions, cb: DownloadCallback) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_blobs_download(self.uniffiClonePointer(),
                                                      FfiConverterTypeHash.lower(hash),
                                                      FfiConverterTypeBlobDownloadOptions.lower(req),
                                                      FfiConverterTypeDownloadCallback.lower(cb), $0)
    }
    }

    /**
     * Download a blob from another node and add it to the local database.
     */
    open func blobsExport(hash: Hash, destination: String, format: BlobExportFormat, mode: BlobExportMode) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_blobs_export(self.uniffiClonePointer(),
                                                    FfiConverterTypeHash.lower(hash),
                                                    FfiConverterString.lower(destination),
                                                    FfiConverterTypeBlobExportFormat.lower(format),
                                                    FfiConverterTypeBlobExportMode.lower(mode), $0)
    }
    }

    /**
     * Read the content of a collection
     */
    open func blobsGetCollection(hash: Hash) throws -> Collection {
        return try FfiConverterTypeCollection.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_get_collection(self.uniffiClonePointer(),
                                                                FfiConverterTypeHash.lower(hash), $0)
        })
    }

    /**
     * List all complete blobs.
     *
     * Note: this allocates for each `BlobInfo`, if you have many `BlobInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    open func blobsList() throws -> [Hash] {
        return try FfiConverterSequenceTypeHash.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_list(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * List all collections.
     *
     * Note: this allocates for each `CollectionInfo`, if you have many `CollectionInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    open func blobsListCollections() throws -> [CollectionInfo] {
        return try FfiConverterSequenceTypeCollectionInfo.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_list_collections(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * List all incomplete (partial) blobs.
     *
     * Note: this allocates for each `IncompleteBlobInfo`, if you have many `IncompleteBlobInfo`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    open func blobsListIncomplete() throws -> [IncompleteBlobInfo] {
        return try FfiConverterSequenceTypeIncompleteBlobInfo.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_list_incomplete(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Read all bytes of single blob at `offset` for length `len`.
     *
     * This allocates a buffer for the full length `len`. Use only if you know that the blob you're
     * reading is small. If not sure, use [`Self::blobs_size`] and check the size with
     * before calling [`Self::blobs_read_at_to_bytes`].
     */
    open func blobsReadAtToBytes(hash: Hash, offset: UInt64, len: UInt64?) throws -> Data {
        return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_read_at_to_bytes(self.uniffiClonePointer(),
                                                                  FfiConverterTypeHash.lower(hash),
                                                                  FfiConverterUInt64.lower(offset),
                                                                  FfiConverterOptionUInt64.lower(len), $0)
        })
    }

    /**
     * Read all bytes of single blob.
     *
     * This allocates a buffer for the full blob. Use only if you know that the blob you're
     * reading is small. If not sure, use [`Self::blobs_size`] and check the size with
     * before calling [`Self::blobs_read_to_bytes`].
     */
    open func blobsReadToBytes(hash: Hash) throws -> Data {
        return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_read_to_bytes(self.uniffiClonePointer(),
                                                               FfiConverterTypeHash.lower(hash), $0)
        })
    }

    /**
     * Create a ticket for sharing a blob or collection from this node.
     */
    open func blobsShare(hash: Hash, blobFormat: BlobFormat, ticketOptions: AddrInfoOptions) throws -> String {
        return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_share(self.uniffiClonePointer(),
                                                       FfiConverterTypeHash.lower(hash),
                                                       FfiConverterTypeBlobFormat.lower(blobFormat),
                                                       FfiConverterTypeAddrInfoOptions.lower(ticketOptions), $0)
        })
    }

    /**
     * Get the size information on a single blob.
     */
    open func blobsSize(hash: Hash) throws -> UInt64 {
        return try FfiConverterUInt64.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_blobs_size(self.uniffiClonePointer(),
                                                      FfiConverterTypeHash.lower(hash), $0)
        })
    }

    /**
     * Export the blob contents to a file path
     * The `path` field is expected to be the absolute path.
     */
    open func blobsWriteToPath(hash: Hash, path: String) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_blobs_write_to_path(self.uniffiClonePointer(),
                                                           FfiConverterTypeHash.lower(hash),
                                                           FfiConverterString.lower(path), $0)
    }
    }

    open func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo? {
        return try FfiConverterOptionTypeConnectionInfo.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_connection_info(self.uniffiClonePointer(),
                                                           FfiConverterTypePublicKey.lower(nodeId), $0)
        })
    }

    /**
     * Return `ConnectionInfo`s for each connection we have to another iroh node.
     */
    open func connections() throws -> [ConnectionInfo] {
        return try FfiConverterSequenceTypeConnectionInfo.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_connections(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Create a new doc.
     */
    open func docCreate() throws -> Doc {
        return try FfiConverterTypeDoc.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_doc_create(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Delete a document from the local node.
     *
     * This is a destructive operation. Both the document secret key and all entries in the
     * document will be permanently deleted from the node's storage. Content blobs will be
     * deleted through garbage collection unless they are referenced from another document or tag.
     */
    open func docDrop(docId: String) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_doc_drop(self.uniffiClonePointer(),
                                                FfiConverterString.lower(docId), $0)
    }
    }

    /**
     * Join and sync with an already existing document.
     */
    open func docJoin(ticket: String) throws -> Doc {
        return try FfiConverterTypeDoc.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_doc_join(self.uniffiClonePointer(),
                                                    FfiConverterString.lower(ticket), $0)
        })
    }

    /**
     * Join and sync with an already existing document and subscribe to events on that document.
     */
    open func docJoinAndSubscribe(ticket: String, cb: SubscribeCallback) throws -> Doc {
        return try FfiConverterTypeDoc.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_doc_join_and_subscribe(self.uniffiClonePointer(),
                                                                  FfiConverterString.lower(ticket),
                                                                  FfiConverterTypeSubscribeCallback.lower(cb), $0)
        })
    }

    /**
     * List all the docs we have access to on this node.
     */
    open func docList() throws -> [NamespaceAndCapability] {
        return try FfiConverterSequenceTypeNamespaceAndCapability.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_doc_list(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get a [`Doc`].
     *
     * Returns None if the document cannot be found.
     */
    open func docOpen(id: String) throws -> Doc? {
        return try FfiConverterOptionTypeDoc.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_doc_open(self.uniffiClonePointer(),
                                                    FfiConverterString.lower(id), $0)
        })
    }

    /**
     * The string representation of the PublicKey of this node.
     */
    open func nodeId() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_irohnode_node_id(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get statistics of the running node.
     */
    open func stats() throws -> [String: CounterStats] {
        return try FfiConverterDictionaryStringTypeCounterStats.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_stats(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get status information about a node
     */
    open func status() throws -> NodeStatus {
        return try FfiConverterTypeNodeStatus.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_status(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Delete a tag.
     */
    open func tagsDelete(name: Data) throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_method_irohnode_tags_delete(self.uniffiClonePointer(),
                                                   FfiConverterData.lower(name), $0)
    }
    }

    /**
     * List all tags
     *
     * Note: this allocates for each `TagInfo`, if you have many `Tags`s this may be a prohibitively large list.
     * Please file an [issue](https://github.com/n0-computer/iroh-ffi/issues/new) if you run into this issue
     */
    open func tagsList() throws -> [TagInfo] {
        return try FfiConverterSequenceTypeTagInfo.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_method_irohnode_tags_list(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeIrohNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IrohNode

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
        return IrohNode(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohNode {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IrohNode, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeIrohNode_lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
    return try FfiConverterTypeIrohNode.lift(pointer)
}

public func FfiConverterTypeIrohNode_lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIrohNode.lower(value)
}

/**
 * Events informing about actions of the live sync progress
 */
public protocol LiveEventProtocol: AnyObject {
    /**
     * For `LiveEventType::ContentReady`, returns a Hash
     */
    func asContentReady() -> Hash

    /**
     * For `LiveEventType::InsertLocal`, returns an Entry
     */
    func asInsertLocal() -> Entry

    /**
     * For `LiveEventType::InsertRemote`, returns an InsertRemoteEvent
     */
    func asInsertRemote() -> InsertRemoteEvent

    /**
     * For `LiveEventType::NeighborDown`, returns a PublicKey
     */
    func asNeighborDown() -> PublicKey

    /**
     * For `LiveEventType::NeighborUp`, returns a PublicKey
     */
    func asNeighborUp() -> PublicKey

    /**
     * For `LiveEventType::SyncFinished`, returns a SyncEvent
     */
    func asSyncFinished() -> SyncEvent

    /**
     * The type LiveEvent
     */
    func type() -> LiveEventType
}

/**
 * Events informing about actions of the live sync progress
 */
open class LiveEvent:
    LiveEventProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_liveevent(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_liveevent(pointer, $0) }
    }

    /**
     * For `LiveEventType::ContentReady`, returns a Hash
     */
    open func asContentReady() -> Hash {
        return try! FfiConverterTypeHash.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_content_ready(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * For `LiveEventType::InsertLocal`, returns an Entry
     */
    open func asInsertLocal() -> Entry {
        return try! FfiConverterTypeEntry.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_insert_local(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * For `LiveEventType::InsertRemote`, returns an InsertRemoteEvent
     */
    open func asInsertRemote() -> InsertRemoteEvent {
        return try! FfiConverterTypeInsertRemoteEvent.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_insert_remote(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * For `LiveEventType::NeighborDown`, returns a PublicKey
     */
    open func asNeighborDown() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_neighbor_down(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * For `LiveEventType::NeighborUp`, returns a PublicKey
     */
    open func asNeighborUp() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_neighbor_up(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * For `LiveEventType::SyncFinished`, returns a SyncEvent
     */
    open func asSyncFinished() -> SyncEvent {
        return try! FfiConverterTypeSyncEvent.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_as_sync_finished(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The type LiveEvent
     */
    open func type() -> LiveEventType {
        return try! FfiConverterTypeLiveEventType.lift(try! rustCall {
            uniffi_iroh_fn_method_liveevent_type(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeLiveEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveEvent

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
        return LiveEvent(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEvent {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveEvent, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeLiveEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
    return try FfiConverterTypeLiveEvent.lift(pointer)
}

public func FfiConverterTypeLiveEvent_lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveEvent.lower(value)
}

/**
 * A peer and it's addressing information.
 */
public protocol NodeAddrProtocol: AnyObject {
    /**
     * Get the direct addresses of this peer.
     */
    func directAddresses() -> [String]

    /**
     * Returns true if both NodeAddr's have the same values
     */
    func equal(other: NodeAddr) -> Bool

    /**
     * Get the relay url of this peer.
     */
    func relayUrl() -> String?
}

/**
 * A peer and it's addressing information.
 */
open class NodeAddr:
    NodeAddrProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_nodeaddr(self.pointer, $0) }
    }

    /**
     * Create a new [`NodeAddr`] with empty [`AddrInfo`].
     */
    public convenience init(nodeId: PublicKey, relayUrl: String?, addresses: [String]) {
        let pointer =
            try! rustCall {
                uniffi_iroh_fn_constructor_nodeaddr_new(
                    FfiConverterTypePublicKey.lower(nodeId),
                    FfiConverterOptionString.lower(relayUrl),
                    FfiConverterSequenceString.lower(addresses), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_nodeaddr(pointer, $0) }
    }

    /**
     * Get the direct addresses of this peer.
     */
    open func directAddresses() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_iroh_fn_method_nodeaddr_direct_addresses(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Returns true if both NodeAddr's have the same values
     */
    open func equal(other: NodeAddr) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_nodeaddr_equal(self.uniffiClonePointer(),
                                                 FfiConverterTypeNodeAddr.lower(other), $0)
        })
    }

    /**
     * Get the relay url of this peer.
     */
    open func relayUrl() -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_iroh_fn_method_nodeaddr_relay_url(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeNodeAddr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeAddr

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
        return NodeAddr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeAddr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeAddr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeNodeAddr_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
    return try FfiConverterTypeNodeAddr.lift(pointer)
}

public func FfiConverterTypeNodeAddr_lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeAddr.lower(value)
}

public protocol NodeStatusProtocol: AnyObject {
    /**
     * The bound listening addresses of the node
     */
    func listenAddrs() -> [String]

    /**
     * The node id and socket addresses of this node.
     */
    func nodeAddr() -> NodeAddr

    /**
     * The version of the node
     */
    func version() -> String
}

open class NodeStatus:
    NodeStatusProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_nodestatus(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_nodestatus(pointer, $0) }
    }

    /**
     * The bound listening addresses of the node
     */
    open func listenAddrs() -> [String] {
        return try! FfiConverterSequenceString.lift(try! rustCall {
            uniffi_iroh_fn_method_nodestatus_listen_addrs(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The node id and socket addresses of this node.
     */
    open func nodeAddr() -> NodeAddr {
        return try! FfiConverterTypeNodeAddr.lift(try! rustCall {
            uniffi_iroh_fn_method_nodestatus_node_addr(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * The version of the node
     */
    open func version() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_nodestatus_version(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeNodeStatus: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeStatus

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeStatus {
        return NodeStatus(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeStatus) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeStatus {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeStatus, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeNodeStatus_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeStatus {
    return try FfiConverterTypeNodeStatus.lift(pointer)
}

public func FfiConverterTypeNodeStatus_lower(_ value: NodeStatus) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeStatus.lower(value)
}

/**
 * A public key
 */
public protocol PublicKeyProtocol: AnyObject {
    /**
     * Returns true when both PublicKeys have the same value
     */
    func equal(other: PublicKey) -> Bool

    /**
     * The first 10 bytes of the PublicKey represented as a string
     */
    func fmtShort() -> String

    /**
     * Represent a PublicKey as a byte slice
     */
    func toBytes() -> Data

    /**
     * Represent a PublicKey as a string
     */
    func toString() -> String
}

/**
 * A public key
 */
open class PublicKey:
    PublicKeyProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_publickey(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_publickey(pointer, $0) }
    }

    /**
     * Get a PublicKey from a byte slice
     */
    public static func fromBytes(bytes: Data) throws -> PublicKey {
        return try FfiConverterTypePublicKey.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_publickey_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    /**
     * Get a PublicKey from a string
     */
    public static func fromString(s: String) throws -> PublicKey {
        return try FfiConverterTypePublicKey.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
            uniffi_iroh_fn_constructor_publickey_from_string(
                FfiConverterString.lower(s), $0
            )
        })
    }

    /**
     * Returns true when both PublicKeys have the same value
     */
    open func equal(other: PublicKey) -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_publickey_equal(self.uniffiClonePointer(),
                                                  FfiConverterTypePublicKey.lower(other), $0)
        })
    }

    /**
     * The first 10 bytes of the PublicKey represented as a string
     */
    open func fmtShort() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_publickey_fmt_short(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Represent a PublicKey as a byte slice
     */
    open func toBytes() -> Data {
        return try! FfiConverterData.lift(try! rustCall {
            uniffi_iroh_fn_method_publickey_to_bytes(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Represent a PublicKey as a string
     */
    open func toString() -> String {
        return try! FfiConverterString.lift(try! rustCall {
            uniffi_iroh_fn_method_publickey_to_string(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypePublicKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PublicKey

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypePublicKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(pointer)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePublicKey.lower(value)
}

/**
 * Build a Query to search for an entry or entries in a doc.
 *
 * Use this with `QueryOptions` to determine sorting, grouping, and pagination.
 */
public protocol QueryProtocol: AnyObject {
    /**
     * Get the limit for this query (max. number of entries to emit).
     */
    func limit() -> UInt64?

    /**
     * Get the offset for this query (number of entries to skip at the beginning).
     */
    func offset() -> UInt64
}

/**
 * Build a Query to search for an entry or entries in a doc.
 *
 * Use this with `QueryOptions` to determine sorting, grouping, and pagination.
 */
open class Query:
    QueryProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_query(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_query(pointer, $0) }
    }

    /**
     * Query all records.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func all(opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_all(
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query all entries for by a single author.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func author(author: AuthorId, opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_author(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Create a Query for a single key and author.
     */
    public static func authorKeyExact(author: AuthorId, key: Data) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_author_key_exact(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterData.lower(key), $0
            )
        })
    }

    /**
     * Create a query for all entries of a single author with a given key prefix.
     *
     * If `opts` is `None`, the default values will be used:
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func authorKeyPrefix(author: AuthorId, prefix: Data, opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_author_key_prefix(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterData.lower(prefix),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query all entries that have an exact key.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func keyExact(key: Data, opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_key_exact(
                FfiConverterData.lower(key),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Create a query for all entries with a given key prefix.
     *
     * If `opts` is `None`, the default values will be used:
     *     sort_by: SortBy::AuthorKey
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func keyPrefix(prefix: Data, opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_key_prefix(
                FfiConverterData.lower(prefix),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query only the latest entry for each key, omitting older entries if the entry was written
     * to by multiple authors.
     *
     * If `opts` is `None`, the default values will be used:
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func singleLatestPerKey(opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_single_latest_per_key(
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Query only the latest entry for this exact key, omitting older entries if the entry was written
     * to by multiple authors.
     */
    public static func singleLatestPerKeyExact(exact: Data) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_single_latest_per_key_exact(
                FfiConverterData.lower(exact), $0
            )
        })
    }

    /**
     * Query only the latest entry for each key, with this prefix, omitting older entries if the entry was written
     * to by multiple authors.
     *
     * If `opts` is `None`, the default values will be used:
     *     direction: SortDirection::Asc
     *     offset: None
     *     limit: None
     */
    public static func singleLatestPerKeyPrefix(prefix: Data, opts: QueryOptions?) -> Query {
        return try! FfiConverterTypeQuery.lift(try! rustCall {
            uniffi_iroh_fn_constructor_query_single_latest_per_key_prefix(
                FfiConverterData.lower(prefix),
                FfiConverterOptionTypeQueryOptions.lower(opts), $0
            )
        })
    }

    /**
     * Get the limit for this query (max. number of entries to emit).
     */
    open func limit() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(try! rustCall {
            uniffi_iroh_fn_method_query_limit(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Get the offset for this query (number of entries to skip at the beginning).
     */
    open func offset() -> UInt64 {
        return try! FfiConverterUInt64.lift(try! rustCall {
            uniffi_iroh_fn_method_query_offset(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeQuery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Query

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
        return Query(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Query) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Query {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Query, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeQuery_lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
    return try FfiConverterTypeQuery.lift(pointer)
}

public func FfiConverterTypeQuery_lower(_ value: Query) -> UnsafeMutableRawPointer {
    return FfiConverterTypeQuery.lower(value)
}

/**
 * A chunk range specification as a sequence of chunk offsets
 */
public protocol RangeSpecProtocol: AnyObject {
    /**
     * Check if this [`RangeSpec`] selects all chunks in the blob
     */
    func isAll() -> Bool

    /**
     * Checks if this [`RangeSpec`] does not select any chunks in the blob
     */
    func isEmpty() -> Bool
}

/**
 * A chunk range specification as a sequence of chunk offsets
 */
open class RangeSpec:
    RangeSpecProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_rangespec(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_rangespec(pointer, $0) }
    }

    /**
     * Check if this [`RangeSpec`] selects all chunks in the blob
     */
    open func isAll() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_rangespec_is_all(self.uniffiClonePointer(), $0)
        })
    }

    /**
     * Checks if this [`RangeSpec`] does not select any chunks in the blob
     */
    open func isEmpty() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_iroh_fn_method_rangespec_is_empty(self.uniffiClonePointer(), $0)
        })
    }
}

public struct FfiConverterTypeRangeSpec: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RangeSpec

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RangeSpec {
        return RangeSpec(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RangeSpec) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RangeSpec {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RangeSpec, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeRangeSpec_lift(_ pointer: UnsafeMutableRawPointer) throws -> RangeSpec {
    return try FfiConverterTypeRangeSpec.lift(pointer)
}

public func FfiConverterTypeRangeSpec_lower(_ value: RangeSpec) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRangeSpec.lower(value)
}

/**
 * An option for commands that allow setting a tag
 */
public protocol SetTagOptionProtocol: AnyObject {}

/**
 * An option for commands that allow setting a tag
 */
open class SetTagOption:
    SetTagOptionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_settagoption(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_settagoption(pointer, $0) }
    }

    /**
     * Indicate you want an automatically generated tag
     */
    public static func auto() -> SetTagOption {
        return try! FfiConverterTypeSetTagOption.lift(try! rustCall {
            uniffi_iroh_fn_constructor_settagoption_auto($0
            )
        })
    }

    /**
     * Indicate you want a named tag
     */
    public static func named(tag: Data) -> SetTagOption {
        return try! FfiConverterTypeSetTagOption.lift(try! rustCall {
            uniffi_iroh_fn_constructor_settagoption_named(
                FfiConverterData.lower(tag), $0
            )
        })
    }
}

public struct FfiConverterTypeSetTagOption: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SetTagOption

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SetTagOption {
        return SetTagOption(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SetTagOption) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SetTagOption {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SetTagOption, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSetTagOption_lift(_ pointer: UnsafeMutableRawPointer) throws -> SetTagOption {
    return try FfiConverterTypeSetTagOption.lift(pointer)
}

public func FfiConverterTypeSetTagOption_lower(_ value: SetTagOption) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSetTagOption.lower(value)
}

/**
 * The `progress` method will be called for each `SubscribeProgress` event that is
 * emitted during a `node.doc_subscribe`. Use the `SubscribeProgress.type()`
 * method to check the `LiveEvent`
 */
public protocol SubscribeCallback: AnyObject {
    func event(event: LiveEvent) throws
}

/**
 * The `progress` method will be called for each `SubscribeProgress` event that is
 * emitted during a `node.doc_subscribe`. Use the `SubscribeProgress.type()`
 * method to check the `LiveEvent`
 */
open class SubscribeCallbackImpl:
    SubscribeCallback
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_subscribecallback(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_subscribecallback(pointer, $0) }
    }

    open func event(event: LiveEvent) throws { try rustCallWithError(FfiConverterTypeCallbackError.lift) {
        uniffi_iroh_fn_method_subscribecallback_event(self.uniffiClonePointer(),
                                                      FfiConverterTypeLiveEvent.lower(event), $0)
    }
    }
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceSubscribeCallback {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSubscribeCallback = .init(
        event: { (
            uniffiHandle: UInt64,
            event: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterTypeSubscribeCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.event(
                    event: FfiConverterTypeLiveEvent.lift(event)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeCallbackError.lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterTypeSubscribeCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface SubscribeCallback: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSubscribeCallback() {
    uniffi_iroh_fn_init_callback_vtable_subscribecallback(&UniffiCallbackInterfaceSubscribeCallback.vtable)
}

public struct FfiConverterTypeSubscribeCallback: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<SubscribeCallback>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SubscribeCallback

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SubscribeCallback {
        return SubscribeCallbackImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SubscribeCallback) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubscribeCallback {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SubscribeCallback, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSubscribeCallback_lift(_ pointer: UnsafeMutableRawPointer) throws -> SubscribeCallback {
    return try FfiConverterTypeSubscribeCallback.lift(pointer)
}

public func FfiConverterTypeSubscribeCallback_lower(_ value: SubscribeCallback) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSubscribeCallback.lower(value)
}

/**
 * Whether to wrap the added data in a collection.
 */
public protocol WrapOptionProtocol: AnyObject {}

/**
 * Whether to wrap the added data in a collection.
 */
open class WrapOption:
    WrapOptionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_iroh_fn_clone_wrapoption(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_iroh_fn_free_wrapoption(pointer, $0) }
    }

    /**
     * Indicate you do not wrap the file or directory.
     */
    public static func noWrap() -> WrapOption {
        return try! FfiConverterTypeWrapOption.lift(try! rustCall {
            uniffi_iroh_fn_constructor_wrapoption_no_wrap($0
            )
        })
    }

    /**
     * Indicate you want to wrap the file or directory in a colletion, with an optional name
     */
    public static func wrap(name: String?) -> WrapOption {
        return try! FfiConverterTypeWrapOption.lift(try! rustCall {
            uniffi_iroh_fn_constructor_wrapoption_wrap(
                FfiConverterOptionString.lower(name), $0
            )
        })
    }
}

public struct FfiConverterTypeWrapOption: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = WrapOption

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> WrapOption {
        return WrapOption(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: WrapOption) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WrapOption {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: WrapOption, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeWrapOption_lift(_ pointer: UnsafeMutableRawPointer) throws -> WrapOption {
    return try FfiConverterTypeWrapOption.lift(pointer)
}

public func FfiConverterTypeWrapOption_lower(_ value: WrapOption) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWrapOption.lower(value)
}

/**
 * An AddProgress event indicating we got an error and need to abort
 */
public struct AddProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The error message
         */ error: String
    ) {
        self.error = error
    }
}

extension AddProgressAbort: Equatable, Hashable {
    public static func == (lhs: AddProgressAbort, rhs: AddProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeAddProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressAbort {
        return
            try AddProgressAbort(
                error: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: AddProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeAddProgressAbort_lift(_ buf: RustBuffer) throws -> AddProgressAbort {
    return try FfiConverterTypeAddProgressAbort.lift(buf)
}

public func FfiConverterTypeAddProgressAbort_lower(_ value: AddProgressAbort) -> RustBuffer {
    return FfiConverterTypeAddProgressAbort.lower(value)
}

/**
 * An AddProgress event indicating we are done with the the whole operation
 */
public struct AddProgressAllDone {
    /**
     * The hash of the created data.
     */
    public var hash: Hash
    /**
     * The format of the added data.
     */
    public var format: BlobFormat
    /**
     * The tag of the added data.
     */
    public var tag: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The hash of the created data.
         */ hash: Hash,
        /**
            * The format of the added data.
            */ format: BlobFormat,
        /**
            * The tag of the added data.
            */ tag: Data
    ) {
        self.hash = hash
        self.format = format
        self.tag = tag
    }
}

public struct FfiConverterTypeAddProgressAllDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressAllDone {
        return
            try AddProgressAllDone(
                hash: FfiConverterTypeHash.read(from: &buf),
                format: FfiConverterTypeBlobFormat.read(from: &buf),
                tag: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: AddProgressAllDone, into buf: inout [UInt8]) {
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterTypeBlobFormat.write(value.format, into: &buf)
        FfiConverterData.write(value.tag, into: &buf)
    }
}

public func FfiConverterTypeAddProgressAllDone_lift(_ buf: RustBuffer) throws -> AddProgressAllDone {
    return try FfiConverterTypeAddProgressAllDone.lift(buf)
}

public func FfiConverterTypeAddProgressAllDone_lower(_ value: AddProgressAllDone) -> RustBuffer {
    return FfiConverterTypeAddProgressAllDone.lower(value)
}

/**
 * An AddProgress event indicated we are done with `id` and now have a hash `hash`
 */
public struct AddProgressDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash
    ) {
        self.id = id
        self.hash = hash
    }
}

public struct FfiConverterTypeAddProgressDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressDone {
        return
            try AddProgressDone(
                id: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: AddProgressDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeAddProgressDone_lift(_ buf: RustBuffer) throws -> AddProgressDone {
    return try FfiConverterTypeAddProgressDone.lift(buf)
}

public func FfiConverterTypeAddProgressDone_lower(_ value: AddProgressDone) -> RustBuffer {
    return FfiConverterTypeAddProgressDone.lower(value)
}

/**
 * An AddProgress event indicating an item was found with name `name`, that can be referred to by `id`
 */
public struct AddProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The name of the entry.
     */
    public var name: String
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A new unique id for this entry.
         */ id: UInt64,
        /**
            * The name of the entry.
            */ name: String,
        /**
            * The size of the entry in bytes.
            */ size: UInt64
    ) {
        self.id = id
        self.name = name
        self.size = size
    }
}

extension AddProgressFound: Equatable, Hashable {
    public static func == (lhs: AddProgressFound, rhs: AddProgressFound) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(size)
    }
}

public struct FfiConverterTypeAddProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressFound {
        return
            try AddProgressFound(
                id: FfiConverterUInt64.read(from: &buf),
                name: FfiConverterString.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: AddProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeAddProgressFound_lift(_ buf: RustBuffer) throws -> AddProgressFound {
    return try FfiConverterTypeAddProgressFound.lift(buf)
}

public func FfiConverterTypeAddProgressFound_lower(_ value: AddProgressFound) -> RustBuffer {
    return FfiConverterTypeAddProgressFound.lower(value)
}

/**
 * An AddProgress event indicating we got progress ingesting item `id`.
 */
public struct AddProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The offset of the progress, in bytes.
            */ offset: UInt64
    ) {
        self.id = id
        self.offset = offset
    }
}

extension AddProgressProgress: Equatable, Hashable {
    public static func == (lhs: AddProgressProgress, rhs: AddProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeAddProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressProgress {
        return
            try AddProgressProgress(
                id: FfiConverterUInt64.read(from: &buf),
                offset: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: AddProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeAddProgressProgress_lift(_ buf: RustBuffer) throws -> AddProgressProgress {
    return try FfiConverterTypeAddProgressProgress.lift(buf)
}

public func FfiConverterTypeAddProgressProgress_lower(_ value: AddProgressProgress) -> RustBuffer {
    return FfiConverterTypeAddProgressProgress.lower(value)
}

/**
 * Outcome of a blob add operation.
 */
public struct BlobAddOutcome {
    /**
     * The hash of the blob
     */
    public var hash: Hash
    /**
     * The format the blob
     */
    public var format: BlobFormat
    /**
     * The size of the blob
     */
    public var size: UInt64
    /**
     * The tag of the blob
     */
    public var tag: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The hash of the blob
         */ hash: Hash,
        /**
            * The format the blob
            */ format: BlobFormat,
        /**
            * The size of the blob
            */ size: UInt64,
        /**
            * The tag of the blob
            */ tag: Data
    ) {
        self.hash = hash
        self.format = format
        self.size = size
        self.tag = tag
    }
}

public struct FfiConverterTypeBlobAddOutcome: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobAddOutcome {
        return
            try BlobAddOutcome(
                hash: FfiConverterTypeHash.read(from: &buf),
                format: FfiConverterTypeBlobFormat.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf),
                tag: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: BlobAddOutcome, into buf: inout [UInt8]) {
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterTypeBlobFormat.write(value.format, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterData.write(value.tag, into: &buf)
    }
}

public func FfiConverterTypeBlobAddOutcome_lift(_ buf: RustBuffer) throws -> BlobAddOutcome {
    return try FfiConverterTypeBlobAddOutcome.lift(buf)
}

public func FfiConverterTypeBlobAddOutcome_lower(_ value: BlobAddOutcome) -> RustBuffer {
    return FfiConverterTypeBlobAddOutcome.lower(value)
}

/**
 * A response to a list blobs request
 */
public struct BlobInfo {
    /**
     * Location of the blob
     */
    public var path: String
    /**
     * The hash of the blob
     */
    public var hash: Hash
    /**
     * The size of the blob
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Location of the blob
         */ path: String,
        /**
            * The hash of the blob
            */ hash: Hash,
        /**
            * The size of the blob
            */ size: UInt64
    ) {
        self.path = path
        self.hash = hash
        self.size = size
    }
}

public struct FfiConverterTypeBlobInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobInfo {
        return
            try BlobInfo(
                path: FfiConverterString.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: BlobInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeBlobInfo_lift(_ buf: RustBuffer) throws -> BlobInfo {
    return try FfiConverterTypeBlobInfo.lift(buf)
}

public func FfiConverterTypeBlobInfo_lower(_ value: BlobInfo) -> RustBuffer {
    return FfiConverterTypeBlobInfo.lower(value)
}

/**
 * A response to a list collections request
 */
public struct CollectionInfo {
    /**
     * Tag of the collection
     */
    public var tag: Data
    /**
     * Hash of the collection
     */
    public var hash: Hash
    /**
     * Number of children in the collection
     *
     * This is an optional field, because the data is not always available.
     */
    public var totalBlobsCount: UInt64?
    /**
     * Total size of the raw data referred to by all links
     *
     * This is an optional field, because the data is not always available.
     */
    public var totalBlobsSize: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Tag of the collection
         */ tag: Data,
        /**
            * Hash of the collection
            */ hash: Hash,
        /**
            * Number of children in the collection
            *
            * This is an optional field, because the data is not always available.
            */ totalBlobsCount: UInt64?,
        /**
            * Total size of the raw data referred to by all links
            *
            * This is an optional field, because the data is not always available.
            */ totalBlobsSize: UInt64?
    ) {
        self.tag = tag
        self.hash = hash
        self.totalBlobsCount = totalBlobsCount
        self.totalBlobsSize = totalBlobsSize
    }
}

public struct FfiConverterTypeCollectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CollectionInfo {
        return
            try CollectionInfo(
                tag: FfiConverterData.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf),
                totalBlobsCount: FfiConverterOptionUInt64.read(from: &buf),
                totalBlobsSize: FfiConverterOptionUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: CollectionInfo, into buf: inout [UInt8]) {
        FfiConverterData.write(value.tag, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterOptionUInt64.write(value.totalBlobsCount, into: &buf)
        FfiConverterOptionUInt64.write(value.totalBlobsSize, into: &buf)
    }
}

public func FfiConverterTypeCollectionInfo_lift(_ buf: RustBuffer) throws -> CollectionInfo {
    return try FfiConverterTypeCollectionInfo.lift(buf)
}

public func FfiConverterTypeCollectionInfo_lower(_ value: CollectionInfo) -> RustBuffer {
    return FfiConverterTypeCollectionInfo.lower(value)
}

/**
 * Information about a connection
 */
public struct ConnectionInfo {
    /**
     * The node identifier of the endpoint. Also a public key.
     */
    public var nodeId: PublicKey
    /**
     * Relay url, if available.
     */
    public var relayUrl: String?
    /**
     * List of addresses at which this node might be reachable, plus any latency information we
     * have about that address and the last time the address was used.
     */
    public var addrs: [DirectAddrInfo]
    /**
     * The type of connection we have to the peer, either direct or over relay.
     */
    public var connType: ConnectionType
    /**
     * The latency of the `conn_type`.
     */
    public var latency: TimeInterval?
    /**
     * Duration since the last time this peer was used.
     */
    public var lastUsed: TimeInterval?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The node identifier of the endpoint. Also a public key.
         */ nodeId: PublicKey,
        /**
            * Relay url, if available.
            */ relayUrl: String?,
        /**
            * List of addresses at which this node might be reachable, plus any latency information we
            * have about that address and the last time the address was used.
            */ addrs: [DirectAddrInfo],
        /**
            * The type of connection we have to the peer, either direct or over relay.
            */ connType: ConnectionType,
        /**
            * The latency of the `conn_type`.
            */ latency: TimeInterval?,
        /**
            * Duration since the last time this peer was used.
            */ lastUsed: TimeInterval?
    ) {
        self.nodeId = nodeId
        self.relayUrl = relayUrl
        self.addrs = addrs
        self.connType = connType
        self.latency = latency
        self.lastUsed = lastUsed
    }
}

public struct FfiConverterTypeConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionInfo {
        return
            try ConnectionInfo(
                nodeId: FfiConverterTypePublicKey.read(from: &buf),
                relayUrl: FfiConverterOptionString.read(from: &buf),
                addrs: FfiConverterSequenceTypeDirectAddrInfo.read(from: &buf),
                connType: FfiConverterTypeConnectionType.read(from: &buf),
                latency: FfiConverterOptionDuration.read(from: &buf),
                lastUsed: FfiConverterOptionDuration.read(from: &buf)
            )
    }

    public static func write(_ value: ConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.nodeId, into: &buf)
        FfiConverterOptionString.write(value.relayUrl, into: &buf)
        FfiConverterSequenceTypeDirectAddrInfo.write(value.addrs, into: &buf)
        FfiConverterTypeConnectionType.write(value.connType, into: &buf)
        FfiConverterOptionDuration.write(value.latency, into: &buf)
        FfiConverterOptionDuration.write(value.lastUsed, into: &buf)
    }
}

public func FfiConverterTypeConnectionInfo_lift(_ buf: RustBuffer) throws -> ConnectionInfo {
    return try FfiConverterTypeConnectionInfo.lift(buf)
}

public func FfiConverterTypeConnectionInfo_lower(_ value: ConnectionInfo) -> RustBuffer {
    return FfiConverterTypeConnectionInfo.lower(value)
}

/**
 * The socket address and url id of the mixed connection
 */
public struct ConnectionTypeMixed {
    /**
     * Address of the node
     */
    public var addr: String
    /**
     * Url of the relay node to which the node is connected
     */
    public var relayUrl: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Address of the node
         */ addr: String,
        /**
            * Url of the relay node to which the node is connected
            */ relayUrl: String
    ) {
        self.addr = addr
        self.relayUrl = relayUrl
    }
}

extension ConnectionTypeMixed: Equatable, Hashable {
    public static func == (lhs: ConnectionTypeMixed, rhs: ConnectionTypeMixed) -> Bool {
        if lhs.addr != rhs.addr {
            return false
        }
        if lhs.relayUrl != rhs.relayUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addr)
        hasher.combine(relayUrl)
    }
}

public struct FfiConverterTypeConnectionTypeMixed: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionTypeMixed {
        return
            try ConnectionTypeMixed(
                addr: FfiConverterString.read(from: &buf),
                relayUrl: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: ConnectionTypeMixed, into buf: inout [UInt8]) {
        FfiConverterString.write(value.addr, into: &buf)
        FfiConverterString.write(value.relayUrl, into: &buf)
    }
}

public func FfiConverterTypeConnectionTypeMixed_lift(_ buf: RustBuffer) throws -> ConnectionTypeMixed {
    return try FfiConverterTypeConnectionTypeMixed.lift(buf)
}

public func FfiConverterTypeConnectionTypeMixed_lower(_ value: ConnectionTypeMixed) -> RustBuffer {
    return FfiConverterTypeConnectionTypeMixed.lower(value)
}

/**
 * Stats counter
 */
public struct CounterStats {
    /**
     * The counter value
     */
    public var value: UInt32
    /**
     * The counter description
     */
    public var description: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The counter value
         */ value: UInt32,
        /**
            * The counter description
            */ description: String
    ) {
        self.value = value
        self.description = description
    }
}

extension CounterStats: Equatable, Hashable {
    public static func == (lhs: CounterStats, rhs: CounterStats) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(description)
    }
}

public struct FfiConverterTypeCounterStats: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CounterStats {
        return
            try CounterStats(
                value: FfiConverterUInt32.read(from: &buf),
                description: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: CounterStats, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.value, into: &buf)
        FfiConverterString.write(value.description, into: &buf)
    }
}

public func FfiConverterTypeCounterStats_lift(_ buf: RustBuffer) throws -> CounterStats {
    return try FfiConverterTypeCounterStats.lift(buf)
}

public func FfiConverterTypeCounterStats_lower(_ value: CounterStats) -> RustBuffer {
    return FfiConverterTypeCounterStats.lower(value)
}

/**
 * A DocExportProgress event indicating we got an error and need to abort
 */
public struct DocExportProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The error message
         */ error: String
    ) {
        self.error = error
    }
}

extension DocExportProgressAbort: Equatable, Hashable {
    public static func == (lhs: DocExportProgressAbort, rhs: DocExportProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDocExportProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressAbort {
        return
            try DocExportProgressAbort(
                error: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: DocExportProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressAbort_lift(_ buf: RustBuffer) throws -> DocExportProgressAbort {
    return try FfiConverterTypeDocExportProgressAbort.lift(buf)
}

public func FfiConverterTypeDocExportProgressAbort_lower(_ value: DocExportProgressAbort) -> RustBuffer {
    return FfiConverterTypeDocExportProgressAbort.lower(value)
}

/**
 * A DocExportProgress event indicating a file was found with name `name`, from now on referred to via `id`
 */
public struct DocExportProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64
    /**
     * The path where we are writing the entry
     */
    public var outpath: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A new unique id for this entry.
         */ id: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash,
        /**
            * The size of the entry in bytes.
            */ size: UInt64,
        /**
            * The path where we are writing the entry
            */ outpath: String
    ) {
        self.id = id
        self.hash = hash
        self.size = size
        self.outpath = outpath
    }
}

public struct FfiConverterTypeDocExportProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressFound {
        return
            try DocExportProgressFound(
                id: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf),
                outpath: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: DocExportProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterString.write(value.outpath, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressFound_lift(_ buf: RustBuffer) throws -> DocExportProgressFound {
    return try FfiConverterTypeDocExportProgressFound.lift(buf)
}

public func FfiConverterTypeDocExportProgressFound_lower(_ value: DocExportProgressFound) -> RustBuffer {
    return FfiConverterTypeDocExportProgressFound.lower(value)
}

/**
 * A DocExportProgress event indicating we've made progress exporting item `id`.
 */
public struct DocExportProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The offset of the progress, in bytes.
            */ offset: UInt64
    ) {
        self.id = id
        self.offset = offset
    }
}

extension DocExportProgressProgress: Equatable, Hashable {
    public static func == (lhs: DocExportProgressProgress, rhs: DocExportProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDocExportProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressProgress {
        return
            try DocExportProgressProgress(
                id: FfiConverterUInt64.read(from: &buf),
                offset: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DocExportProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDocExportProgressProgress_lift(_ buf: RustBuffer) throws -> DocExportProgressProgress {
    return try FfiConverterTypeDocExportProgressProgress.lift(buf)
}

public func FfiConverterTypeDocExportProgressProgress_lower(_ value: DocExportProgressProgress) -> RustBuffer {
    return FfiConverterTypeDocExportProgressProgress.lower(value)
}

/**
 * A DocImportProgress event indicating we got an error and need to abort
 */
public struct DocImportProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The error message
         */ error: String
    ) {
        self.error = error
    }
}

extension DocImportProgressAbort: Equatable, Hashable {
    public static func == (lhs: DocImportProgressAbort, rhs: DocImportProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDocImportProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressAbort {
        return
            try DocImportProgressAbort(
                error: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: DocImportProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressAbort_lift(_ buf: RustBuffer) throws -> DocImportProgressAbort {
    return try FfiConverterTypeDocImportProgressAbort.lift(buf)
}

public func FfiConverterTypeDocImportProgressAbort_lower(_ value: DocImportProgressAbort) -> RustBuffer {
    return FfiConverterTypeDocImportProgressAbort.lower(value)
}

/**
 * A DocImportProgress event indicating we are done setting the entry to the doc
 */
public struct DocImportProgressAllDone {
    /**
     * The key of the entry
     */
    public var key: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The key of the entry
         */ key: Data
    ) {
        self.key = key
    }
}

extension DocImportProgressAllDone: Equatable, Hashable {
    public static func == (lhs: DocImportProgressAllDone, rhs: DocImportProgressAllDone) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
    }
}

public struct FfiConverterTypeDocImportProgressAllDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressAllDone {
        return
            try DocImportProgressAllDone(
                key: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: DocImportProgressAllDone, into buf: inout [UInt8]) {
        FfiConverterData.write(value.key, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressAllDone_lift(_ buf: RustBuffer) throws -> DocImportProgressAllDone {
    return try FfiConverterTypeDocImportProgressAllDone.lift(buf)
}

public func FfiConverterTypeDocImportProgressAllDone_lower(_ value: DocImportProgressAllDone) -> RustBuffer {
    return FfiConverterTypeDocImportProgressAllDone.lower(value)
}

/**
 * A DocImportProgress event indicating a file was found with name `name`, from now on referred to via `id`
 */
public struct DocImportProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * The name of the entry.
     */
    public var name: String
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A new unique id for this entry.
         */ id: UInt64,
        /**
            * The name of the entry.
            */ name: String,
        /**
            * The size of the entry in bytes.
            */ size: UInt64
    ) {
        self.id = id
        self.name = name
        self.size = size
    }
}

extension DocImportProgressFound: Equatable, Hashable {
    public static func == (lhs: DocImportProgressFound, rhs: DocImportProgressFound) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(size)
    }
}

public struct FfiConverterTypeDocImportProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressFound {
        return
            try DocImportProgressFound(
                id: FfiConverterUInt64.read(from: &buf),
                name: FfiConverterString.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DocImportProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressFound_lift(_ buf: RustBuffer) throws -> DocImportProgressFound {
    return try FfiConverterTypeDocImportProgressFound.lift(buf)
}

public func FfiConverterTypeDocImportProgressFound_lower(_ value: DocImportProgressFound) -> RustBuffer {
    return FfiConverterTypeDocImportProgressFound.lower(value)
}

/**
 * A DocImportProgress event indicating we are finished adding `id` to the data store and the hash is `hash`.
 */
public struct DocImportProgressIngestDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash
    ) {
        self.id = id
        self.hash = hash
    }
}

public struct FfiConverterTypeDocImportProgressIngestDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressIngestDone {
        return
            try DocImportProgressIngestDone(
                id: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: DocImportProgressIngestDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressIngestDone_lift(_ buf: RustBuffer) throws -> DocImportProgressIngestDone {
    return try FfiConverterTypeDocImportProgressIngestDone.lift(buf)
}

public func FfiConverterTypeDocImportProgressIngestDone_lower(_ value: DocImportProgressIngestDone) -> RustBuffer {
    return FfiConverterTypeDocImportProgressIngestDone.lower(value)
}

/**
 * A DocImportProgress event indicating we've made progress ingesting item `id`.
 */
public struct DocImportProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The offset of the progress, in bytes.
            */ offset: UInt64
    ) {
        self.id = id
        self.offset = offset
    }
}

extension DocImportProgressProgress: Equatable, Hashable {
    public static func == (lhs: DocImportProgressProgress, rhs: DocImportProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDocImportProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressProgress {
        return
            try DocImportProgressProgress(
                id: FfiConverterUInt64.read(from: &buf),
                offset: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DocImportProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDocImportProgressProgress_lift(_ buf: RustBuffer) throws -> DocImportProgressProgress {
    return try FfiConverterTypeDocImportProgressProgress.lift(buf)
}

public func FfiConverterTypeDocImportProgressProgress_lower(_ value: DocImportProgressProgress) -> RustBuffer {
    return FfiConverterTypeDocImportProgressProgress.lower(value)
}

/**
 * A DownloadProgress event indicating we got an error and need to abort
 */
public struct DownloadProgressAbort {
    /**
     * The error message
     */
    public var error: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The error message
         */ error: String
    ) {
        self.error = error
    }
}

extension DownloadProgressAbort: Equatable, Hashable {
    public static func == (lhs: DownloadProgressAbort, rhs: DownloadProgressAbort) -> Bool {
        if lhs.error != rhs.error {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(error)
    }
}

public struct FfiConverterTypeDownloadProgressAbort: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressAbort {
        return
            try DownloadProgressAbort(
                error: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressAbort, into buf: inout [UInt8]) {
        FfiConverterString.write(value.error, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressAbort_lift(_ buf: RustBuffer) throws -> DownloadProgressAbort {
    return try FfiConverterTypeDownloadProgressAbort.lift(buf)
}

public func FfiConverterTypeDownloadProgressAbort_lower(_ value: DownloadProgressAbort) -> RustBuffer {
    return FfiConverterTypeDownloadProgressAbort.lower(value)
}

/**
 * A DownloadProgress event indicating we are done with the whole operation
 */
public struct DownloadProgressAllDone {
    /**
     * The number of bytes written
     */
    public var bytesWritten: UInt64
    /**
     * The number of bytes read
     */
    public var bytesRead: UInt64
    /**
     * The time it took to transfer the data
     */
    public var elapsed: TimeInterval

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The number of bytes written
         */ bytesWritten: UInt64,
        /**
            * The number of bytes read
            */ bytesRead: UInt64,
        /**
            * The time it took to transfer the data
            */ elapsed: TimeInterval
    ) {
        self.bytesWritten = bytesWritten
        self.bytesRead = bytesRead
        self.elapsed = elapsed
    }
}

extension DownloadProgressAllDone: Equatable, Hashable {
    public static func == (lhs: DownloadProgressAllDone, rhs: DownloadProgressAllDone) -> Bool {
        if lhs.bytesWritten != rhs.bytesWritten {
            return false
        }
        if lhs.bytesRead != rhs.bytesRead {
            return false
        }
        if lhs.elapsed != rhs.elapsed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytesWritten)
        hasher.combine(bytesRead)
        hasher.combine(elapsed)
    }
}

public struct FfiConverterTypeDownloadProgressAllDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressAllDone {
        return
            try DownloadProgressAllDone(
                bytesWritten: FfiConverterUInt64.read(from: &buf),
                bytesRead: FfiConverterUInt64.read(from: &buf),
                elapsed: FfiConverterDuration.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressAllDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.bytesWritten, into: &buf)
        FfiConverterUInt64.write(value.bytesRead, into: &buf)
        FfiConverterDuration.write(value.elapsed, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressAllDone_lift(_ buf: RustBuffer) throws -> DownloadProgressAllDone {
    return try FfiConverterTypeDownloadProgressAllDone.lift(buf)
}

public func FfiConverterTypeDownloadProgressAllDone_lower(_ value: DownloadProgressAllDone) -> RustBuffer {
    return FfiConverterTypeDownloadProgressAllDone.lower(value)
}

/**
 * A DownloadProgress event indicated we are done with `id`
 */
public struct DownloadProgressDone {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64
    ) {
        self.id = id
    }
}

extension DownloadProgressDone: Equatable, Hashable {
    public static func == (lhs: DownloadProgressDone, rhs: DownloadProgressDone) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
}

public struct FfiConverterTypeDownloadProgressDone: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressDone {
        return
            try DownloadProgressDone(
                id: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressDone, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressDone_lift(_ buf: RustBuffer) throws -> DownloadProgressDone {
    return try FfiConverterTypeDownloadProgressDone.lift(buf)
}

public func FfiConverterTypeDownloadProgressDone_lower(_ value: DownloadProgressDone) -> RustBuffer {
    return FfiConverterTypeDownloadProgressDone.lower(value)
}

/**
 * A DownloadProgress event indicating an item was found with hash `hash`, that can be referred to by `id`
 */
public struct DownloadProgressFound {
    /**
     * A new unique id for this entry.
     */
    public var id: UInt64
    /**
     * child offset
     */
    public var child: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A new unique id for this entry.
         */ id: UInt64,
        /**
            * child offset
            */ child: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash,
        /**
            * The size of the entry in bytes.
            */ size: UInt64
    ) {
        self.id = id
        self.child = child
        self.hash = hash
        self.size = size
    }
}

public struct FfiConverterTypeDownloadProgressFound: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressFound {
        return
            try DownloadProgressFound(
                id: FfiConverterUInt64.read(from: &buf),
                child: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressFound, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.child, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressFound_lift(_ buf: RustBuffer) throws -> DownloadProgressFound {
    return try FfiConverterTypeDownloadProgressFound.lift(buf)
}

public func FfiConverterTypeDownloadProgressFound_lower(_ value: DownloadProgressFound) -> RustBuffer {
    return FfiConverterTypeDownloadProgressFound.lower(value)
}

/**
 * A DownloadProgress event indicating an item was found with hash `hash`, that can be referred to by `id`
 */
public struct DownloadProgressFoundHashSeq {
    /**
     * Number of children in the collection, if known.
     */
    public var children: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Number of children in the collection, if known.
         */ children: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash
    ) {
        self.children = children
        self.hash = hash
    }
}

public struct FfiConverterTypeDownloadProgressFoundHashSeq: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressFoundHashSeq {
        return
            try DownloadProgressFoundHashSeq(
                children: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressFoundHashSeq, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.children, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressFoundHashSeq_lift(_ buf: RustBuffer) throws -> DownloadProgressFoundHashSeq {
    return try FfiConverterTypeDownloadProgressFoundHashSeq.lift(buf)
}

public func FfiConverterTypeDownloadProgressFoundHashSeq_lower(_ value: DownloadProgressFoundHashSeq) -> RustBuffer {
    return FfiConverterTypeDownloadProgressFoundHashSeq.lower(value)
}

/**
 * A DownloadProgress event indicating an entry was found locally
 */
public struct DownloadProgressFoundLocal {
    /**
     * child offset
     */
    public var child: UInt64
    /**
     * The hash of the entry.
     */
    public var hash: Hash
    /**
     * The size of the entry in bytes.
     */
    public var size: UInt64
    /**
     * The ranges that are available locally.
     */
    public var validRanges: RangeSpec

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * child offset
         */ child: UInt64,
        /**
            * The hash of the entry.
            */ hash: Hash,
        /**
            * The size of the entry in bytes.
            */ size: UInt64,
        /**
            * The ranges that are available locally.
            */ validRanges: RangeSpec
    ) {
        self.child = child
        self.hash = hash
        self.size = size
        self.validRanges = validRanges
    }
}

public struct FfiConverterTypeDownloadProgressFoundLocal: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressFoundLocal {
        return
            try DownloadProgressFoundLocal(
                child: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf),
                size: FfiConverterUInt64.read(from: &buf),
                validRanges: FfiConverterTypeRangeSpec.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressFoundLocal, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.child, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterTypeRangeSpec.write(value.validRanges, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressFoundLocal_lift(_ buf: RustBuffer) throws -> DownloadProgressFoundLocal {
    return try FfiConverterTypeDownloadProgressFoundLocal.lift(buf)
}

public func FfiConverterTypeDownloadProgressFoundLocal_lower(_ value: DownloadProgressFoundLocal) -> RustBuffer {
    return FfiConverterTypeDownloadProgressFoundLocal.lower(value)
}

/**
 * A DownloadProgress event indicating we got progress ingesting item `id`.
 */
public struct DownloadProgressProgress {
    /**
     * The unique id of the entry.
     */
    public var id: UInt64
    /**
     * The offset of the progress, in bytes.
     */
    public var offset: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The unique id of the entry.
         */ id: UInt64,
        /**
            * The offset of the progress, in bytes.
            */ offset: UInt64
    ) {
        self.id = id
        self.offset = offset
    }
}

extension DownloadProgressProgress: Equatable, Hashable {
    public static func == (lhs: DownloadProgressProgress, rhs: DownloadProgressProgress) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(offset)
    }
}

public struct FfiConverterTypeDownloadProgressProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressProgress {
        return
            try DownloadProgressProgress(
                id: FfiConverterUInt64.read(from: &buf),
                offset: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: DownloadProgressProgress, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.id, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
    }
}

public func FfiConverterTypeDownloadProgressProgress_lift(_ buf: RustBuffer) throws -> DownloadProgressProgress {
    return try FfiConverterTypeDownloadProgressProgress.lift(buf)
}

public func FfiConverterTypeDownloadProgressProgress_lower(_ value: DownloadProgressProgress) -> RustBuffer {
    return FfiConverterTypeDownloadProgressProgress.lower(value)
}

/**
 * The Hash and associated tag of a newly created collection
 */
public struct HashAndTag {
    /**
     * The hash of the collection
     */
    public var hash: Hash
    /**
     * The tag of the collection
     */
    public var tag: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The hash of the collection
         */ hash: Hash,
        /**
            * The tag of the collection
            */ tag: Data
    ) {
        self.hash = hash
        self.tag = tag
    }
}

public struct FfiConverterTypeHashAndTag: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HashAndTag {
        return
            try HashAndTag(
                hash: FfiConverterTypeHash.read(from: &buf),
                tag: FfiConverterData.read(from: &buf)
            )
    }

    public static func write(_ value: HashAndTag, into buf: inout [UInt8]) {
        FfiConverterTypeHash.write(value.hash, into: &buf)
        FfiConverterData.write(value.tag, into: &buf)
    }
}

public func FfiConverterTypeHashAndTag_lift(_ buf: RustBuffer) throws -> HashAndTag {
    return try FfiConverterTypeHashAndTag.lift(buf)
}

public func FfiConverterTypeHashAndTag_lower(_ value: HashAndTag) -> RustBuffer {
    return FfiConverterTypeHashAndTag.lower(value)
}

/**
 * A response to a list blobs request
 */
public struct IncompleteBlobInfo {
    /**
     * The size we got
     */
    public var size: UInt64
    /**
     * The size we expect
     */
    public var expectedSize: UInt64
    /**
     * The hash of the blob
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The size we got
         */ size: UInt64,
        /**
            * The size we expect
            */ expectedSize: UInt64,
        /**
            * The hash of the blob
            */ hash: Hash
    ) {
        self.size = size
        self.expectedSize = expectedSize
        self.hash = hash
    }
}

public struct FfiConverterTypeIncompleteBlobInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IncompleteBlobInfo {
        return
            try IncompleteBlobInfo(
                size: FfiConverterUInt64.read(from: &buf),
                expectedSize: FfiConverterUInt64.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: IncompleteBlobInfo, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.size, into: &buf)
        FfiConverterUInt64.write(value.expectedSize, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeIncompleteBlobInfo_lift(_ buf: RustBuffer) throws -> IncompleteBlobInfo {
    return try FfiConverterTypeIncompleteBlobInfo.lift(buf)
}

public func FfiConverterTypeIncompleteBlobInfo_lower(_ value: IncompleteBlobInfo) -> RustBuffer {
    return FfiConverterTypeIncompleteBlobInfo.lower(value)
}

/**
 * Outcome of an InsertRemove event.
 */
public struct InsertRemoteEvent {
    /**
     * The peer that sent us the entry.
     */
    public var from: PublicKey
    /**
     * The inserted entry.
     */
    public var entry: Entry
    /**
     * If the content is available at the local node
     */
    public var contentStatus: ContentStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The peer that sent us the entry.
         */ from: PublicKey,
        /**
            * The inserted entry.
            */ entry: Entry,
        /**
            * If the content is available at the local node
            */ contentStatus: ContentStatus
    ) {
        self.from = from
        self.entry = entry
        self.contentStatus = contentStatus
    }
}

public struct FfiConverterTypeInsertRemoteEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InsertRemoteEvent {
        return
            try InsertRemoteEvent(
                from: FfiConverterTypePublicKey.read(from: &buf),
                entry: FfiConverterTypeEntry.read(from: &buf),
                contentStatus: FfiConverterTypeContentStatus.read(from: &buf)
            )
    }

    public static func write(_ value: InsertRemoteEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.from, into: &buf)
        FfiConverterTypeEntry.write(value.entry, into: &buf)
        FfiConverterTypeContentStatus.write(value.contentStatus, into: &buf)
    }
}

public func FfiConverterTypeInsertRemoteEvent_lift(_ buf: RustBuffer) throws -> InsertRemoteEvent {
    return try FfiConverterTypeInsertRemoteEvent.lift(buf)
}

public func FfiConverterTypeInsertRemoteEvent_lower(_ value: InsertRemoteEvent) -> RustBuffer {
    return FfiConverterTypeInsertRemoteEvent.lower(value)
}

/**
 * The latency and type of the control message
 */
public struct LatencyAndControlMsg {
    /**
     * The latency of the control message
     */
    public var latency: TimeInterval
    /**
     * The type of control message, represented as a string
     */
    public var controlMsg: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The latency of the control message
         */ latency: TimeInterval,
        /**
            * The type of control message, represented as a string
            */ controlMsg: String
    ) {
        self.latency = latency
        self.controlMsg = controlMsg
    }
}

extension LatencyAndControlMsg: Equatable, Hashable {
    public static func == (lhs: LatencyAndControlMsg, rhs: LatencyAndControlMsg) -> Bool {
        if lhs.latency != rhs.latency {
            return false
        }
        if lhs.controlMsg != rhs.controlMsg {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(latency)
        hasher.combine(controlMsg)
    }
}

public struct FfiConverterTypeLatencyAndControlMsg: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LatencyAndControlMsg {
        return
            try LatencyAndControlMsg(
                latency: FfiConverterDuration.read(from: &buf),
                controlMsg: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: LatencyAndControlMsg, into buf: inout [UInt8]) {
        FfiConverterDuration.write(value.latency, into: &buf)
        FfiConverterString.write(value.controlMsg, into: &buf)
    }
}

public func FfiConverterTypeLatencyAndControlMsg_lift(_ buf: RustBuffer) throws -> LatencyAndControlMsg {
    return try FfiConverterTypeLatencyAndControlMsg.lift(buf)
}

public func FfiConverterTypeLatencyAndControlMsg_lower(_ value: LatencyAndControlMsg) -> RustBuffer {
    return FfiConverterTypeLatencyAndControlMsg.lower(value)
}

/**
 * A `Link` includes a name and a hash for a blob in a collection
 */
public struct LinkAndName {
    /**
     * The name associated with this [`Hash`]
     */
    public var name: String
    /**
     * The [`Hash`] of the blob
     */
    public var link: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The name associated with this [`Hash`]
         */ name: String,
        /**
            * The [`Hash`] of the blob
            */ link: Hash
    ) {
        self.name = name
        self.link = link
    }
}

public struct FfiConverterTypeLinkAndName: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LinkAndName {
        return
            try LinkAndName(
                name: FfiConverterString.read(from: &buf),
                link: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: LinkAndName, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterTypeHash.write(value.link, into: &buf)
    }
}

public func FfiConverterTypeLinkAndName_lift(_ buf: RustBuffer) throws -> LinkAndName {
    return try FfiConverterTypeLinkAndName.lift(buf)
}

public func FfiConverterTypeLinkAndName_lower(_ value: LinkAndName) -> RustBuffer {
    return FfiConverterTypeLinkAndName.lower(value)
}

/**
 * The namespace id and CapabilityKind (read/write) of the doc
 */
public struct NamespaceAndCapability {
    /**
     * The namespace id of the doc
     */
    public var namespace: String
    /**
     * The capability you have for the doc (read/write)
     */
    public var capability: CapabilityKind

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The namespace id of the doc
         */ namespace: String,
        /**
            * The capability you have for the doc (read/write)
            */ capability: CapabilityKind
    ) {
        self.namespace = namespace
        self.capability = capability
    }
}

extension NamespaceAndCapability: Equatable, Hashable {
    public static func == (lhs: NamespaceAndCapability, rhs: NamespaceAndCapability) -> Bool {
        if lhs.namespace != rhs.namespace {
            return false
        }
        if lhs.capability != rhs.capability {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(namespace)
        hasher.combine(capability)
    }
}

public struct FfiConverterTypeNamespaceAndCapability: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NamespaceAndCapability {
        return
            try NamespaceAndCapability(
                namespace: FfiConverterString.read(from: &buf),
                capability: FfiConverterTypeCapabilityKind.read(from: &buf)
            )
    }

    public static func write(_ value: NamespaceAndCapability, into buf: inout [UInt8]) {
        FfiConverterString.write(value.namespace, into: &buf)
        FfiConverterTypeCapabilityKind.write(value.capability, into: &buf)
    }
}

public func FfiConverterTypeNamespaceAndCapability_lift(_ buf: RustBuffer) throws -> NamespaceAndCapability {
    return try FfiConverterTypeNamespaceAndCapability.lift(buf)
}

public func FfiConverterTypeNamespaceAndCapability_lower(_ value: NamespaceAndCapability) -> RustBuffer {
    return FfiConverterTypeNamespaceAndCapability.lower(value)
}

/**
 * Options passed to [`IrohNode.new`]. Controls the behaviour of an iroh node.
 */
public struct NodeOptions {
    /**
     * How frequently the blob store should clean up unreferenced blobs, in milliseconds.
     * Set to 0 to disable gc
     */
    public var gcIntervalMillis: UInt64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * How frequently the blob store should clean up unreferenced blobs, in milliseconds.
         * Set to 0 to disable gc
         */ gcIntervalMillis: UInt64?
    ) {
        self.gcIntervalMillis = gcIntervalMillis
    }
}

extension NodeOptions: Equatable, Hashable {
    public static func == (lhs: NodeOptions, rhs: NodeOptions) -> Bool {
        if lhs.gcIntervalMillis != rhs.gcIntervalMillis {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(gcIntervalMillis)
    }
}

public struct FfiConverterTypeNodeOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeOptions {
        return
            try NodeOptions(
                gcIntervalMillis: FfiConverterOptionUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: NodeOptions, into buf: inout [UInt8]) {
        FfiConverterOptionUInt64.write(value.gcIntervalMillis, into: &buf)
    }
}

public func FfiConverterTypeNodeOptions_lift(_ buf: RustBuffer) throws -> NodeOptions {
    return try FfiConverterTypeNodeOptions.lift(buf)
}

public func FfiConverterTypeNodeOptions_lower(_ value: NodeOptions) -> RustBuffer {
    return FfiConverterTypeNodeOptions.lower(value)
}

/**
 * The state for an open replica.
 */
public struct OpenState {
    /**
     * Whether to accept sync requests for this replica.
     */
    public var sync: Bool
    /**
     * How many event subscriptions are open
     */
    public var subscribers: UInt64
    /**
     * By how many handles the replica is currently held open
     */
    public var handles: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Whether to accept sync requests for this replica.
         */ sync: Bool,
        /**
            * How many event subscriptions are open
            */ subscribers: UInt64,
        /**
            * By how many handles the replica is currently held open
            */ handles: UInt64
    ) {
        self.sync = sync
        self.subscribers = subscribers
        self.handles = handles
    }
}

extension OpenState: Equatable, Hashable {
    public static func == (lhs: OpenState, rhs: OpenState) -> Bool {
        if lhs.sync != rhs.sync {
            return false
        }
        if lhs.subscribers != rhs.subscribers {
            return false
        }
        if lhs.handles != rhs.handles {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sync)
        hasher.combine(subscribers)
        hasher.combine(handles)
    }
}

public struct FfiConverterTypeOpenState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenState {
        return
            try OpenState(
                sync: FfiConverterBool.read(from: &buf),
                subscribers: FfiConverterUInt64.read(from: &buf),
                handles: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: OpenState, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.sync, into: &buf)
        FfiConverterUInt64.write(value.subscribers, into: &buf)
        FfiConverterUInt64.write(value.handles, into: &buf)
    }
}

public func FfiConverterTypeOpenState_lift(_ buf: RustBuffer) throws -> OpenState {
    return try FfiConverterTypeOpenState.lift(buf)
}

public func FfiConverterTypeOpenState_lower(_ value: OpenState) -> RustBuffer {
    return FfiConverterTypeOpenState.lower(value)
}

/**
 * Options for sorting and pagination for using [`Query`]s.
 */
public struct QueryOptions {
    /**
     * Sort by author or key first.
     *
     * Default is [`SortBy::AuthorKey`], so sorting first by author and then by key.
     */
    public var sortBy: SortBy
    /**
     * Direction by which to sort the entries
     *
     * Default is [`SortDirection::Asc`]
     */
    public var direction: SortDirection
    /**
     * Offset
     */
    public var offset: UInt64
    /**
     * Limit to limit the pagination.
     *
     * When the limit is 0, the limit does not exist.
     */
    public var limit: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Sort by author or key first.
         *
         * Default is [`SortBy::AuthorKey`], so sorting first by author and then by key.
         */ sortBy: SortBy,
        /**
            * Direction by which to sort the entries
            *
            * Default is [`SortDirection::Asc`]
            */ direction: SortDirection,
        /**
            * Offset
            */ offset: UInt64,
        /**
            * Limit to limit the pagination.
            *
            * When the limit is 0, the limit does not exist.
            */ limit: UInt64
    ) {
        self.sortBy = sortBy
        self.direction = direction
        self.offset = offset
        self.limit = limit
    }
}

extension QueryOptions: Equatable, Hashable {
    public static func == (lhs: QueryOptions, rhs: QueryOptions) -> Bool {
        if lhs.sortBy != rhs.sortBy {
            return false
        }
        if lhs.direction != rhs.direction {
            return false
        }
        if lhs.offset != rhs.offset {
            return false
        }
        if lhs.limit != rhs.limit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sortBy)
        hasher.combine(direction)
        hasher.combine(offset)
        hasher.combine(limit)
    }
}

public struct FfiConverterTypeQueryOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> QueryOptions {
        return
            try QueryOptions(
                sortBy: FfiConverterTypeSortBy.read(from: &buf),
                direction: FfiConverterTypeSortDirection.read(from: &buf),
                offset: FfiConverterUInt64.read(from: &buf),
                limit: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: QueryOptions, into buf: inout [UInt8]) {
        FfiConverterTypeSortBy.write(value.sortBy, into: &buf)
        FfiConverterTypeSortDirection.write(value.direction, into: &buf)
        FfiConverterUInt64.write(value.offset, into: &buf)
        FfiConverterUInt64.write(value.limit, into: &buf)
    }
}

public func FfiConverterTypeQueryOptions_lift(_ buf: RustBuffer) throws -> QueryOptions {
    return try FfiConverterTypeQueryOptions.lift(buf)
}

public func FfiConverterTypeQueryOptions_lower(_ value: QueryOptions) -> RustBuffer {
    return FfiConverterTypeQueryOptions.lower(value)
}

/**
 * Outcome of a sync operation
 */
public struct SyncEvent {
    /**
     * Peer we synced with
     */
    public var peer: PublicKey
    /**
     * Origin of the sync exchange
     */
    public var origin: Origin
    /**
     * Timestamp when the sync finished
     */
    public var started: Date
    /**
     * Timestamp when the sync started
     */
    public var finished: Date
    /**
     * Result of the sync operation. `None` if successfull.
     */
    public var result: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Peer we synced with
         */ peer: PublicKey,
        /**
            * Origin of the sync exchange
            */ origin: Origin,
        /**
            * Timestamp when the sync finished
            */ started: Date,
        /**
            * Timestamp when the sync started
            */ finished: Date,
        /**
            * Result of the sync operation. `None` if successfull.
            */ result: String?
    ) {
        self.peer = peer
        self.origin = origin
        self.started = started
        self.finished = finished
        self.result = result
    }
}

public struct FfiConverterTypeSyncEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncEvent {
        return
            try SyncEvent(
                peer: FfiConverterTypePublicKey.read(from: &buf),
                origin: FfiConverterTypeOrigin.read(from: &buf),
                started: FfiConverterTimestamp.read(from: &buf),
                finished: FfiConverterTimestamp.read(from: &buf),
                result: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: SyncEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.peer, into: &buf)
        FfiConverterTypeOrigin.write(value.origin, into: &buf)
        FfiConverterTimestamp.write(value.started, into: &buf)
        FfiConverterTimestamp.write(value.finished, into: &buf)
        FfiConverterOptionString.write(value.result, into: &buf)
    }
}

public func FfiConverterTypeSyncEvent_lift(_ buf: RustBuffer) throws -> SyncEvent {
    return try FfiConverterTypeSyncEvent.lift(buf)
}

public func FfiConverterTypeSyncEvent_lower(_ value: SyncEvent) -> RustBuffer {
    return FfiConverterTypeSyncEvent.lower(value)
}

/**
 * A response to a list collections request
 */
public struct TagInfo {
    /**
     * The tag
     */
    public var name: Data
    /**
     * The format of the associated blob
     */
    public var format: BlobFormat
    /**
     * The hash of the associated blob
     */
    public var hash: Hash

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The tag
         */ name: Data,
        /**
            * The format of the associated blob
            */ format: BlobFormat,
        /**
            * The hash of the associated blob
            */ hash: Hash
    ) {
        self.name = name
        self.format = format
        self.hash = hash
    }
}

public struct FfiConverterTypeTagInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TagInfo {
        return
            try TagInfo(
                name: FfiConverterData.read(from: &buf),
                format: FfiConverterTypeBlobFormat.read(from: &buf),
                hash: FfiConverterTypeHash.read(from: &buf)
            )
    }

    public static func write(_ value: TagInfo, into buf: inout [UInt8]) {
        FfiConverterData.write(value.name, into: &buf)
        FfiConverterTypeBlobFormat.write(value.format, into: &buf)
        FfiConverterTypeHash.write(value.hash, into: &buf)
    }
}

public func FfiConverterTypeTagInfo_lift(_ buf: RustBuffer) throws -> TagInfo {
    return try FfiConverterTypeTagInfo.lift(buf)
}

public func FfiConverterTypeTagInfo_lower(_ value: TagInfo) -> RustBuffer {
    return FfiConverterTypeTagInfo.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The different types of AddProgress events
 */

public enum AddProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done with `id`, and the hash is `hash`.
     */
    case done
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeAddProgressType: FfiConverterRustBuffer {
    typealias SwiftType = AddProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .done

        case 4: return .allDone

        case 5: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .done:
            writeInt(&buf, Int32(3))

        case .allDone:
            writeInt(&buf, Int32(4))

        case .abort:
            writeInt(&buf, Int32(5))
        }
    }
}

public func FfiConverterTypeAddProgressType_lift(_ buf: RustBuffer) throws -> AddProgressType {
    return try FfiConverterTypeAddProgressType.lift(buf)
}

public func FfiConverterTypeAddProgressType_lower(_ value: AddProgressType) -> RustBuffer {
    return FfiConverterTypeAddProgressType.lower(value)
}

extension AddProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Options when creating a ticket
 */

public enum AddrInfoOptions {
    /**
     * Only the Node ID is added.
     *
     * This usually means that iroh-dns discovery is used to find address information.
     */
    case id
    /**
     * Include both the relay URL and the direct addresses.
     */
    case relayAndAddresses
    /**
     * Only include the relay URL.
     */
    case relay
    /**
     * Only include the direct addresses.
     */
    case addresses
}

public struct FfiConverterTypeAddrInfoOptions: FfiConverterRustBuffer {
    typealias SwiftType = AddrInfoOptions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddrInfoOptions {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .id

        case 2: return .relayAndAddresses

        case 3: return .relay

        case 4: return .addresses

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddrInfoOptions, into buf: inout [UInt8]) {
        switch value {
        case .id:
            writeInt(&buf, Int32(1))

        case .relayAndAddresses:
            writeInt(&buf, Int32(2))

        case .relay:
            writeInt(&buf, Int32(3))

        case .addresses:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeAddrInfoOptions_lift(_ buf: RustBuffer) throws -> AddrInfoOptions {
    return try FfiConverterTypeAddrInfoOptions.lift(buf)
}

public func FfiConverterTypeAddrInfoOptions_lower(_ value: AddrInfoOptions) -> RustBuffer {
    return FfiConverterTypeAddrInfoOptions.lower(value)
}

extension AddrInfoOptions: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The expected format of a hash being exported.
 */

public enum BlobExportFormat {
    /**
     * The hash refers to any blob and will be exported to a single file.
     */
    case blob
    /**
     * The hash refers to a [`crate::format::collection::Collection`] blob
     * and all children of the collection shall be exported to one file per child.
     *
     * If the blob can be parsed as a [`BlobFormat::HashSeq`], and the first child contains
     * collection metadata, all other children of the collection will be exported to
     * a file each, with their collection name treated as a relative path to the export
     * destination path.
     *
     * If the blob cannot be parsed as a collection, the operation will fail.
     */
    case collection
}

public struct FfiConverterTypeBlobExportFormat: FfiConverterRustBuffer {
    typealias SwiftType = BlobExportFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobExportFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .blob

        case 2: return .collection

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlobExportFormat, into buf: inout [UInt8]) {
        switch value {
        case .blob:
            writeInt(&buf, Int32(1))

        case .collection:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeBlobExportFormat_lift(_ buf: RustBuffer) throws -> BlobExportFormat {
    return try FfiConverterTypeBlobExportFormat.lift(buf)
}

public func FfiConverterTypeBlobExportFormat_lower(_ value: BlobExportFormat) -> RustBuffer {
    return FfiConverterTypeBlobExportFormat.lower(value)
}

extension BlobExportFormat: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The export mode describes how files will be exported.
 *
 * This is a hint to the import trait method. For some implementations, this
 * does not make any sense. E.g. an in memory implementation will always have
 * to copy the file into memory. Also, a disk based implementation might choose
 * to copy small files even if the mode is `Reference`.
 */

public enum BlobExportMode {
    /**
     * This mode will copy the file to the target directory.
     *
     * This is the safe default because the file can not be accidentally modified
     * after it has been exported.
     */
    case copy
    /**
     * This mode will try to move the file to the target directory and then reference it from
     * the database.
     *
     * This has a large performance and storage benefit, but it is less safe since
     * the file might be modified in the target directory after it has been exported.
     *
     * Stores are allowed to ignore this mode and always copy the file, e.g.
     * if the file is very small or if the store does not support referencing files.
     */
    case tryReference
}

public struct FfiConverterTypeBlobExportMode: FfiConverterRustBuffer {
    typealias SwiftType = BlobExportMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobExportMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .copy

        case 2: return .tryReference

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlobExportMode, into buf: inout [UInt8]) {
        switch value {
        case .copy:
            writeInt(&buf, Int32(1))

        case .tryReference:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeBlobExportMode_lift(_ buf: RustBuffer) throws -> BlobExportMode {
    return try FfiConverterTypeBlobExportMode.lift(buf)
}

public func FfiConverterTypeBlobExportMode_lower(_ value: BlobExportMode) -> RustBuffer {
    return FfiConverterTypeBlobExportMode.lower(value)
}

extension BlobExportMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * A format identifier
 */

public enum BlobFormat {
    /**
     * Raw blob
     */
    case raw
    /**
     * A sequence of BLAKE3 hashes
     */
    case hashSeq
}

public struct FfiConverterTypeBlobFormat: FfiConverterRustBuffer {
    typealias SwiftType = BlobFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlobFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .raw

        case 2: return .hashSeq

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlobFormat, into buf: inout [UInt8]) {
        switch value {
        case .raw:
            writeInt(&buf, Int32(1))

        case .hashSeq:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeBlobFormat_lift(_ buf: RustBuffer) throws -> BlobFormat {
    return try FfiConverterTypeBlobFormat.lift(buf)
}

public func FfiConverterTypeBlobFormat_lower(_ value: BlobFormat) -> RustBuffer {
    return FfiConverterTypeBlobFormat.lower(value)
}

extension BlobFormat: Equatable, Hashable {}

public enum CallbackError {
    case Error(message: String)
}

public struct FfiConverterTypeCallbackError: FfiConverterRustBuffer {
    typealias SwiftType = CallbackError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CallbackError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Error(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CallbackError, into buf: inout [UInt8]) {
        switch value {
        case .Error(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension CallbackError: Equatable, Hashable {}

extension CallbackError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Kind of capability of the doc.
 */

public enum CapabilityKind {
    /**
     * A writable doc
     */
    case write
    /**
     * A readable doc
     */
    case read
}

public struct FfiConverterTypeCapabilityKind: FfiConverterRustBuffer {
    typealias SwiftType = CapabilityKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CapabilityKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .write

        case 2: return .read

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CapabilityKind, into buf: inout [UInt8]) {
        switch value {
        case .write:
            writeInt(&buf, Int32(1))

        case .read:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeCapabilityKind_lift(_ buf: RustBuffer) throws -> CapabilityKind {
    return try FfiConverterTypeCapabilityKind.lift(buf)
}

public func FfiConverterTypeCapabilityKind_lower(_ value: CapabilityKind) -> RustBuffer {
    return FfiConverterTypeCapabilityKind.lower(value)
}

extension CapabilityKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of the connection
 */

public enum ConnType {
    /**
     * Indicates you have a UDP connection.
     */
    case direct
    /**
     * Indicates you have a relayed connection.
     */
    case relay
    /**
     * Indicates you have an unverified UDP connection, and a relay connection for backup.
     */
    case mixed
    /**
     * Indicates you have no proof of connection.
     */
    case none
}

public struct FfiConverterTypeConnType: FfiConverterRustBuffer {
    typealias SwiftType = ConnType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .direct

        case 2: return .relay

        case 3: return .mixed

        case 4: return .none

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnType, into buf: inout [UInt8]) {
        switch value {
        case .direct:
            writeInt(&buf, Int32(1))

        case .relay:
            writeInt(&buf, Int32(2))

        case .mixed:
            writeInt(&buf, Int32(3))

        case .none:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeConnType_lift(_ buf: RustBuffer) throws -> ConnType {
    return try FfiConverterTypeConnType.lift(buf)
}

public func FfiConverterTypeConnType_lower(_ value: ConnType) -> RustBuffer {
    return FfiConverterTypeConnType.lower(value)
}

extension ConnType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Whether the content status is available on a node.
 */

public enum ContentStatus {
    /**
     * The content is completely available.
     */
    case complete
    /**
     * The content is partially available.
     */
    case incomplete
    /**
     * The content is missing.
     */
    case missing
}

public struct FfiConverterTypeContentStatus: FfiConverterRustBuffer {
    typealias SwiftType = ContentStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContentStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .complete

        case 2: return .incomplete

        case 3: return .missing

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContentStatus, into buf: inout [UInt8]) {
        switch value {
        case .complete:
            writeInt(&buf, Int32(1))

        case .incomplete:
            writeInt(&buf, Int32(2))

        case .missing:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeContentStatus_lift(_ buf: RustBuffer) throws -> ContentStatus {
    return try FfiConverterTypeContentStatus.lift(buf)
}

public func FfiConverterTypeContentStatus_lower(_ value: ContentStatus) -> RustBuffer {
    return FfiConverterTypeContentStatus.lower(value)
}

extension ContentStatus: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of `DocExportProgress` event
 */

public enum DocExportProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress exporting item `id`.
     */
    case progress
    /**
     * We are finished writing item `id`.
     */
    case done
    /**
     * We are done writing the entry to the filesystem
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDocExportProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DocExportProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocExportProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .done

        case 4: return .allDone

        case 5: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DocExportProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .done:
            writeInt(&buf, Int32(3))

        case .allDone:
            writeInt(&buf, Int32(4))

        case .abort:
            writeInt(&buf, Int32(5))
        }
    }
}

public func FfiConverterTypeDocExportProgressType_lift(_ buf: RustBuffer) throws -> DocExportProgressType {
    return try FfiConverterTypeDocExportProgressType.lift(buf)
}

public func FfiConverterTypeDocExportProgressType_lower(_ value: DocExportProgressType) -> RustBuffer {
    return FfiConverterTypeDocExportProgressType.lower(value)
}

extension DocExportProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of `DocImportProgress` event
 */

public enum DocImportProgressType {
    /**
     * An item was found with name `name`, from now on referred to via `id`
     */
    case found
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done ingesting `id`, and the hash is `hash`.
     */
    case ingestDone
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDocImportProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DocImportProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocImportProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .found

        case 2: return .progress

        case 3: return .ingestDone

        case 4: return .allDone

        case 5: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DocImportProgressType, into buf: inout [UInt8]) {
        switch value {
        case .found:
            writeInt(&buf, Int32(1))

        case .progress:
            writeInt(&buf, Int32(2))

        case .ingestDone:
            writeInt(&buf, Int32(3))

        case .allDone:
            writeInt(&buf, Int32(4))

        case .abort:
            writeInt(&buf, Int32(5))
        }
    }
}

public func FfiConverterTypeDocImportProgressType_lift(_ buf: RustBuffer) throws -> DocImportProgressType {
    return try FfiConverterTypeDocImportProgressType.lift(buf)
}

public func FfiConverterTypeDocImportProgressType_lower(_ value: DocImportProgressType) -> RustBuffer {
    return FfiConverterTypeDocImportProgressType.lower(value)
}

extension DocImportProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The kinds of progress events that can occur in a `DownloadProgress`
 */

public enum DownloadProgressType {
    /**
     * Initial state if subscribing to a running or queued transfer.
     */
    case initialState
    /**
     * Data was found locally
     */
    case foundLocal
    /**
     * A new connection was established.
     */
    case connected
    /**
     * An item was found with hash `hash`, from now on referred to via `id`
     */
    case found
    /**
     * An item was found with hash `hash`, from now on referred to via `id`
     */
    case foundHashSeq
    /**
     * We got progress ingesting item `id`.
     */
    case progress
    /**
     * We are done with `id`, and the hash is `hash`.
     */
    case done
    /**
     * We are done with the whole operation.
     */
    case allDone
    /**
     * We got an error and need to abort.
     *
     * This will be the last message in the stream.
     */
    case abort
}

public struct FfiConverterTypeDownloadProgressType: FfiConverterRustBuffer {
    typealias SwiftType = DownloadProgressType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DownloadProgressType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .initialState

        case 2: return .foundLocal

        case 3: return .connected

        case 4: return .found

        case 5: return .foundHashSeq

        case 6: return .progress

        case 7: return .done

        case 8: return .allDone

        case 9: return .abort

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DownloadProgressType, into buf: inout [UInt8]) {
        switch value {
        case .initialState:
            writeInt(&buf, Int32(1))

        case .foundLocal:
            writeInt(&buf, Int32(2))

        case .connected:
            writeInt(&buf, Int32(3))

        case .found:
            writeInt(&buf, Int32(4))

        case .foundHashSeq:
            writeInt(&buf, Int32(5))

        case .progress:
            writeInt(&buf, Int32(6))

        case .done:
            writeInt(&buf, Int32(7))

        case .allDone:
            writeInt(&buf, Int32(8))

        case .abort:
            writeInt(&buf, Int32(9))
        }
    }
}

public func FfiConverterTypeDownloadProgressType_lift(_ buf: RustBuffer) throws -> DownloadProgressType {
    return try FfiConverterTypeDownloadProgressType.lift(buf)
}

public func FfiConverterTypeDownloadProgressType_lower(_ value: DownloadProgressType) -> RustBuffer {
    return FfiConverterTypeDownloadProgressType.lower(value)
}

extension DownloadProgressType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of events that can be emitted during the live sync progress
 */

public enum LiveEventType {
    /**
     * A local insertion.
     */
    case insertLocal
    /**
     * Received a remote insert.
     */
    case insertRemote
    /**
     * The content of an entry was downloaded and is now available at the local node
     */
    case contentReady
    /**
     * We have a new neighbor in the swarm.
     */
    case neighborUp
    /**
     * We lost a neighbor in the swarm.
     */
    case neighborDown
    /**
     * A set-reconciliation sync finished.
     */
    case syncFinished
    /**
     * All pending content is now ready.
     *
     * This event signals that all queued content downloads from the last sync run have either
     * completed or failed.
     *
     * It will only be emitted after a [`Self::SyncFinished`] event, never before.
     *
     * Receiving this event does not guarantee that all content in the document is available. If
     * blobs failed to download, this event will still be emitted after all operations completed.
     */
    case pendingContentReady
}

public struct FfiConverterTypeLiveEventType: FfiConverterRustBuffer {
    typealias SwiftType = LiveEventType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEventType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .insertLocal

        case 2: return .insertRemote

        case 3: return .contentReady

        case 4: return .neighborUp

        case 5: return .neighborDown

        case 6: return .syncFinished

        case 7: return .pendingContentReady

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiveEventType, into buf: inout [UInt8]) {
        switch value {
        case .insertLocal:
            writeInt(&buf, Int32(1))

        case .insertRemote:
            writeInt(&buf, Int32(2))

        case .contentReady:
            writeInt(&buf, Int32(3))

        case .neighborUp:
            writeInt(&buf, Int32(4))

        case .neighborDown:
            writeInt(&buf, Int32(5))

        case .syncFinished:
            writeInt(&buf, Int32(6))

        case .pendingContentReady:
            writeInt(&buf, Int32(7))
        }
    }
}

public func FfiConverterTypeLiveEventType_lift(_ buf: RustBuffer) throws -> LiveEventType {
    return try FfiConverterTypeLiveEventType.lift(buf)
}

public func FfiConverterTypeLiveEventType_lower(_ value: LiveEventType) -> RustBuffer {
    return FfiConverterTypeLiveEventType.lower(value)
}

extension LiveEventType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The logging level. See the rust (log crate)[https://docs.rs/log] for more information.
 */

public enum LogLevel {
    case trace
    case debug
    case info
    case warn
    case error
    case off
}

public struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .trace

        case 2: return .debug

        case 3: return .info

        case 4: return .warn

        case 5: return .error

        case 6: return .off

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogLevel, into buf: inout [UInt8]) {
        switch value {
        case .trace:
            writeInt(&buf, Int32(1))

        case .debug:
            writeInt(&buf, Int32(2))

        case .info:
            writeInt(&buf, Int32(3))

        case .warn:
            writeInt(&buf, Int32(4))

        case .error:
            writeInt(&buf, Int32(5))

        case .off:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeLogLevel_lift(_ buf: RustBuffer) throws -> LogLevel {
    return try FfiConverterTypeLogLevel.lift(buf)
}

public func FfiConverterTypeLogLevel_lower(_ value: LogLevel) -> RustBuffer {
    return FfiConverterTypeLogLevel.lower(value)
}

extension LogLevel: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Why we performed a sync exchange
 */

public enum Origin {
    /**
     * public, use a unit variant
     */
    case connect(reason: SyncReason
    )
    /**
     * A peer connected to us and we accepted the exchange
     */
    case accept
}

public struct FfiConverterTypeOrigin: FfiConverterRustBuffer {
    typealias SwiftType = Origin

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Origin {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .connect(reason: FfiConverterTypeSyncReason.read(from: &buf)
            )

        case 2: return .accept

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Origin, into buf: inout [UInt8]) {
        switch value {
        case let .connect(reason):
            writeInt(&buf, Int32(1))
            FfiConverterTypeSyncReason.write(reason, into: &buf)

        case .accept:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeOrigin_lift(_ buf: RustBuffer) throws -> Origin {
    return try FfiConverterTypeOrigin.lift(buf)
}

public func FfiConverterTypeOrigin_lower(_ value: Origin) -> RustBuffer {
    return FfiConverterTypeOrigin.lower(value)
}

extension Origin: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Intended capability for document share tickets
 */

public enum ShareMode {
    /**
     * Read-only access
     */
    case read
    /**
     * Write access
     */
    case write
}

public struct FfiConverterTypeShareMode: FfiConverterRustBuffer {
    typealias SwiftType = ShareMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShareMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .read

        case 2: return .write

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ShareMode, into buf: inout [UInt8]) {
        switch value {
        case .read:
            writeInt(&buf, Int32(1))

        case .write:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeShareMode_lift(_ buf: RustBuffer) throws -> ShareMode {
    return try FfiConverterTypeShareMode.lift(buf)
}

public func FfiConverterTypeShareMode_lower(_ value: ShareMode) -> RustBuffer {
    return FfiConverterTypeShareMode.lower(value)
}

extension ShareMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Fields by which the query can be sorted
 */

public enum SortBy {
    /**
     * Fields by which the query can be sorted
     */
    case keyAuthor
    /**
     * Fields by which the query can be sorted
     */
    case authorKey
}

public struct FfiConverterTypeSortBy: FfiConverterRustBuffer {
    typealias SwiftType = SortBy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortBy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keyAuthor

        case 2: return .authorKey

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortBy, into buf: inout [UInt8]) {
        switch value {
        case .keyAuthor:
            writeInt(&buf, Int32(1))

        case .authorKey:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortBy_lift(_ buf: RustBuffer) throws -> SortBy {
    return try FfiConverterTypeSortBy.lift(buf)
}

public func FfiConverterTypeSortBy_lower(_ value: SortBy) -> RustBuffer {
    return FfiConverterTypeSortBy.lower(value)
}

extension SortBy: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Sort direction
 */

public enum SortDirection {
    /**
     * Sort ascending
     */
    case asc
    /**
     * Sort descending
     */
    case desc
}

public struct FfiConverterTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .asc

        case 2: return .desc

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortDirection, into buf: inout [UInt8]) {
        switch value {
        case .asc:
            writeInt(&buf, Int32(1))

        case .desc:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortDirection_lift(_ buf: RustBuffer) throws -> SortDirection {
    return try FfiConverterTypeSortDirection.lift(buf)
}

public func FfiConverterTypeSortDirection_lower(_ value: SortDirection) -> RustBuffer {
    return FfiConverterTypeSortDirection.lower(value)
}

extension SortDirection: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Why we started a sync request
 */

public enum SyncReason {
    /**
     * Direct join request via API
     */
    case directJoin
    /**
     * Peer showed up as new neighbor in the gossip swarm
     */
    case newNeighbor
    /**
     * We synced after receiving a sync report that indicated news for us
     */
    case syncReport
    /**
     * We received a sync report while a sync was running, so run again afterwars
     */
    case resync
}

public struct FfiConverterTypeSyncReason: FfiConverterRustBuffer {
    typealias SwiftType = SyncReason

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncReason {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .directJoin

        case 2: return .newNeighbor

        case 3: return .syncReport

        case 4: return .resync

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SyncReason, into buf: inout [UInt8]) {
        switch value {
        case .directJoin:
            writeInt(&buf, Int32(1))

        case .newNeighbor:
            writeInt(&buf, Int32(2))

        case .syncReport:
            writeInt(&buf, Int32(3))

        case .resync:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeSyncReason_lift(_ buf: RustBuffer) throws -> SyncReason {
    return try FfiConverterTypeSyncReason.lift(buf)
}

public func FfiConverterTypeSyncReason_lower(_ value: SyncReason) -> RustBuffer {
    return FfiConverterTypeSyncReason.lower(value)
}

extension SyncReason: Equatable, Hashable {}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeDoc: FfiConverterRustBuffer {
    typealias SwiftType = Doc?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDoc.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDoc.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeDocExportFileCallback: FfiConverterRustBuffer {
    typealias SwiftType = DocExportFileCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDocExportFileCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDocExportFileCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeDocImportFileCallback: FfiConverterRustBuffer {
    typealias SwiftType = DocImportFileCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeDocImportFileCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeDocImportFileCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = Entry?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEntry.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEntry.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConnectionInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConnectionInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeLatencyAndControlMsg: FfiConverterRustBuffer {
    typealias SwiftType = LatencyAndControlMsg?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLatencyAndControlMsg.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLatencyAndControlMsg.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeQueryOptions: FfiConverterRustBuffer {
    typealias SwiftType = QueryOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeQueryOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeQueryOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAuthorId: FfiConverterRustBuffer {
    typealias SwiftType = [AuthorId]

    public static func write(_ value: [AuthorId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthorId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthorId] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthorId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAuthorId.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeDirectAddrInfo: FfiConverterRustBuffer {
    typealias SwiftType = [DirectAddrInfo]

    public static func write(_ value: [DirectAddrInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDirectAddrInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DirectAddrInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [DirectAddrInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDirectAddrInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = [Entry]

    public static func write(_ value: [Entry], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEntry.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Entry] {
        let len: Int32 = try readInt(&buf)
        var seq = [Entry]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeEntry.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeFilterKind: FfiConverterRustBuffer {
    typealias SwiftType = [FilterKind]

    public static func write(_ value: [FilterKind], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFilterKind.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FilterKind] {
        let len: Int32 = try readInt(&buf)
        var seq = [FilterKind]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeFilterKind.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeHash: FfiConverterRustBuffer {
    typealias SwiftType = [Hash]

    public static func write(_ value: [Hash], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHash.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Hash] {
        let len: Int32 = try readInt(&buf)
        var seq = [Hash]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeHash.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNodeAddr: FfiConverterRustBuffer {
    typealias SwiftType = [NodeAddr]

    public static func write(_ value: [NodeAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNodeAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NodeAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [NodeAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNodeAddr.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeCollectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = [CollectionInfo]

    public static func write(_ value: [CollectionInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCollectionInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CollectionInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [CollectionInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeCollectionInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ConnectionInfo]

    public static func write(_ value: [ConnectionInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeConnectionInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ConnectionInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [ConnectionInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeConnectionInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeIncompleteBlobInfo: FfiConverterRustBuffer {
    typealias SwiftType = [IncompleteBlobInfo]

    public static func write(_ value: [IncompleteBlobInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIncompleteBlobInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [IncompleteBlobInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [IncompleteBlobInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeIncompleteBlobInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeLinkAndName: FfiConverterRustBuffer {
    typealias SwiftType = [LinkAndName]

    public static func write(_ value: [LinkAndName], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLinkAndName.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LinkAndName] {
        let len: Int32 = try readInt(&buf)
        var seq = [LinkAndName]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLinkAndName.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNamespaceAndCapability: FfiConverterRustBuffer {
    typealias SwiftType = [NamespaceAndCapability]

    public static func write(_ value: [NamespaceAndCapability], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNamespaceAndCapability.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NamespaceAndCapability] {
        let len: Int32 = try readInt(&buf)
        var seq = [NamespaceAndCapability]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNamespaceAndCapability.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeTagInfo: FfiConverterRustBuffer {
    typealias SwiftType = [TagInfo]

    public static func write(_ value: [TagInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTagInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TagInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [TagInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeTagInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeCounterStats: FfiConverterRustBuffer {
    public static func write(_ value: [String: CounterStats], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeCounterStats.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: CounterStats] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: CounterStats]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeCounterStats.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

/**
 * Helper function that translates a key that was derived from the [`path_to_key`] function back
 * into a path.
 *
 * If `prefix` exists, it will be stripped before converting back to a path
 * If `root` exists, will add the root as a parent to the created path
 * Removes any null byte that has been appened to the key
 */
public func keyToPath(key: Data, prefix: String?, root: String?) throws -> String {
    return try FfiConverterString.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_func_key_to_path(
            FfiConverterData.lower(key),
            FfiConverterOptionString.lower(prefix),
            FfiConverterOptionString.lower(root), $0
        )
    })
}

/**
 * Helper function that creates a document key from a canonicalized path, removing the `root` and adding the `prefix`, if they exist
 *
 * Appends the null byte to the end of the key.
 */
public func pathToKey(path: String, prefix: String?, root: String?) throws -> Data {
    return try FfiConverterData.lift(rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
        uniffi_iroh_fn_func_path_to_key(
            FfiConverterString.lower(path),
            FfiConverterOptionString.lower(prefix),
            FfiConverterOptionString.lower(root), $0
        )
    })
}

/**
 * Set the logging level.
 */
public func setLogLevel(level: LogLevel) { try! rustCall {
    uniffi_iroh_fn_func_set_log_level(
        FfiConverterTypeLogLevel.lower(level), $0
    )
}
}

/**
 * Initialize the global metrics collection.
 */
public func startMetricsCollection() throws { try rustCallWithError(FfiConverterTypeIrohError__as_error.lift) {
    uniffi_iroh_fn_func_start_metrics_collection($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_iroh_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_iroh_checksum_func_key_to_path() != 8362 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_path_to_key() != 56143 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_set_log_level() != 23842 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_start_metrics_collection() != 52092 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addcallback_progress() != 5192 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_abort() != 10096 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_all_done() != 25945 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_done() != 63498 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_found() != 8323 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_as_progress() != 9008 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_addprogress_type() != 38695 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_author_id() != 49771 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_author_to_string() != 53120 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_equal() != 53671 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_to_string() != 42389 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_blobticket_as_download_options() != 57522 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_blobticket_format() != 20220 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_blobticket_hash() != 5648 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_blobticket_node_addr() != 28080 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_blobs() != 43031 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_is_empty() != 129 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_len() != 6546 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_links() != 17782 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_names() != 61681 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_collection_push() != 49442 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_connectiontype_as_direct() != 27175 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_connectiontype_as_mixed() != 7226 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_connectiontype_as_relay() != 40210 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_connectiontype_type() != 27732 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_directaddrinfo_addr() != 41252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_directaddrinfo_last_control() != 9385 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_directaddrinfo_last_payload() != 50926 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_directaddrinfo_latency() != 9423 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_close() != 14451 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_del() != 43294 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_export_file() != 48659 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_download_policy() != 12464 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_exact() != 20708 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_many() != 5459 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_one() != 36881 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_id() != 32607 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_import_file() != 10090 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_leave() != 46314 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_bytes() != 47919 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_download_policy() != 29087 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_hash() != 3797 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_share() != 42549 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_start_sync() != 55208 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_status() != 45958 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_subscribe() != 29020 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportfilecallback_progress() != 40275 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_abort() != 15488 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_found() != 32325 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_as_progress() != 41090 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docexportprogress_type() != 29258 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportfilecallback_progress() != 2905 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_abort() != 55128 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_all_done() != 49275 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_found() != 47675 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_ingest_done() != 21810 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_as_progress() != 30153 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docimportprogress_type() != 39562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadcallback_progress() != 64420 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_abort() != 63609 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_all_done() != 26844 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_done() != 57406 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_found() != 46027 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_found_hash_seq() != 120 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_found_local() != 34679 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_as_progress() != 28818 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_downloadprogress_type() != 61660 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_author() != 26124 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_content_bytes() != 38764 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_content_hash() != 39306 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_content_len() != 60107 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_key() != 19122 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_namespace() != 52248 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_timestamp() != 20078 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_filterkind_matches() != 35187 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_equal() != 52326 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_bytes() != 29465 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_hex() != 27622 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_string() != 61408 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_iroherror_message() != 42005 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_create() != 33498 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_default() != 41725 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_delete() != 31070 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_export() != 61624 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_import() != 34851 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_list() != 12810 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_add_bytes() != 19868 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_add_from_path() != 57891 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_create_collection() != 14543 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_delete_blob() != 34789 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_download() != 765 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_export() != 64675 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_get_collection() != 55682 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list() != 36698 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list_collections() != 65104 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_list_incomplete() != 20923 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_read_at_to_bytes() != 53379 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_read_to_bytes() != 63774 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_share() != 8705 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_size() != 44328 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blobs_write_to_path() != 9079 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connection_info() != 3180 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connections() != 64940 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_create() != 1646 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_drop() != 4401 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_join() != 7221 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_join_and_subscribe() != 37938 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_list() != 48371 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_open() != 50051 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_node_id() != 31962 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_stats() != 49644 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_status() != 56342 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_tags_delete() != 49837 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_tags_list() != 47102 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_content_ready() != 15237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_local() != 431 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_remote() != 19916 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_down() != 154 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_up() != 25727 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_sync_finished() != 62733 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_type() != 63032 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_direct_addresses() != 13100 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_equal() != 40672 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_relay_url() != 33747 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodestatus_listen_addrs() != 52977 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodestatus_node_addr() != 53928 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodestatus_version() != 46131 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_equal() != 13922 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_fmt_short() != 33947 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_bytes() != 54334 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_string() != 48998 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_limit() != 13803 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_offset() != 5309 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_rangespec_is_all() != 17079 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_rangespec_is_empty() != 55537 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_subscribecallback_event() != 53405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_author_from_string() != 13625 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_authorid_from_string() != 9745 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_blobdownloadoptions_new() != 47667 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_blobticket_new() != 36162 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_collection_new() != 10699 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadpolicy_everything() != 33704 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadpolicy_everything_except() != 48193 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadpolicy_nothing() != 44731 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_downloadpolicy_nothing_except() != 12480 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_filterkind_exact() != 3557 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_filterkind_prefix() != 58174 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_from_bytes() != 29694 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_from_string() != 9376 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_hash_new() != 25525 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_irohnode_new() != 55095 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_irohnode_with_options() != 31863 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_nodeaddr_new() != 31240 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_bytes() != 13946 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_string() != 19439 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_all() != 14156 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author() != 59964 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author_key_exact() != 59955 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author_key_prefix() != 43283 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_exact() != 35442 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_prefix() != 40767 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_single_latest_per_key() != 14952 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_single_latest_per_key_exact() != 30329 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_single_latest_per_key_prefix() != 60943 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_settagoption_auto() != 17797 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_settagoption_named() != 6167 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_wrapoption_no_wrap() != 60071 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_wrapoption_wrap() != 15641 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitAddCallback()
    uniffiCallbackInitDocExportFileCallback()
    uniffiCallbackInitDocImportFileCallback()
    uniffiCallbackInitDownloadCallback()
    uniffiCallbackInitSubscribeCallback()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
