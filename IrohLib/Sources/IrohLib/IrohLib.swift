// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(Iroh)
    import Iroh
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_iroh_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_iroh_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

private struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}

private struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}

public protocol AuthorIdProtocol {
    func equal(other: AuthorId) -> Bool
    func toString() -> String
}

public class AuthorId: AuthorIdProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_authorid(pointer, $0) }
    }

    public static func fromString(str: String) throws -> AuthorId {
        return try AuthorId(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_authorid_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: AuthorId) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_authorid_equal(self.pointer,
                                                         FfiConverterTypeAuthorId.lower(other), $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_authorid_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeAuthorId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AuthorId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AuthorId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AuthorId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
        return AuthorId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeAuthorId_lift(_ pointer: UnsafeMutableRawPointer) throws -> AuthorId {
    return try FfiConverterTypeAuthorId.lift(pointer)
}

public func FfiConverterTypeAuthorId_lower(_ value: AuthorId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAuthorId.lower(value)
}

public protocol DirectAddrInfoProtocol {}

public class DirectAddrInfo: DirectAddrInfoProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_directaddrinfo(pointer, $0) }
    }
}

public struct FfiConverterTypeDirectAddrInfo: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DirectAddrInfo

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DirectAddrInfo {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DirectAddrInfo, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
        return DirectAddrInfo(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDirectAddrInfo_lift(_ pointer: UnsafeMutableRawPointer) throws -> DirectAddrInfo {
    return try FfiConverterTypeDirectAddrInfo.lift(pointer)
}

public func FfiConverterTypeDirectAddrInfo_lower(_ value: DirectAddrInfo) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDirectAddrInfo.lower(value)
}

public protocol DocProtocol {
    func close() throws
    func del(authorId: AuthorId, prefix: Data) throws -> UInt64
    func getMany(query: Query) throws -> [Entry]
    func getOne(query: Query) throws -> Entry?
    func id() -> NamespaceId
    func leave() throws
    func readToBytes(entry: Entry) throws -> Data
    func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash
    func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws
    func share(mode: ShareMode) throws -> DocTicket
    func size(entry: Entry) throws -> UInt64
    func startSync(peers: [NodeAddr]) throws
    func status() throws -> OpenState
    func subscribe(cb: SubscribeCallback) throws
}

public class Doc: DocProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_doc(pointer, $0) }
    }

    public func close() throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_close(self.pointer, $0)
            }
    }

    public func del(authorId: AuthorId, prefix: Data) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_del(self.pointer,
                                              FfiConverterTypeAuthorId.lower(authorId),
                                              FfiConverterData.lower(prefix), $0)
            }
        )
    }

    public func getMany(query: Query) throws -> [Entry] {
        return try FfiConverterSequenceTypeEntry.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_get_many(self.pointer,
                                                   FfiConverterTypeQuery.lower(query), $0)
            }
        )
    }

    public func getOne(query: Query) throws -> Entry? {
        return try FfiConverterOptionTypeEntry.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_get_one(self.pointer,
                                                  FfiConverterTypeQuery.lower(query), $0)
            }
        )
    }

    public func id() -> NamespaceId {
        return try! FfiConverterTypeNamespaceId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_doc_id(self.pointer, $0)
                }
        )
    }

    public func leave() throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_leave(self.pointer, $0)
            }
    }

    public func readToBytes(entry: Entry) throws -> Data {
        return try FfiConverterData.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_read_to_bytes(self.pointer,
                                                        FfiConverterTypeEntry.lower(entry), $0)
            }
        )
    }

    public func setBytes(author: AuthorId, key: Data, value: Data) throws -> Hash {
        return try FfiConverterTypeHash.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_set_bytes(self.pointer,
                                                    FfiConverterTypeAuthorId.lower(author),
                                                    FfiConverterData.lower(key),
                                                    FfiConverterData.lower(value), $0)
            }
        )
    }

    public func setHash(author: AuthorId, key: Data, hash: Hash, size: UInt64) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_set_hash(self.pointer,
                                                   FfiConverterTypeAuthorId.lower(author),
                                                   FfiConverterData.lower(key),
                                                   FfiConverterTypeHash.lower(hash),
                                                   FfiConverterUInt64.lower(size), $0)
            }
    }

    public func share(mode: ShareMode) throws -> DocTicket {
        return try FfiConverterTypeDocTicket.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_share(self.pointer,
                                                FfiConverterTypeShareMode.lower(mode), $0)
            }
        )
    }

    public func size(entry: Entry) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_size(self.pointer,
                                               FfiConverterTypeEntry.lower(entry), $0)
            }
        )
    }

    public func startSync(peers: [NodeAddr]) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_start_sync(self.pointer,
                                                     FfiConverterSequenceTypeNodeAddr.lower(peers), $0)
            }
    }

    public func status() throws -> OpenState {
        return try FfiConverterTypeOpenState.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_status(self.pointer, $0)
            }
        )
    }

    public func subscribe(cb: SubscribeCallback) throws {
        try
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_doc_subscribe(self.pointer,
                                                    FfiConverterCallbackInterfaceSubscribeCallback.lower(cb), $0)
            }
    }
}

public struct FfiConverterTypeDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Doc

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Doc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Doc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
        return Doc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Doc) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> Doc {
    return try FfiConverterTypeDoc.lift(pointer)
}

public func FfiConverterTypeDoc_lower(_ value: Doc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDoc.lower(value)
}

public protocol DocTicketProtocol {
    func equal(other: DocTicket) -> Bool
    func toString() -> String
}

public class DocTicket: DocTicketProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_docticket(pointer, $0) }
    }

    public static func fromString(content: String) throws -> DocTicket {
        return try DocTicket(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_docticket_from_string(
                FfiConverterString.lower(content), $0
            )
        })
    }

    public func equal(other: DocTicket) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docticket_equal(self.pointer,
                                                          FfiConverterTypeDocTicket.lower(other), $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_docticket_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeDocTicket: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DocTicket

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DocTicket {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DocTicket, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DocTicket {
        return DocTicket(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DocTicket) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeDocTicket_lift(_ pointer: UnsafeMutableRawPointer) throws -> DocTicket {
    return try FfiConverterTypeDocTicket.lift(pointer)
}

public func FfiConverterTypeDocTicket_lower(_ value: DocTicket) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDocTicket.lower(value)
}

public protocol EntryProtocol {
    func author() -> AuthorId
    func key() -> Data
    func namespace() -> NamespaceId
}

public class Entry: EntryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_entry(pointer, $0) }
    }

    public func author() -> AuthorId {
        return try! FfiConverterTypeAuthorId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_author(self.pointer, $0)
                }
        )
    }

    public func key() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_key(self.pointer, $0)
                }
        )
    }

    public func namespace() -> NamespaceId {
        return try! FfiConverterTypeNamespaceId.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_entry_namespace(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeEntry: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Entry

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Entry {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Entry, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
        return Entry(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Entry) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeEntry_lift(_ pointer: UnsafeMutableRawPointer) throws -> Entry {
    return try FfiConverterTypeEntry.lift(pointer)
}

public func FfiConverterTypeEntry_lower(_ value: Entry) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEntry.lower(value)
}

public protocol HashProtocol {
    func toBytes() -> Data
    func toString() -> String
}

public class Hash: HashProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_hash(pointer, $0) }
    }

    public func toBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_to_bytes(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_hash_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeHash: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Hash

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hash {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Hash, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
        return Hash(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Hash) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeHash_lift(_ pointer: UnsafeMutableRawPointer) throws -> Hash {
    return try FfiConverterTypeHash.lift(pointer)
}

public func FfiConverterTypeHash_lower(_ value: Hash) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHash.lower(value)
}

public protocol Ipv4AddrProtocol {
    func equal(other: Ipv4Addr) -> Bool
    func octets() -> [UInt8]
    func toString() -> String
}

public class Ipv4Addr: Ipv4AddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(a: UInt8, b: UInt8, c: UInt8, d: UInt8) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_ipv4addr_new(
                FfiConverterUInt8.lower(a),
                FfiConverterUInt8.lower(b),
                FfiConverterUInt8.lower(c),
                FfiConverterUInt8.lower(d), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_ipv4addr(pointer, $0) }
    }

    public static func fromString(str: String) throws -> Ipv4Addr {
        return try Ipv4Addr(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_ipv4addr_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: Ipv4Addr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_equal(self.pointer,
                                                         FfiConverterTypeIpv4Addr.lower(other), $0)
                }
        )
    }

    public func octets() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_octets(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv4addr_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeIpv4Addr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ipv4Addr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv4Addr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ipv4Addr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv4Addr {
        return Ipv4Addr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ipv4Addr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIpv4Addr_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv4Addr {
    return try FfiConverterTypeIpv4Addr.lift(pointer)
}

public func FfiConverterTypeIpv4Addr_lower(_ value: Ipv4Addr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIpv4Addr.lower(value)
}

public protocol Ipv6AddrProtocol {
    func equal(other: Ipv6Addr) -> Bool
    func segments() -> [UInt16]
    func toString() -> String
}

public class Ipv6Addr: Ipv6AddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(a: UInt16, b: UInt16, c: UInt16, d: UInt16, e: UInt16, f: UInt16, g: UInt16, h: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_ipv6addr_new(
                FfiConverterUInt16.lower(a),
                FfiConverterUInt16.lower(b),
                FfiConverterUInt16.lower(c),
                FfiConverterUInt16.lower(d),
                FfiConverterUInt16.lower(e),
                FfiConverterUInt16.lower(f),
                FfiConverterUInt16.lower(g),
                FfiConverterUInt16.lower(h), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_ipv6addr(pointer, $0) }
    }

    public static func fromString(str: String) throws -> Ipv6Addr {
        return try Ipv6Addr(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_ipv6addr_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: Ipv6Addr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_equal(self.pointer,
                                                         FfiConverterTypeIpv6Addr.lower(other), $0)
                }
        )
    }

    public func segments() -> [UInt16] {
        return try! FfiConverterSequenceUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_segments(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_ipv6addr_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeIpv6Addr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Ipv6Addr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Ipv6Addr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Ipv6Addr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv6Addr {
        return Ipv6Addr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Ipv6Addr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIpv6Addr_lift(_ pointer: UnsafeMutableRawPointer) throws -> Ipv6Addr {
    return try FfiConverterTypeIpv6Addr.lift(pointer)
}

public func FfiConverterTypeIpv6Addr_lower(_ value: Ipv6Addr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIpv6Addr.lower(value)
}

public protocol IrohNodeProtocol {
    func authorList() throws -> [AuthorId]
    func authorNew() throws -> AuthorId
    func blobGet(hash: Hash) throws -> Data
    func blobListBlobs() throws -> [Hash]
    func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo?
    func connections() throws -> [ConnectionInfo]
    func docJoin(ticket: DocTicket) throws -> Doc
    func docList() throws -> [NamespaceAndCapability]
    func docNew() throws -> Doc
    func nodeId() -> String
    func stats() throws -> [String: CounterStats]
}

public class IrohNode: IrohNodeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(path: String) throws {
        try self.init(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_irohnode_new(
                FfiConverterString.lower(path), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_irohnode(pointer, $0) }
    }

    public func authorList() throws -> [AuthorId] {
        return try FfiConverterSequenceTypeAuthorId.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_author_list(self.pointer, $0)
            }
        )
    }

    public func authorNew() throws -> AuthorId {
        return try FfiConverterTypeAuthorId.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_author_new(self.pointer, $0)
            }
        )
    }

    public func blobGet(hash: Hash) throws -> Data {
        return try FfiConverterData.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blob_get(self.pointer,
                                                        FfiConverterTypeHash.lower(hash), $0)
            }
        )
    }

    public func blobListBlobs() throws -> [Hash] {
        return try FfiConverterSequenceTypeHash.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_blob_list_blobs(self.pointer, $0)
            }
        )
    }

    public func connectionInfo(nodeId: PublicKey) throws -> ConnectionInfo? {
        return try FfiConverterOptionTypeConnectionInfo.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_connection_info(self.pointer,
                                                               FfiConverterTypePublicKey.lower(nodeId), $0)
            }
        )
    }

    public func connections() throws -> [ConnectionInfo] {
        return try FfiConverterSequenceTypeConnectionInfo.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_connections(self.pointer, $0)
            }
        )
    }

    public func docJoin(ticket: DocTicket) throws -> Doc {
        return try FfiConverterTypeDoc.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_join(self.pointer,
                                                        FfiConverterTypeDocTicket.lower(ticket), $0)
            }
        )
    }

    public func docList() throws -> [NamespaceAndCapability] {
        return try FfiConverterSequenceTypeNamespaceAndCapability.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_list(self.pointer, $0)
            }
        )
    }

    public func docNew() throws -> Doc {
        return try FfiConverterTypeDoc.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_doc_new(self.pointer, $0)
            }
        )
    }

    public func nodeId() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_irohnode_node_id(self.pointer, $0)
                }
        )
    }

    public func stats() throws -> [String: CounterStats] {
        return try FfiConverterDictionaryStringTypeCounterStats.lift(
            rustCallWithError(FfiConverterTypeIrohError.lift) {
                uniffi_iroh_fn_method_irohnode_stats(self.pointer, $0)
            }
        )
    }
}

public struct FfiConverterTypeIrohNode: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IrohNode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohNode {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IrohNode, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
        return IrohNode(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeIrohNode_lift(_ pointer: UnsafeMutableRawPointer) throws -> IrohNode {
    return try FfiConverterTypeIrohNode.lift(pointer)
}

public func FfiConverterTypeIrohNode_lower(_ value: IrohNode) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIrohNode.lower(value)
}

public protocol LiveEventProtocol {
    func asContentReady() -> Hash
    func asInsertLocal() -> Entry
    func asInsertRemote() -> InsertRemoteEvent
    func asNeighborDown() -> PublicKey
    func asNeighborUp() -> PublicKey
    func asSyncFinished() -> SyncEvent
    func type() -> LiveEventType
}

public class LiveEvent: LiveEventProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_liveevent(pointer, $0) }
    }

    public func asContentReady() -> Hash {
        return try! FfiConverterTypeHash.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_content_ready(self.pointer, $0)
                }
        )
    }

    public func asInsertLocal() -> Entry {
        return try! FfiConverterTypeEntry.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_insert_local(self.pointer, $0)
                }
        )
    }

    public func asInsertRemote() -> InsertRemoteEvent {
        return try! FfiConverterTypeInsertRemoteEvent.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_insert_remote(self.pointer, $0)
                }
        )
    }

    public func asNeighborDown() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_neighbor_down(self.pointer, $0)
                }
        )
    }

    public func asNeighborUp() -> PublicKey {
        return try! FfiConverterTypePublicKey.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_neighbor_up(self.pointer, $0)
                }
        )
    }

    public func asSyncFinished() -> SyncEvent {
        return try! FfiConverterTypeSyncEvent.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_as_sync_finished(self.pointer, $0)
                }
        )
    }

    public func type() -> LiveEventType {
        return try! FfiConverterTypeLiveEventType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_liveevent_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeLiveEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LiveEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEvent {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LiveEvent, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
        return LiveEvent(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeLiveEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> LiveEvent {
    return try FfiConverterTypeLiveEvent.lift(pointer)
}

public func FfiConverterTypeLiveEvent_lower(_ value: LiveEvent) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLiveEvent.lower(value)
}

public protocol NamespaceIdProtocol {
    func equal(other: NamespaceId) -> Bool
    func toString() -> String
}

public class NamespaceId: NamespaceIdProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_namespaceid(pointer, $0) }
    }

    public static func fromString(str: String) throws -> NamespaceId {
        return try NamespaceId(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_namespaceid_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: NamespaceId) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_namespaceid_equal(self.pointer,
                                                            FfiConverterTypeNamespaceId.lower(other), $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_namespaceid_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeNamespaceId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NamespaceId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NamespaceId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NamespaceId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NamespaceId {
        return NamespaceId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NamespaceId) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeNamespaceId_lift(_ pointer: UnsafeMutableRawPointer) throws -> NamespaceId {
    return try FfiConverterTypeNamespaceId.lift(pointer)
}

public func FfiConverterTypeNamespaceId_lower(_ value: NamespaceId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNamespaceId.lower(value)
}

public protocol NodeAddrProtocol {
    func derpRegion() -> UInt16?
    func directAddresses() -> [SocketAddr]
    func equal(other: NodeAddr) -> Bool
}

public class NodeAddr: NodeAddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(nodeId: PublicKey, regionId: UInt16?, addresses: [SocketAddr]) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_nodeaddr_new(
                FfiConverterTypePublicKey.lower(nodeId),
                FfiConverterOptionUInt16.lower(regionId),
                FfiConverterSequenceTypeSocketAddr.lower(addresses), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_nodeaddr(pointer, $0) }
    }

    public func derpRegion() -> UInt16? {
        return try! FfiConverterOptionUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_derp_region(self.pointer, $0)
                }
        )
    }

    public func directAddresses() -> [SocketAddr] {
        return try! FfiConverterSequenceTypeSocketAddr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_direct_addresses(self.pointer, $0)
                }
        )
    }

    public func equal(other: NodeAddr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_nodeaddr_equal(self.pointer,
                                                         FfiConverterTypeNodeAddr.lower(other), $0)
                }
        )
    }
}

public struct FfiConverterTypeNodeAddr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NodeAddr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeAddr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NodeAddr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
        return NodeAddr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeNodeAddr_lift(_ pointer: UnsafeMutableRawPointer) throws -> NodeAddr {
    return try FfiConverterTypeNodeAddr.lift(pointer)
}

public func FfiConverterTypeNodeAddr_lower(_ value: NodeAddr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNodeAddr.lower(value)
}

public protocol PublicKeyProtocol {
    func equal(other: PublicKey) -> Bool
    func fmtShort() -> String
    func toBytes() -> Data
    func toString() -> String
}

public class PublicKey: PublicKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_publickey(pointer, $0) }
    }

    public static func fromBytes(bytes: Data) throws -> PublicKey {
        return try PublicKey(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_publickey_from_bytes(
                FfiConverterData.lower(bytes), $0
            )
        })
    }

    public static func fromString(s: String) throws -> PublicKey {
        return try PublicKey(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_publickey_from_string(
                FfiConverterString.lower(s), $0
            )
        })
    }

    public func equal(other: PublicKey) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_equal(self.pointer,
                                                          FfiConverterTypePublicKey.lower(other), $0)
                }
        )
    }

    public func fmtShort() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_fmt_short(self.pointer, $0)
                }
        )
    }

    public func toBytes() -> Data {
        return try! FfiConverterData.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_to_bytes(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_publickey_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypePublicKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PublicKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypePublicKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(pointer)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePublicKey.lower(value)
}

public protocol QueryProtocol {
    func limit() -> UInt64?
    func offset() -> UInt64
}

public class Query: QueryProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_query(pointer, $0) }
    }

    public static func all(sortBy: SortBy, direction: SortDirection, offset: UInt64?, limit: UInt64?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_all(
                FfiConverterTypeSortBy.lower(sortBy),
                FfiConverterTypeSortDirection.lower(direction),
                FfiConverterOptionUInt64.lower(offset),
                FfiConverterOptionUInt64.lower(limit), $0
            )
        })
    }

    public static func author(author: AuthorId, sortBy: SortBy, direction: SortDirection, offset: UInt64?, limit: UInt64?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_author(
                FfiConverterTypeAuthorId.lower(author),
                FfiConverterTypeSortBy.lower(sortBy),
                FfiConverterTypeSortDirection.lower(direction),
                FfiConverterOptionUInt64.lower(offset),
                FfiConverterOptionUInt64.lower(limit), $0
            )
        })
    }

    public static func keyExact(key: Data, sortBy: SortBy, direction: SortDirection, offset: UInt64?, limit: UInt64?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_key_exact(
                FfiConverterData.lower(key),
                FfiConverterTypeSortBy.lower(sortBy),
                FfiConverterTypeSortDirection.lower(direction),
                FfiConverterOptionUInt64.lower(offset),
                FfiConverterOptionUInt64.lower(limit), $0
            )
        })
    }

    public static func keyPrefix(prefix: Data, sortBy: SortBy, direction: SortDirection, offset: UInt64?, limit: UInt64?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_key_prefix(
                FfiConverterData.lower(prefix),
                FfiConverterTypeSortBy.lower(sortBy),
                FfiConverterTypeSortDirection.lower(direction),
                FfiConverterOptionUInt64.lower(offset),
                FfiConverterOptionUInt64.lower(limit), $0
            )
        })
    }

    public static func singleLatestPerKey(direction: SortDirection, offset: UInt64?, limit: UInt64?) -> Query {
        return Query(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_query_single_latest_per_key(
                FfiConverterTypeSortDirection.lower(direction),
                FfiConverterOptionUInt64.lower(offset),
                FfiConverterOptionUInt64.lower(limit), $0
            )
        })
    }

    public func limit() -> UInt64? {
        return try! FfiConverterOptionUInt64.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_query_limit(self.pointer, $0)
                }
        )
    }

    public func offset() -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_query_offset(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeQuery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Query

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Query {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Query, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
        return Query(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Query) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeQuery_lift(_ pointer: UnsafeMutableRawPointer) throws -> Query {
    return try FfiConverterTypeQuery.lift(pointer)
}

public func FfiConverterTypeQuery_lower(_ value: Query) -> UnsafeMutableRawPointer {
    return FfiConverterTypeQuery.lower(value)
}

public protocol SocketAddrProtocol {
    func asIpv4() -> SocketAddrV4
    func asIpv6() -> SocketAddrV6
    func equal(other: SocketAddr) -> Bool
    func type() -> SocketAddrType
}

public class SocketAddr: SocketAddrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddr(pointer, $0) }
    }

    public static func fromIpv4(ipv4: Ipv4Addr, port: UInt16) -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddr_from_ipv4(
                FfiConverterTypeIpv4Addr.lower(ipv4),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    public static func fromIpv6(ipv6: Ipv6Addr, port: UInt16) -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddr_from_ipv6(
                FfiConverterTypeIpv6Addr.lower(ipv6),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    public func asIpv4() -> SocketAddrV4 {
        return try! FfiConverterTypeSocketAddrV4.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_as_ipv4(self.pointer, $0)
                }
        )
    }

    public func asIpv6() -> SocketAddrV6 {
        return try! FfiConverterTypeSocketAddrV6.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_as_ipv6(self.pointer, $0)
                }
        )
    }

    public func equal(other: SocketAddr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_equal(self.pointer,
                                                           FfiConverterTypeSocketAddr.lower(other), $0)
                }
        )
    }

    public func type() -> SocketAddrType {
        return try! FfiConverterTypeSocketAddrType.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddr_type(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddr {
        return SocketAddr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddr_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddr {
    return try FfiConverterTypeSocketAddr.lift(pointer)
}

public func FfiConverterTypeSocketAddr_lower(_ value: SocketAddr) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddr.lower(value)
}

public protocol SocketAddrV4Protocol {
    func equal(other: SocketAddrV4) -> Bool
    func ip() -> Ipv4Addr
    func port() -> UInt16
    func toString() -> String
}

public class SocketAddrV4: SocketAddrV4Protocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(ipv4: Ipv4Addr, port: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddrv4_new(
                FfiConverterTypeIpv4Addr.lower(ipv4),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddrv4(pointer, $0) }
    }

    public static func fromString(str: String) throws -> SocketAddrV4 {
        return try SocketAddrV4(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_socketaddrv4_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: SocketAddrV4) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_equal(self.pointer,
                                                             FfiConverterTypeSocketAddrV4.lower(other), $0)
                }
        )
    }

    public func ip() -> Ipv4Addr {
        return try! FfiConverterTypeIpv4Addr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_ip(self.pointer, $0)
                }
        )
    }

    public func port() -> UInt16 {
        return try! FfiConverterUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_port(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv4_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddrV4: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddrV4

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrV4 {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddrV4, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV4 {
        return SocketAddrV4(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddrV4) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddrV4_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV4 {
    return try FfiConverterTypeSocketAddrV4.lift(pointer)
}

public func FfiConverterTypeSocketAddrV4_lower(_ value: SocketAddrV4) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddrV4.lower(value)
}

public protocol SocketAddrV6Protocol {
    func equal(other: SocketAddrV6) -> Bool
    func ip() -> Ipv6Addr
    func port() -> UInt16
    func toString() -> String
}

public class SocketAddrV6: SocketAddrV6Protocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(ipv6: Ipv6Addr, port: UInt16) {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_iroh_fn_constructor_socketaddrv6_new(
                FfiConverterTypeIpv6Addr.lower(ipv6),
                FfiConverterUInt16.lower(port), $0
            )
        })
    }

    deinit {
        try! rustCall { uniffi_iroh_fn_free_socketaddrv6(pointer, $0) }
    }

    public static func fromString(str: String) throws -> SocketAddrV6 {
        return try SocketAddrV6(unsafeFromRawPointer: rustCallWithError(FfiConverterTypeIrohError.lift) {
            uniffi_iroh_fn_constructor_socketaddrv6_from_string(
                FfiConverterString.lower(str), $0
            )
        })
    }

    public func equal(other: SocketAddrV6) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_equal(self.pointer,
                                                             FfiConverterTypeSocketAddrV6.lower(other), $0)
                }
        )
    }

    public func ip() -> Ipv6Addr {
        return try! FfiConverterTypeIpv6Addr.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_ip(self.pointer, $0)
                }
        )
    }

    public func port() -> UInt16 {
        return try! FfiConverterUInt16.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_port(self.pointer, $0)
                }
        )
    }

    public func toString() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_iroh_fn_method_socketaddrv6_to_string(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeSocketAddrV6: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SocketAddrV6

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrV6 {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SocketAddrV6, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV6 {
        return SocketAddrV6(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SocketAddrV6) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeSocketAddrV6_lift(_ pointer: UnsafeMutableRawPointer) throws -> SocketAddrV6 {
    return try FfiConverterTypeSocketAddrV6.lift(pointer)
}

public func FfiConverterTypeSocketAddrV6_lower(_ value: SocketAddrV6) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSocketAddrV6.lower(value)
}

public struct ConnectionInfo {
    public var publicKey: PublicKey
    public var derpRegion: UInt16?
    public var addrs: [DirectAddrInfo]
    public var connType: ConnectionType
    public var latency: TimeInterval?
    public var lastUsed: TimeInterval?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(publicKey: PublicKey, derpRegion: UInt16?, addrs: [DirectAddrInfo], connType: ConnectionType, latency: TimeInterval?, lastUsed: TimeInterval?) {
        self.publicKey = publicKey
        self.derpRegion = derpRegion
        self.addrs = addrs
        self.connType = connType
        self.latency = latency
        self.lastUsed = lastUsed
    }
}

public struct FfiConverterTypeConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionInfo {
        return try ConnectionInfo(
            publicKey: FfiConverterTypePublicKey.read(from: &buf),
            derpRegion: FfiConverterOptionUInt16.read(from: &buf),
            addrs: FfiConverterSequenceTypeDirectAddrInfo.read(from: &buf),
            connType: FfiConverterTypeConnectionType.read(from: &buf),
            latency: FfiConverterOptionDuration.read(from: &buf),
            lastUsed: FfiConverterOptionDuration.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.publicKey, into: &buf)
        FfiConverterOptionUInt16.write(value.derpRegion, into: &buf)
        FfiConverterSequenceTypeDirectAddrInfo.write(value.addrs, into: &buf)
        FfiConverterTypeConnectionType.write(value.connType, into: &buf)
        FfiConverterOptionDuration.write(value.latency, into: &buf)
        FfiConverterOptionDuration.write(value.lastUsed, into: &buf)
    }
}

public func FfiConverterTypeConnectionInfo_lift(_ buf: RustBuffer) throws -> ConnectionInfo {
    return try FfiConverterTypeConnectionInfo.lift(buf)
}

public func FfiConverterTypeConnectionInfo_lower(_ value: ConnectionInfo) -> RustBuffer {
    return FfiConverterTypeConnectionInfo.lower(value)
}

public struct CounterStats {
    public var value: UInt64
    public var description: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: UInt64, description: String) {
        self.value = value
        self.description = description
    }
}

extension CounterStats: Equatable, Hashable {
    public static func == (lhs: CounterStats, rhs: CounterStats) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(description)
    }
}

public struct FfiConverterTypeCounterStats: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CounterStats {
        return try CounterStats(
            value: FfiConverterUInt64.read(from: &buf),
            description: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CounterStats, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.value, into: &buf)
        FfiConverterString.write(value.description, into: &buf)
    }
}

public func FfiConverterTypeCounterStats_lift(_ buf: RustBuffer) throws -> CounterStats {
    return try FfiConverterTypeCounterStats.lift(buf)
}

public func FfiConverterTypeCounterStats_lower(_ value: CounterStats) -> RustBuffer {
    return FfiConverterTypeCounterStats.lower(value)
}

public struct InsertRemoteEvent {
    public var from: PublicKey
    public var entry: Entry
    public var contentStatus: ContentStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(from: PublicKey, entry: Entry, contentStatus: ContentStatus) {
        self.from = from
        self.entry = entry
        self.contentStatus = contentStatus
    }
}

public struct FfiConverterTypeInsertRemoteEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InsertRemoteEvent {
        return try InsertRemoteEvent(
            from: FfiConverterTypePublicKey.read(from: &buf),
            entry: FfiConverterTypeEntry.read(from: &buf),
            contentStatus: FfiConverterTypeContentStatus.read(from: &buf)
        )
    }

    public static func write(_ value: InsertRemoteEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.from, into: &buf)
        FfiConverterTypeEntry.write(value.entry, into: &buf)
        FfiConverterTypeContentStatus.write(value.contentStatus, into: &buf)
    }
}

public func FfiConverterTypeInsertRemoteEvent_lift(_ buf: RustBuffer) throws -> InsertRemoteEvent {
    return try FfiConverterTypeInsertRemoteEvent.lift(buf)
}

public func FfiConverterTypeInsertRemoteEvent_lower(_ value: InsertRemoteEvent) -> RustBuffer {
    return FfiConverterTypeInsertRemoteEvent.lower(value)
}

public struct NamespaceAndCapability {
    public var namespace: NamespaceId
    public var capability: CapabilityKind

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(namespace: NamespaceId, capability: CapabilityKind) {
        self.namespace = namespace
        self.capability = capability
    }
}

public struct FfiConverterTypeNamespaceAndCapability: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NamespaceAndCapability {
        return try NamespaceAndCapability(
            namespace: FfiConverterTypeNamespaceId.read(from: &buf),
            capability: FfiConverterTypeCapabilityKind.read(from: &buf)
        )
    }

    public static func write(_ value: NamespaceAndCapability, into buf: inout [UInt8]) {
        FfiConverterTypeNamespaceId.write(value.namespace, into: &buf)
        FfiConverterTypeCapabilityKind.write(value.capability, into: &buf)
    }
}

public func FfiConverterTypeNamespaceAndCapability_lift(_ buf: RustBuffer) throws -> NamespaceAndCapability {
    return try FfiConverterTypeNamespaceAndCapability.lift(buf)
}

public func FfiConverterTypeNamespaceAndCapability_lower(_ value: NamespaceAndCapability) -> RustBuffer {
    return FfiConverterTypeNamespaceAndCapability.lower(value)
}

public struct OpenState {
    public var sync: Bool
    public var subscribers: UInt64
    public var handles: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(sync: Bool, subscribers: UInt64, handles: UInt64) {
        self.sync = sync
        self.subscribers = subscribers
        self.handles = handles
    }
}

extension OpenState: Equatable, Hashable {
    public static func == (lhs: OpenState, rhs: OpenState) -> Bool {
        if lhs.sync != rhs.sync {
            return false
        }
        if lhs.subscribers != rhs.subscribers {
            return false
        }
        if lhs.handles != rhs.handles {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sync)
        hasher.combine(subscribers)
        hasher.combine(handles)
    }
}

public struct FfiConverterTypeOpenState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OpenState {
        return try OpenState(
            sync: FfiConverterBool.read(from: &buf),
            subscribers: FfiConverterUInt64.read(from: &buf),
            handles: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OpenState, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.sync, into: &buf)
        FfiConverterUInt64.write(value.subscribers, into: &buf)
        FfiConverterUInt64.write(value.handles, into: &buf)
    }
}

public func FfiConverterTypeOpenState_lift(_ buf: RustBuffer) throws -> OpenState {
    return try FfiConverterTypeOpenState.lift(buf)
}

public func FfiConverterTypeOpenState_lower(_ value: OpenState) -> RustBuffer {
    return FfiConverterTypeOpenState.lower(value)
}

public struct SyncEvent {
    public var peer: PublicKey
    public var origin: Origin
    public var started: Date
    public var finished: Date
    public var result: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: PublicKey, origin: Origin, started: Date, finished: Date, result: String?) {
        self.peer = peer
        self.origin = origin
        self.started = started
        self.finished = finished
        self.result = result
    }
}

public struct FfiConverterTypeSyncEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncEvent {
        return try SyncEvent(
            peer: FfiConverterTypePublicKey.read(from: &buf),
            origin: FfiConverterTypeOrigin.read(from: &buf),
            started: FfiConverterTimestamp.read(from: &buf),
            finished: FfiConverterTimestamp.read(from: &buf),
            result: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SyncEvent, into buf: inout [UInt8]) {
        FfiConverterTypePublicKey.write(value.peer, into: &buf)
        FfiConverterTypeOrigin.write(value.origin, into: &buf)
        FfiConverterTimestamp.write(value.started, into: &buf)
        FfiConverterTimestamp.write(value.finished, into: &buf)
        FfiConverterOptionString.write(value.result, into: &buf)
    }
}

public func FfiConverterTypeSyncEvent_lift(_ buf: RustBuffer) throws -> SyncEvent {
    return try FfiConverterTypeSyncEvent.lift(buf)
}

public func FfiConverterTypeSyncEvent_lower(_ value: SyncEvent) -> RustBuffer {
    return FfiConverterTypeSyncEvent.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum CapabilityKind {
    case write
    case read
}

public struct FfiConverterTypeCapabilityKind: FfiConverterRustBuffer {
    typealias SwiftType = CapabilityKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CapabilityKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .write

        case 2: return .read

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CapabilityKind, into buf: inout [UInt8]) {
        switch value {
        case .write:
            writeInt(&buf, Int32(1))

        case .read:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeCapabilityKind_lift(_ buf: RustBuffer) throws -> CapabilityKind {
    return try FfiConverterTypeCapabilityKind.lift(buf)
}

public func FfiConverterTypeCapabilityKind_lower(_ value: CapabilityKind) -> RustBuffer {
    return FfiConverterTypeCapabilityKind.lower(value)
}

extension CapabilityKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ConnectionType {
    case direct(addr: String, port: UInt16)
    case relay(port: UInt16)
    case mixed(addr: String, port: UInt16)
    case none
}

public struct FfiConverterTypeConnectionType: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .direct(
                addr: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 2: return try .relay(
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 3: return try .mixed(
                addr: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt16.read(from: &buf)
            )

        case 4: return .none

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionType, into buf: inout [UInt8]) {
        switch value {
        case let .direct(addr, port):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(addr, into: &buf)
            FfiConverterUInt16.write(port, into: &buf)

        case let .relay(port):
            writeInt(&buf, Int32(2))
            FfiConverterUInt16.write(port, into: &buf)

        case let .mixed(addr, port):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(addr, into: &buf)
            FfiConverterUInt16.write(port, into: &buf)

        case .none:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeConnectionType_lift(_ buf: RustBuffer) throws -> ConnectionType {
    return try FfiConverterTypeConnectionType.lift(buf)
}

public func FfiConverterTypeConnectionType_lower(_ value: ConnectionType) -> RustBuffer {
    return FfiConverterTypeConnectionType.lower(value)
}

extension ConnectionType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ContentStatus {
    case complete
    case incomplete
    case missing
}

public struct FfiConverterTypeContentStatus: FfiConverterRustBuffer {
    typealias SwiftType = ContentStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContentStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .complete

        case 2: return .incomplete

        case 3: return .missing

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContentStatus, into buf: inout [UInt8]) {
        switch value {
        case .complete:
            writeInt(&buf, Int32(1))

        case .incomplete:
            writeInt(&buf, Int32(2))

        case .missing:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeContentStatus_lift(_ buf: RustBuffer) throws -> ContentStatus {
    return try FfiConverterTypeContentStatus.lift(buf)
}

public func FfiConverterTypeContentStatus_lower(_ value: ContentStatus) -> RustBuffer {
    return FfiConverterTypeContentStatus.lower(value)
}

extension ContentStatus: Equatable, Hashable {}

public enum IrohError {
    case Runtime(description: String)
    case NodeCreate(description: String)
    case Doc(description: String)
    case Author(description: String)
    case Namespace(description: String)
    case DocTicket(description: String)
    case Uniffi(description: String)
    case Connection(description: String)
    case Blob(description: String)
    case Ipv4Addr(description: String)
    case Ipv6Addr(description: String)
    case SocketAddrV4(description: String)
    case SocketAddrV6(description: String)
    case PublicKey(description: String)
    case NodeAddr(description: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeIrohError.lift(error)
    }
}

public struct FfiConverterTypeIrohError: FfiConverterRustBuffer {
    typealias SwiftType = IrohError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IrohError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .Runtime(
                description: FfiConverterString.read(from: &buf)
            )
        case 2: return try .NodeCreate(
                description: FfiConverterString.read(from: &buf)
            )
        case 3: return try .Doc(
                description: FfiConverterString.read(from: &buf)
            )
        case 4: return try .Author(
                description: FfiConverterString.read(from: &buf)
            )
        case 5: return try .Namespace(
                description: FfiConverterString.read(from: &buf)
            )
        case 6: return try .DocTicket(
                description: FfiConverterString.read(from: &buf)
            )
        case 7: return try .Uniffi(
                description: FfiConverterString.read(from: &buf)
            )
        case 8: return try .Connection(
                description: FfiConverterString.read(from: &buf)
            )
        case 9: return try .Blob(
                description: FfiConverterString.read(from: &buf)
            )
        case 10: return try .Ipv4Addr(
                description: FfiConverterString.read(from: &buf)
            )
        case 11: return try .Ipv6Addr(
                description: FfiConverterString.read(from: &buf)
            )
        case 12: return try .SocketAddrV4(
                description: FfiConverterString.read(from: &buf)
            )
        case 13: return try .SocketAddrV6(
                description: FfiConverterString.read(from: &buf)
            )
        case 14: return try .PublicKey(
                description: FfiConverterString.read(from: &buf)
            )
        case 15: return try .NodeAddr(
                description: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IrohError, into buf: inout [UInt8]) {
        switch value {
        case let .Runtime(description):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(description, into: &buf)

        case let .NodeCreate(description):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(description, into: &buf)

        case let .Doc(description):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(description, into: &buf)

        case let .Author(description):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(description, into: &buf)

        case let .Namespace(description):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(description, into: &buf)

        case let .DocTicket(description):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(description, into: &buf)

        case let .Uniffi(description):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(description, into: &buf)

        case let .Connection(description):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(description, into: &buf)

        case let .Blob(description):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(description, into: &buf)

        case let .Ipv4Addr(description):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(description, into: &buf)

        case let .Ipv6Addr(description):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(description, into: &buf)

        case let .SocketAddrV4(description):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(description, into: &buf)

        case let .SocketAddrV6(description):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(description, into: &buf)

        case let .PublicKey(description):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(description, into: &buf)

        case let .NodeAddr(description):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(description, into: &buf)
        }
    }
}

extension IrohError: Equatable, Hashable {}

extension IrohError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LiveEventType {
    case insertLocal
    case insertRemote
    case contentReady
    case neighborUp
    case neighborDown
    case syncFinished
}

public struct FfiConverterTypeLiveEventType: FfiConverterRustBuffer {
    typealias SwiftType = LiveEventType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LiveEventType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .insertLocal

        case 2: return .insertRemote

        case 3: return .contentReady

        case 4: return .neighborUp

        case 5: return .neighborDown

        case 6: return .syncFinished

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LiveEventType, into buf: inout [UInt8]) {
        switch value {
        case .insertLocal:
            writeInt(&buf, Int32(1))

        case .insertRemote:
            writeInt(&buf, Int32(2))

        case .contentReady:
            writeInt(&buf, Int32(3))

        case .neighborUp:
            writeInt(&buf, Int32(4))

        case .neighborDown:
            writeInt(&buf, Int32(5))

        case .syncFinished:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeLiveEventType_lift(_ buf: RustBuffer) throws -> LiveEventType {
    return try FfiConverterTypeLiveEventType.lift(buf)
}

public func FfiConverterTypeLiveEventType_lower(_ value: LiveEventType) -> RustBuffer {
    return FfiConverterTypeLiveEventType.lower(value)
}

extension LiveEventType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LogLevel {
    case trace
    case debug
    case info
    case warn
    case error
    case off
}

public struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .trace

        case 2: return .debug

        case 3: return .info

        case 4: return .warn

        case 5: return .error

        case 6: return .off

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogLevel, into buf: inout [UInt8]) {
        switch value {
        case .trace:
            writeInt(&buf, Int32(1))

        case .debug:
            writeInt(&buf, Int32(2))

        case .info:
            writeInt(&buf, Int32(3))

        case .warn:
            writeInt(&buf, Int32(4))

        case .error:
            writeInt(&buf, Int32(5))

        case .off:
            writeInt(&buf, Int32(6))
        }
    }
}

public func FfiConverterTypeLogLevel_lift(_ buf: RustBuffer) throws -> LogLevel {
    return try FfiConverterTypeLogLevel.lift(buf)
}

public func FfiConverterTypeLogLevel_lower(_ value: LogLevel) -> RustBuffer {
    return FfiConverterTypeLogLevel.lower(value)
}

extension LogLevel: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Origin {
    case connect
    case accept
}

public struct FfiConverterTypeOrigin: FfiConverterRustBuffer {
    typealias SwiftType = Origin

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Origin {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .connect

        case 2: return .accept

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Origin, into buf: inout [UInt8]) {
        switch value {
        case .connect:
            writeInt(&buf, Int32(1))

        case .accept:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeOrigin_lift(_ buf: RustBuffer) throws -> Origin {
    return try FfiConverterTypeOrigin.lift(buf)
}

public func FfiConverterTypeOrigin_lower(_ value: Origin) -> RustBuffer {
    return FfiConverterTypeOrigin.lower(value)
}

extension Origin: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ShareMode {
    case read
    case write
}

public struct FfiConverterTypeShareMode: FfiConverterRustBuffer {
    typealias SwiftType = ShareMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShareMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .read

        case 2: return .write

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ShareMode, into buf: inout [UInt8]) {
        switch value {
        case .read:
            writeInt(&buf, Int32(1))

        case .write:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeShareMode_lift(_ buf: RustBuffer) throws -> ShareMode {
    return try FfiConverterTypeShareMode.lift(buf)
}

public func FfiConverterTypeShareMode_lower(_ value: ShareMode) -> RustBuffer {
    return FfiConverterTypeShareMode.lower(value)
}

extension ShareMode: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SocketAddrType {
    case v4
    case v6
}

public struct FfiConverterTypeSocketAddrType: FfiConverterRustBuffer {
    typealias SwiftType = SocketAddrType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SocketAddrType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .v4

        case 2: return .v6

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SocketAddrType, into buf: inout [UInt8]) {
        switch value {
        case .v4:
            writeInt(&buf, Int32(1))

        case .v6:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSocketAddrType_lift(_ buf: RustBuffer) throws -> SocketAddrType {
    return try FfiConverterTypeSocketAddrType.lift(buf)
}

public func FfiConverterTypeSocketAddrType_lower(_ value: SocketAddrType) -> RustBuffer {
    return FfiConverterTypeSocketAddrType.lower(value)
}

extension SocketAddrType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SortBy {
    case keyAuthor
    case authorKey
}

public struct FfiConverterTypeSortBy: FfiConverterRustBuffer {
    typealias SwiftType = SortBy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortBy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keyAuthor

        case 2: return .authorKey

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortBy, into buf: inout [UInt8]) {
        switch value {
        case .keyAuthor:
            writeInt(&buf, Int32(1))

        case .authorKey:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortBy_lift(_ buf: RustBuffer) throws -> SortBy {
    return try FfiConverterTypeSortBy.lift(buf)
}

public func FfiConverterTypeSortBy_lower(_ value: SortBy) -> RustBuffer {
    return FfiConverterTypeSortBy.lower(value)
}

extension SortBy: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SortDirection {
    case asc
    case desc
}

public struct FfiConverterTypeSortDirection: FfiConverterRustBuffer {
    typealias SwiftType = SortDirection

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SortDirection {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .asc

        case 2: return .desc

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SortDirection, into buf: inout [UInt8]) {
        switch value {
        case .asc:
            writeInt(&buf, Int32(1))

        case .desc:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSortDirection_lift(_ buf: RustBuffer) throws -> SortDirection {
    return try FfiConverterTypeSortDirection.lift(buf)
}

public func FfiConverterTypeSortDirection_lower(_ value: SortDirection) -> RustBuffer {
    return FfiConverterTypeSortDirection.lower(value)
}

extension SortDirection: Equatable, Hashable {}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for SubscribeCallback Callback Interface

public protocol SubscribeCallback: AnyObject {
    func event(event: LiveEvent) throws
}

// The ForeignCallback that is passed to Rust.
private let foreignCallbackCallbackInterfaceSubscribeCallback: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeEvent(_ swiftCallbackInterface: SubscribeCallback, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.event(
                event: FfiConverterTypeLiveEvent.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as IrohError {
            out_buf.pointee = FfiConverterTypeIrohError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceSubscribeCallback.drop(handle: handle)
        // Sucessful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        let cb: SubscribeCallback
        do {
            cb = try FfiConverterCallbackInterfaceSubscribeCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("SubscribeCallback: Invalid handle")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeEvent(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceSubscribeCallback {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_iroh_fn_init_callback_subscribecallback(foreignCallbackCallbackInterfaceSubscribeCallback, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<SubscribeCallback>()
}

extension FfiConverterCallbackInterfaceSubscribeCallback: FfiConverter {
    typealias SwiftType = SubscribeCallback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized()
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized()
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized()
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized()
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = Entry?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEntry.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEntry.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeConnectionInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeConnectionInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAuthorId: FfiConverterRustBuffer {
    typealias SwiftType = [AuthorId]

    public static func write(_ value: [AuthorId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAuthorId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AuthorId] {
        let len: Int32 = try readInt(&buf)
        var seq = [AuthorId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAuthorId.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeDirectAddrInfo: FfiConverterRustBuffer {
    typealias SwiftType = [DirectAddrInfo]

    public static func write(_ value: [DirectAddrInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDirectAddrInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DirectAddrInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [DirectAddrInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDirectAddrInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeEntry: FfiConverterRustBuffer {
    typealias SwiftType = [Entry]

    public static func write(_ value: [Entry], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEntry.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Entry] {
        let len: Int32 = try readInt(&buf)
        var seq = [Entry]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeEntry.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeHash: FfiConverterRustBuffer {
    typealias SwiftType = [Hash]

    public static func write(_ value: [Hash], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeHash.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Hash] {
        let len: Int32 = try readInt(&buf)
        var seq = [Hash]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeHash.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNodeAddr: FfiConverterRustBuffer {
    typealias SwiftType = [NodeAddr]

    public static func write(_ value: [NodeAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNodeAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NodeAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [NodeAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNodeAddr.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeSocketAddr: FfiConverterRustBuffer {
    typealias SwiftType = [SocketAddr]

    public static func write(_ value: [SocketAddr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSocketAddr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SocketAddr] {
        let len: Int32 = try readInt(&buf)
        var seq = [SocketAddr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeSocketAddr.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeConnectionInfo: FfiConverterRustBuffer {
    typealias SwiftType = [ConnectionInfo]

    public static func write(_ value: [ConnectionInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeConnectionInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ConnectionInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [ConnectionInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeConnectionInfo.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeNamespaceAndCapability: FfiConverterRustBuffer {
    typealias SwiftType = [NamespaceAndCapability]

    public static func write(_ value: [NamespaceAndCapability], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNamespaceAndCapability.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NamespaceAndCapability] {
        let len: Int32 = try readInt(&buf)
        var seq = [NamespaceAndCapability]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeNamespaceAndCapability.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryStringTypeCounterStats: FfiConverterRustBuffer {
    public static func write(_ value: [String: CounterStats], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeCounterStats.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: CounterStats] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: CounterStats]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeCounterStats.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func setLogLevel(level: LogLevel) {
    try! rustCall {
        uniffi_iroh_fn_func_set_log_level(
            FfiConverterTypeLogLevel.lower(level), $0
        )
    }
}

public func startMetricsCollection() throws {
    try rustCallWithError(FfiConverterTypeIrohError.lift) {
        uniffi_iroh_fn_func_start_metrics_collection($0)
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 23
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_iroh_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_iroh_checksum_func_set_log_level() != 52296 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_func_start_metrics_collection() != 17691 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_equal() != 33867 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_authorid_to_string() != 42389 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_close() != 23013 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_del() != 22285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_many() != 58857 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_get_one() != 25151 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_id() != 34677 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_leave() != 55816 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_read_to_bytes() != 37830 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_bytes() != 15024 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_set_hash() != 20311 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_share() != 28913 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_size() != 27875 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_start_sync() != 54158 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_status() != 59550 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_doc_subscribe() != 2866 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docticket_equal() != 14909 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_docticket_to_string() != 22814 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_author() != 26124 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_key() != 19122 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_entry_namespace() != 41306 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_bytes() != 29465 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_hash_to_string() != 61408 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_equal() != 51523 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_octets() != 17752 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv4addr_to_string() != 5658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_equal() != 26037 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_segments() != 41182 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_ipv6addr_to_string() != 46637 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_list() != 12499 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_author_new() != 61553 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blob_get() != 2655 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_blob_list_blobs() != 22311 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connection_info() != 39895 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_connections() != 37352 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_join() != 30773 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_list() != 44252 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_doc_new() != 34009 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_node_id() != 31962 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_irohnode_stats() != 16158 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_content_ready() != 15237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_local() != 431 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_insert_remote() != 17302 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_down() != 154 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_neighbor_up() != 25727 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_as_sync_finished() != 14329 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_liveevent_type() != 35533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_namespaceid_equal() != 18805 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_namespaceid_to_string() != 63715 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_derp_region() != 62080 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_direct_addresses() != 20857 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_nodeaddr_equal() != 45841 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_equal() != 10645 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_fmt_short() != 33947 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_bytes() != 54334 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_publickey_to_string() != 48998 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_limit() != 6405 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_query_offset() != 5309 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_as_ipv4() != 50860 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_as_ipv6() != 40970 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_equal() != 1891 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddr_type() != 50972 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_equal() != 51550 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_ip() != 54004 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_port() != 34504 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv4_to_string() != 43672 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_equal() != 37651 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_ip() != 49803 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_port() != 39562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_socketaddrv6_to_string() != 14154 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_authorid_from_string() != 14210 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_docticket_from_string() != 40262 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv4addr_from_string() != 60777 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv4addr_new() != 51336 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv6addr_from_string() != 24533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_ipv6addr_new() != 18364 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_irohnode_new() != 22562 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_namespaceid_from_string() != 47535 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_nodeaddr_new() != 42954 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_bytes() != 65104 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_publickey_from_string() != 18975 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_all() != 7812 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_author() != 3352 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_exact() != 23311 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_key_prefix() != 13415 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_query_single_latest_per_key() != 35940 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddr_from_ipv4() != 48670 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddr_from_ipv6() != 45955 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv4_from_string() != 16157 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv4_new() != 12651 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv6_from_string() != 22443 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_constructor_socketaddrv6_new() != 46347 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_iroh_checksum_method_subscribecallback_event() != 18725 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
